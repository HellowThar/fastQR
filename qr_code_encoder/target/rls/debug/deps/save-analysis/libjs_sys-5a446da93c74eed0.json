{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50","program":"C:\\Users\\Jamison\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","js_sys","--edition=2018","C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=5a446da93c74eed0","-C","extra-filename=-5a446da93c74eed0","--out-dir","c:\\Users\\Jamison\\Desktop\\Web-Dev\\svelte_wasm_qr_code_encoder\\qr_code_encoder\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Jamison\\Desktop\\Web-Dev\\svelte_wasm_qr_code_encoder\\qr_code_encoder\\target\\rls\\debug\\deps","--extern","wasm_bindgen=c:\\Users\\Jamison\\Desktop\\Web-Dev\\svelte_wasm_qr_code_encoder\\qr_code_encoder\\target\\rls\\debug\\deps\\libwasm_bindgen-3c4ed7975ed5330c.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Jamison\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Jamison\\Desktop\\Web-Dev\\svelte_wasm_qr_code_encoder\\qr_code_encoder\\target\\rls\\debug\\deps\\libjs_sys-5a446da93c74eed0.rmeta"},"prelude":{"crate_id":{"name":"js_sys","disambiguator":[2993027306560248711,9750589475466052306]},"crate_root":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src","external_crates":[{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[15394396593765937133,15104794829170053384]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14223085168939843507,9453778982390123811]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10495964697894269666,7444397110794681726]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5630579929119936438,10747952327389013202]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[755004289757070725,4528322009891643596]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12293211462733931105,3605749939090106910]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14880717690889174640,9014378682587101436]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[1733233879246965746,6308927592973156139]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2578852399168599952,875302055328020592]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15050766551219055192,6843698544963456792]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[14716868785672998615,14481457355720881040]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[7183069464598737283,14932178614966804545]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","num":13,"id":{"name":"wasm_bindgen","disambiguator":[2998013274337810675,5185237831698477851]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","num":14,"id":{"name":"wasm_bindgen_macro","disambiguator":[18338968468649887442,16732815138910634412]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","num":15,"id":{"name":"cfg_if","disambiguator":[5645197522646515231,12829599349970567115]}}],"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":0,"byte_end":249528,"line_start":1,"line_end":5060,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":0,"byte_end":249528,"line_start":1,"line_end":5060,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":342},{"krate":0,"index":353},{"krate":0,"index":351},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":159},{"krate":0,"index":213},{"krate":0,"index":216},{"krate":0,"index":219},{"krate":0,"index":222},{"krate":0,"index":225},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":273},{"krate":0,"index":276},{"krate":0,"index":279},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":288},{"krate":0,"index":291},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":303},{"krate":0,"index":306},{"krate":0,"index":309},{"krate":0,"index":312},{"krate":0,"index":315},{"krate":0,"index":318},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":336},{"krate":0,"index":339},{"krate":0,"index":355},{"krate":0,"index":362},{"krate":0,"index":359},{"krate":0,"index":8},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":439},{"krate":0,"index":450},{"krate":0,"index":448},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":365},{"krate":0,"index":418},{"krate":0,"index":421},{"krate":0,"index":424},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":433},{"krate":0,"index":436},{"krate":0,"index":523},{"krate":0,"index":527},{"krate":0,"index":525},{"krate":0,"index":452},{"krate":0,"index":505},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":535},{"krate":0,"index":27},{"krate":0,"index":633},{"krate":0,"index":642},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":566},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":627},{"krate":0,"index":630},{"krate":0,"index":29},{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":35},{"krate":0,"index":799},{"krate":0,"index":810},{"krate":0,"index":808},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":644},{"krate":0,"index":697},{"krate":0,"index":700},{"krate":0,"index":703},{"krate":0,"index":706},{"krate":0,"index":709},{"krate":0,"index":712},{"krate":0,"index":715},{"krate":0,"index":718},{"krate":0,"index":721},{"krate":0,"index":724},{"krate":0,"index":727},{"krate":0,"index":730},{"krate":0,"index":733},{"krate":0,"index":736},{"krate":0,"index":739},{"krate":0,"index":742},{"krate":0,"index":745},{"krate":0,"index":748},{"krate":0,"index":751},{"krate":0,"index":754},{"krate":0,"index":757},{"krate":0,"index":760},{"krate":0,"index":763},{"krate":0,"index":766},{"krate":0,"index":769},{"krate":0,"index":772},{"krate":0,"index":775},{"krate":0,"index":778},{"krate":0,"index":781},{"krate":0,"index":784},{"krate":0,"index":787},{"krate":0,"index":790},{"krate":0,"index":793},{"krate":0,"index":796},{"krate":0,"index":889},{"krate":0,"index":900},{"krate":0,"index":898},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":812},{"krate":0,"index":865},{"krate":0,"index":868},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":877},{"krate":0,"index":880},{"krate":0,"index":883},{"krate":0,"index":886},{"krate":0,"index":970},{"krate":0,"index":981},{"krate":0,"index":979},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":902},{"krate":0,"index":955},{"krate":0,"index":958},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":1088},{"krate":0,"index":1099},{"krate":0,"index":1097},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":983},{"krate":0,"index":1037},{"krate":0,"index":1040},{"krate":0,"index":1043},{"krate":0,"index":1046},{"krate":0,"index":1049},{"krate":0,"index":1052},{"krate":0,"index":1055},{"krate":0,"index":1058},{"krate":0,"index":1061},{"krate":0,"index":1064},{"krate":0,"index":1067},{"krate":0,"index":1070},{"krate":0,"index":1073},{"krate":0,"index":1076},{"krate":0,"index":1079},{"krate":0,"index":1082},{"krate":0,"index":1085},{"krate":0,"index":37},{"krate":0,"index":1169},{"krate":0,"index":1180},{"krate":0,"index":1178},{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1101},{"krate":0,"index":1154},{"krate":0,"index":1157},{"krate":0,"index":1160},{"krate":0,"index":1163},{"krate":0,"index":1166},{"krate":0,"index":1265},{"krate":0,"index":1276},{"krate":0,"index":1274},{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1182},{"krate":0,"index":1235},{"krate":0,"index":1238},{"krate":0,"index":1241},{"krate":0,"index":1244},{"krate":0,"index":1247},{"krate":0,"index":1250},{"krate":0,"index":1253},{"krate":0,"index":1256},{"krate":0,"index":1259},{"krate":0,"index":1262},{"krate":0,"index":1278},{"krate":0,"index":1281},{"krate":0,"index":1284},{"krate":0,"index":1344},{"krate":0,"index":1348},{"krate":0,"index":1346},{"krate":0,"index":1287},{"krate":0,"index":1341},{"krate":0,"index":39},{"krate":0,"index":1464},{"krate":0,"index":1468},{"krate":0,"index":1466},{"krate":0,"index":1407},{"krate":0,"index":1461},{"krate":0,"index":41},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":55},{"krate":0,"index":59},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":1535},{"krate":0,"index":1546},{"krate":0,"index":1544},{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1537},{"krate":0,"index":1538},{"krate":0,"index":1470},{"krate":0,"index":1523},{"krate":0,"index":1526},{"krate":0,"index":1529},{"krate":0,"index":1532},{"krate":0,"index":70},{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":1618},{"krate":0,"index":1673},{"krate":0,"index":1676},{"krate":0,"index":1679},{"krate":0,"index":1682},{"krate":0,"index":1685},{"krate":0,"index":1688},{"krate":0,"index":1691},{"krate":0,"index":1694},{"krate":0,"index":1697},{"krate":0,"index":1700},{"krate":0,"index":1703},{"krate":0,"index":1706},{"krate":0,"index":1709},{"krate":0,"index":1712},{"krate":0,"index":1715},{"krate":0,"index":72},{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1738},{"krate":0,"index":1740},{"krate":0,"index":1742},{"krate":0,"index":1744},{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1752},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":1987},{"krate":0,"index":1998},{"krate":0,"index":1996},{"krate":0,"index":1992},{"krate":0,"index":1993},{"krate":0,"index":1989},{"krate":0,"index":1990},{"krate":0,"index":1754},{"krate":0,"index":1807},{"krate":0,"index":1810},{"krate":0,"index":1813},{"krate":0,"index":1816},{"krate":0,"index":1819},{"krate":0,"index":1822},{"krate":0,"index":1825},{"krate":0,"index":1828},{"krate":0,"index":1831},{"krate":0,"index":1834},{"krate":0,"index":1837},{"krate":0,"index":1840},{"krate":0,"index":1843},{"krate":0,"index":1846},{"krate":0,"index":1849},{"krate":0,"index":1852},{"krate":0,"index":1855},{"krate":0,"index":1858},{"krate":0,"index":1861},{"krate":0,"index":1864},{"krate":0,"index":1867},{"krate":0,"index":1870},{"krate":0,"index":1873},{"krate":0,"index":1876},{"krate":0,"index":1879},{"krate":0,"index":1882},{"krate":0,"index":1885},{"krate":0,"index":1888},{"krate":0,"index":1891},{"krate":0,"index":1894},{"krate":0,"index":1897},{"krate":0,"index":1900},{"krate":0,"index":1903},{"krate":0,"index":1906},{"krate":0,"index":1909},{"krate":0,"index":1912},{"krate":0,"index":1915},{"krate":0,"index":1918},{"krate":0,"index":1921},{"krate":0,"index":1924},{"krate":0,"index":1927},{"krate":0,"index":1930},{"krate":0,"index":1933},{"krate":0,"index":1936},{"krate":0,"index":1939},{"krate":0,"index":1942},{"krate":0,"index":1945},{"krate":0,"index":1948},{"krate":0,"index":1951},{"krate":0,"index":1954},{"krate":0,"index":1957},{"krate":0,"index":1960},{"krate":0,"index":1963},{"krate":0,"index":1966},{"krate":0,"index":1969},{"krate":0,"index":1972},{"krate":0,"index":1975},{"krate":0,"index":1978},{"krate":0,"index":1981},{"krate":0,"index":1984},{"krate":0,"index":2146},{"krate":0,"index":2150},{"krate":0,"index":2148},{"krate":0,"index":2000},{"krate":0,"index":2053},{"krate":0,"index":2056},{"krate":0,"index":2059},{"krate":0,"index":2062},{"krate":0,"index":2065},{"krate":0,"index":2068},{"krate":0,"index":2071},{"krate":0,"index":2074},{"krate":0,"index":2077},{"krate":0,"index":2080},{"krate":0,"index":2083},{"krate":0,"index":2086},{"krate":0,"index":2089},{"krate":0,"index":2092},{"krate":0,"index":2095},{"krate":0,"index":2098},{"krate":0,"index":2101},{"krate":0,"index":2104},{"krate":0,"index":2107},{"krate":0,"index":2110},{"krate":0,"index":2113},{"krate":0,"index":2116},{"krate":0,"index":2119},{"krate":0,"index":2122},{"krate":0,"index":2125},{"krate":0,"index":2128},{"krate":0,"index":2131},{"krate":0,"index":2134},{"krate":0,"index":2137},{"krate":0,"index":2140},{"krate":0,"index":2143},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":2211},{"krate":0,"index":2215},{"krate":0,"index":2213},{"krate":0,"index":2152},{"krate":0,"index":2205},{"krate":0,"index":2208},{"krate":0,"index":2285},{"krate":0,"index":2296},{"krate":0,"index":2294},{"krate":0,"index":2290},{"krate":0,"index":2291},{"krate":0,"index":2287},{"krate":0,"index":2288},{"krate":0,"index":2217},{"krate":0,"index":2270},{"krate":0,"index":2273},{"krate":0,"index":2276},{"krate":0,"index":2279},{"krate":0,"index":2282},{"krate":0,"index":2366},{"krate":0,"index":2377},{"krate":0,"index":2375},{"krate":0,"index":2371},{"krate":0,"index":2372},{"krate":0,"index":2368},{"krate":0,"index":2369},{"krate":0,"index":2298},{"krate":0,"index":2351},{"krate":0,"index":2354},{"krate":0,"index":2357},{"krate":0,"index":2360},{"krate":0,"index":2363},{"krate":0,"index":91},{"krate":0,"index":2560},{"krate":0,"index":2571},{"krate":0,"index":2569},{"krate":0,"index":2565},{"krate":0,"index":2566},{"krate":0,"index":2562},{"krate":0,"index":2563},{"krate":0,"index":2417},{"krate":0,"index":2470},{"krate":0,"index":2473},{"krate":0,"index":2476},{"krate":0,"index":2479},{"krate":0,"index":2482},{"krate":0,"index":2485},{"krate":0,"index":2488},{"krate":0,"index":2491},{"krate":0,"index":2494},{"krate":0,"index":2497},{"krate":0,"index":2500},{"krate":0,"index":2503},{"krate":0,"index":2506},{"krate":0,"index":2509},{"krate":0,"index":2512},{"krate":0,"index":2515},{"krate":0,"index":2518},{"krate":0,"index":2521},{"krate":0,"index":2524},{"krate":0,"index":2527},{"krate":0,"index":2530},{"krate":0,"index":2533},{"krate":0,"index":2536},{"krate":0,"index":2539},{"krate":0,"index":2542},{"krate":0,"index":2545},{"krate":0,"index":2548},{"krate":0,"index":2551},{"krate":0,"index":2554},{"krate":0,"index":2557},{"krate":0,"index":2653},{"krate":0,"index":2664},{"krate":0,"index":2662},{"krate":0,"index":2658},{"krate":0,"index":2659},{"krate":0,"index":2655},{"krate":0,"index":2656},{"krate":0,"index":2573},{"krate":0,"index":2626},{"krate":0,"index":2629},{"krate":0,"index":2632},{"krate":0,"index":2635},{"krate":0,"index":2638},{"krate":0,"index":2641},{"krate":0,"index":2644},{"krate":0,"index":2647},{"krate":0,"index":2650},{"krate":0,"index":2666},{"krate":0,"index":2669},{"krate":0,"index":2672},{"krate":0,"index":2743},{"krate":0,"index":2754},{"krate":0,"index":2752},{"krate":0,"index":2748},{"krate":0,"index":2749},{"krate":0,"index":2745},{"krate":0,"index":2746},{"krate":0,"index":2675},{"krate":0,"index":2728},{"krate":0,"index":2731},{"krate":0,"index":2734},{"krate":0,"index":2737},{"krate":0,"index":2740},{"krate":0,"index":2824},{"krate":0,"index":2835},{"krate":0,"index":2833},{"krate":0,"index":2829},{"krate":0,"index":2830},{"krate":0,"index":2826},{"krate":0,"index":2827},{"krate":0,"index":2756},{"krate":0,"index":2809},{"krate":0,"index":2812},{"krate":0,"index":2815},{"krate":0,"index":2818},{"krate":0,"index":2821},{"krate":0,"index":2905},{"krate":0,"index":2916},{"krate":0,"index":2914},{"krate":0,"index":2910},{"krate":0,"index":2911},{"krate":0,"index":2907},{"krate":0,"index":2908},{"krate":0,"index":2837},{"krate":0,"index":2890},{"krate":0,"index":2893},{"krate":0,"index":2896},{"krate":0,"index":2899},{"krate":0,"index":2902},{"krate":0,"index":2992},{"krate":0,"index":3003},{"krate":0,"index":3001},{"krate":0,"index":2997},{"krate":0,"index":2998},{"krate":0,"index":2994},{"krate":0,"index":2995},{"krate":0,"index":2918},{"krate":0,"index":2971},{"krate":0,"index":2974},{"krate":0,"index":2977},{"krate":0,"index":2980},{"krate":0,"index":2983},{"krate":0,"index":2986},{"krate":0,"index":2989},{"krate":0,"index":3076},{"krate":0,"index":3087},{"krate":0,"index":3085},{"krate":0,"index":3081},{"krate":0,"index":3082},{"krate":0,"index":3078},{"krate":0,"index":3079},{"krate":0,"index":3005},{"krate":0,"index":3058},{"krate":0,"index":3061},{"krate":0,"index":3064},{"krate":0,"index":3067},{"krate":0,"index":3070},{"krate":0,"index":3073},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":3902},{"krate":0,"index":3911},{"krate":0,"index":3907},{"krate":0,"index":3908},{"krate":0,"index":3904},{"krate":0,"index":3905},{"krate":0,"index":3662},{"krate":0,"index":3716},{"krate":0,"index":3719},{"krate":0,"index":3722},{"krate":0,"index":3725},{"krate":0,"index":3728},{"krate":0,"index":3731},{"krate":0,"index":3734},{"krate":0,"index":3737},{"krate":0,"index":3740},{"krate":0,"index":3743},{"krate":0,"index":3746},{"krate":0,"index":3749},{"krate":0,"index":3752},{"krate":0,"index":3755},{"krate":0,"index":3758},{"krate":0,"index":3761},{"krate":0,"index":3764},{"krate":0,"index":3767},{"krate":0,"index":3770},{"krate":0,"index":3773},{"krate":0,"index":3776},{"krate":0,"index":3779},{"krate":0,"index":3782},{"krate":0,"index":3785},{"krate":0,"index":3788},{"krate":0,"index":3791},{"krate":0,"index":3794},{"krate":0,"index":3797},{"krate":0,"index":3800},{"krate":0,"index":3803},{"krate":0,"index":3806},{"krate":0,"index":3809},{"krate":0,"index":3812},{"krate":0,"index":3815},{"krate":0,"index":3818},{"krate":0,"index":3821},{"krate":0,"index":3824},{"krate":0,"index":3827},{"krate":0,"index":3830},{"krate":0,"index":3833},{"krate":0,"index":3836},{"krate":0,"index":3839},{"krate":0,"index":3842},{"krate":0,"index":3845},{"krate":0,"index":3848},{"krate":0,"index":3851},{"krate":0,"index":3854},{"krate":0,"index":3857},{"krate":0,"index":3860},{"krate":0,"index":3863},{"krate":0,"index":3866},{"krate":0,"index":3869},{"krate":0,"index":3872},{"krate":0,"index":3875},{"krate":0,"index":3878},{"krate":0,"index":3881},{"krate":0,"index":3884},{"krate":0,"index":3887},{"krate":0,"index":3890},{"krate":0,"index":3893},{"krate":0,"index":3896},{"krate":0,"index":3899},{"krate":0,"index":97},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":4015},{"krate":0,"index":4019},{"krate":0,"index":4017},{"krate":0,"index":3913},{"krate":0,"index":3967},{"krate":0,"index":3970},{"krate":0,"index":3973},{"krate":0,"index":3976},{"krate":0,"index":3979},{"krate":0,"index":3982},{"krate":0,"index":3985},{"krate":0,"index":3988},{"krate":0,"index":3991},{"krate":0,"index":3994},{"krate":0,"index":3997},{"krate":0,"index":4000},{"krate":0,"index":4003},{"krate":0,"index":4006},{"krate":0,"index":4009},{"krate":0,"index":4012},{"krate":0,"index":130},{"krate":0,"index":4423},{"krate":0,"index":4427},{"krate":0,"index":4425},{"krate":0,"index":4337},{"krate":0,"index":4390},{"krate":0,"index":4393},{"krate":0,"index":4396},{"krate":0,"index":4399},{"krate":0,"index":4402},{"krate":0,"index":4405},{"krate":0,"index":4408},{"krate":0,"index":4411},{"krate":0,"index":4414},{"krate":0,"index":4417},{"krate":0,"index":4420},{"krate":0,"index":132},{"krate":0,"index":4693},{"krate":0,"index":4697},{"krate":0,"index":4695},{"krate":0,"index":4589},{"krate":0,"index":4642},{"krate":0,"index":4645},{"krate":0,"index":4648},{"krate":0,"index":4651},{"krate":0,"index":4654},{"krate":0,"index":4657},{"krate":0,"index":4660},{"krate":0,"index":4663},{"krate":0,"index":4666},{"krate":0,"index":4669},{"krate":0,"index":4672},{"krate":0,"index":4675},{"krate":0,"index":4678},{"krate":0,"index":4681},{"krate":0,"index":4684},{"krate":0,"index":4687},{"krate":0,"index":4690},{"krate":0,"index":4499},{"krate":0,"index":4506},{"krate":0,"index":4803},{"krate":0,"index":4807},{"krate":0,"index":4805},{"krate":0,"index":4699},{"krate":0,"index":4752},{"krate":0,"index":4755},{"krate":0,"index":4758},{"krate":0,"index":4761},{"krate":0,"index":4764},{"krate":0,"index":4767},{"krate":0,"index":4770},{"krate":0,"index":4773},{"krate":0,"index":4776},{"krate":0,"index":4779},{"krate":0,"index":4782},{"krate":0,"index":4785},{"krate":0,"index":4788},{"krate":0,"index":4791},{"krate":0,"index":4794},{"krate":0,"index":4797},{"krate":0,"index":4800},{"krate":0,"index":4509},{"krate":0,"index":4516},{"krate":0,"index":4913},{"krate":0,"index":4917},{"krate":0,"index":4915},{"krate":0,"index":4809},{"krate":0,"index":4862},{"krate":0,"index":4865},{"krate":0,"index":4868},{"krate":0,"index":4871},{"krate":0,"index":4874},{"krate":0,"index":4877},{"krate":0,"index":4880},{"krate":0,"index":4883},{"krate":0,"index":4886},{"krate":0,"index":4889},{"krate":0,"index":4892},{"krate":0,"index":4895},{"krate":0,"index":4898},{"krate":0,"index":4901},{"krate":0,"index":4904},{"krate":0,"index":4907},{"krate":0,"index":4910},{"krate":0,"index":4519},{"krate":0,"index":4526},{"krate":0,"index":5023},{"krate":0,"index":5027},{"krate":0,"index":5025},{"krate":0,"index":4919},{"krate":0,"index":4972},{"krate":0,"index":4975},{"krate":0,"index":4978},{"krate":0,"index":4981},{"krate":0,"index":4984},{"krate":0,"index":4987},{"krate":0,"index":4990},{"krate":0,"index":4993},{"krate":0,"index":4996},{"krate":0,"index":4999},{"krate":0,"index":5002},{"krate":0,"index":5005},{"krate":0,"index":5008},{"krate":0,"index":5011},{"krate":0,"index":5014},{"krate":0,"index":5017},{"krate":0,"index":5020},{"krate":0,"index":4529},{"krate":0,"index":4536},{"krate":0,"index":5133},{"krate":0,"index":5137},{"krate":0,"index":5135},{"krate":0,"index":5029},{"krate":0,"index":5082},{"krate":0,"index":5085},{"krate":0,"index":5088},{"krate":0,"index":5091},{"krate":0,"index":5094},{"krate":0,"index":5097},{"krate":0,"index":5100},{"krate":0,"index":5103},{"krate":0,"index":5106},{"krate":0,"index":5109},{"krate":0,"index":5112},{"krate":0,"index":5115},{"krate":0,"index":5118},{"krate":0,"index":5121},{"krate":0,"index":5124},{"krate":0,"index":5127},{"krate":0,"index":5130},{"krate":0,"index":4539},{"krate":0,"index":4546},{"krate":0,"index":5243},{"krate":0,"index":5247},{"krate":0,"index":5245},{"krate":0,"index":5139},{"krate":0,"index":5192},{"krate":0,"index":5195},{"krate":0,"index":5198},{"krate":0,"index":5201},{"krate":0,"index":5204},{"krate":0,"index":5207},{"krate":0,"index":5210},{"krate":0,"index":5213},{"krate":0,"index":5216},{"krate":0,"index":5219},{"krate":0,"index":5222},{"krate":0,"index":5225},{"krate":0,"index":5228},{"krate":0,"index":5231},{"krate":0,"index":5234},{"krate":0,"index":5237},{"krate":0,"index":5240},{"krate":0,"index":4549},{"krate":0,"index":4556},{"krate":0,"index":5353},{"krate":0,"index":5357},{"krate":0,"index":5355},{"krate":0,"index":5249},{"krate":0,"index":5302},{"krate":0,"index":5305},{"krate":0,"index":5308},{"krate":0,"index":5311},{"krate":0,"index":5314},{"krate":0,"index":5317},{"krate":0,"index":5320},{"krate":0,"index":5323},{"krate":0,"index":5326},{"krate":0,"index":5329},{"krate":0,"index":5332},{"krate":0,"index":5335},{"krate":0,"index":5338},{"krate":0,"index":5341},{"krate":0,"index":5344},{"krate":0,"index":5347},{"krate":0,"index":5350},{"krate":0,"index":4559},{"krate":0,"index":4566},{"krate":0,"index":5463},{"krate":0,"index":5467},{"krate":0,"index":5465},{"krate":0,"index":5359},{"krate":0,"index":5412},{"krate":0,"index":5415},{"krate":0,"index":5418},{"krate":0,"index":5421},{"krate":0,"index":5424},{"krate":0,"index":5427},{"krate":0,"index":5430},{"krate":0,"index":5433},{"krate":0,"index":5436},{"krate":0,"index":5439},{"krate":0,"index":5442},{"krate":0,"index":5445},{"krate":0,"index":5448},{"krate":0,"index":5451},{"krate":0,"index":5454},{"krate":0,"index":5457},{"krate":0,"index":5460},{"krate":0,"index":4569},{"krate":0,"index":4576},{"krate":0,"index":5573},{"krate":0,"index":5577},{"krate":0,"index":5575},{"krate":0,"index":5469},{"krate":0,"index":5522},{"krate":0,"index":5525},{"krate":0,"index":5528},{"krate":0,"index":5531},{"krate":0,"index":5534},{"krate":0,"index":5537},{"krate":0,"index":5540},{"krate":0,"index":5543},{"krate":0,"index":5546},{"krate":0,"index":5549},{"krate":0,"index":5552},{"krate":0,"index":5555},{"krate":0,"index":5558},{"krate":0,"index":5561},{"krate":0,"index":5564},{"krate":0,"index":5567},{"krate":0,"index":5570},{"krate":0,"index":4579},{"krate":0,"index":4586}],"decl_id":null,"docs":" Bindings to JavaScript's standard, built-in objects, including their methods\n and properties.","sig":null,"attributes":[{"value":"/ Bindings to JavaScript's standard, built-in objects, including their methods","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":0,"byte_end":80,"line_start":1,"line_end":1,"column_start":1,"column_end":81}},{"value":"/ and properties.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":81,"byte_end":100,"line_start":2,"line_end":2,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":101,"byte_end":104,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ This does *not* include any Web, Node, or any other JS environment","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":105,"byte_end":175,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/ APIs. Only the things that are guaranteed to exist in the global scope by","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":176,"byte_end":253,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ the ECMAScript standard.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":254,"byte_end":282,"line_start":6,"line_end":6,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":283,"byte_end":286,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":287,"byte_end":371,"line_start":8,"line_end":8,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":372,"byte_end":375,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ## A Note About `camelCase`, `snake_case`, and Naming Conventions","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":376,"byte_end":445,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":446,"byte_end":449,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ JavaScript's global objects use `camelCase` naming conventions for functions","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":450,"byte_end":530,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ and methods, but Rust style is to use `snake_case`. These bindings expose","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":531,"byte_end":608,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ the Rust style `snake_case` name. Additionally, acronyms within a method","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":609,"byte_end":685,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ name are all lower case, where as in JavaScript they are all upper case. For","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":686,"byte_end":766,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"/ example, `decodeURI` in JavaScript is exposed as `decode_uri` in these","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":767,"byte_end":841,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/ bindings.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":842,"byte_end":855,"line_start":17,"line_end":17,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":2167,"byte_end":2177,"line_start":55,"line_end":55,"column_start":12,"column_end":22},"name":"decode_uri","qualname":"::decode_uri","value":"pub fn decode_uri(&str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `decodeURI()` function decodes a Uniform Resource Identifier (URI)\n previously created by `encodeURI` or by a similar routine.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":2603,"byte_end":2623,"line_start":62,"line_end":62,"column_start":12,"column_end":32},"name":"decode_uri_component","qualname":"::decode_uri_component","value":"pub fn decode_uri_component(&str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `decodeURIComponent()` function decodes a Uniform Resource Identifier (URI) component\n previously created by `encodeURIComponent` or by a similar routine.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":3196,"byte_end":3206,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"encode_uri","qualname":"::encode_uri","value":"pub fn encode_uri(&str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `encodeURI()` function encodes a Uniform Resource Identifier (URI)\n by replacing each instance of certain characters by one, two, three, or\n four escape sequences representing the UTF-8 encoding of the character\n (will only be four escape sequences for characters composed of two\n \"surrogate\" characters).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":3791,"byte_end":3811,"line_start":81,"line_end":81,"column_start":12,"column_end":32},"name":"encode_uri_component","qualname":"::encode_uri_component","value":"pub fn encode_uri_component(&str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `encodeURIComponent()` function encodes a Uniform Resource Identifier (URI) component\n by replacing each instance of certain characters by one, two, three, or four escape sequences\n representing the UTF-8 encoding of the character\n (will only be four escape sequences for characters composed of two \"surrogate\" characters).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":4083,"byte_end":4087,"line_start":87,"line_end":87,"column_start":12,"column_end":16},"name":"eval","qualname":"::eval","value":"pub fn eval(&str) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `eval()` function evaluates JavaScript code represented as a string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":4480,"byte_end":4489,"line_start":94,"line_end":94,"column_start":12,"column_end":21},"name":"is_finite","qualname":"::is_finite","value":"pub fn is_finite(&JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The global `isFinite()` function determines whether the passed value is a finite number.\n If needed, the parameter is first converted to a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":4869,"byte_end":4878,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"parse_int","qualname":"::parse_int","value":"pub fn parse_int(&str, u8) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `parseInt()` function parses a string argument and returns an integer\n of the specified radix (the base in mathematical numeral systems), or NaN on error.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":5210,"byte_end":5221,"line_start":108,"line_end":108,"column_start":12,"column_end":23},"name":"parse_float","qualname":"::parse_float","value":"pub fn parse_float(&str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `parseFloat()` function parses an argument and returns a floating point number,\n or NaN on error.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":5542,"byte_end":5548,"line_start":115,"line_end":115,"column_start":12,"column_end":18},"name":"escape","qualname":"::escape","value":"pub fn escape(&str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `escape()` function computes a new string in which certain characters have been\n replaced by a hexadecimal escape sequence.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6051,"byte_end":6059,"line_start":124,"line_end":124,"column_start":12,"column_end":20},"name":"unescape","qualname":"::unescape","value":"pub fn unescape(&str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `unescape()` function computes a new string in which hexadecimal escape\n sequences are replaced with the character that it represents. The escape sequences might\n be introduced by a function like `escape`. Usually, `decodeURI` or `decodeURIComponent`\n are preferred over `unescape`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6284,"byte_end":6289,"line_start":132,"line_end":132,"column_start":14,"column_end":19},"name":"Array","qualname":"::Array","value":"Array {  }","parent":null,"children":[{"krate":0,"index":343}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6371,"byte_end":6374,"line_start":136,"line_end":136,"column_start":12,"column_end":15},"name":"new","qualname":"<Array>::new","value":"pub fn new() -> Array","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6529,"byte_end":6544,"line_start":140,"line_end":140,"column_start":12,"column_end":27},"name":"new_with_length","qualname":"<Array>::new_with_length","value":"pub fn new_with_length(u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" Creates a new array with the specified length (elements are initialized to `undefined`).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6729,"byte_end":6732,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"get","qualname":"<Array>::get","value":"pub fn get(&Self, u32) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the element at the index (returns `undefined` if the index is out of range).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6934,"byte_end":6937,"line_start":148,"line_end":148,"column_start":12,"column_end":15},"name":"set","qualname":"<Array>::set","value":"pub fn set(&Self, u32, JsValue)","parent":null,"children":[],"decl_id":null,"docs":" Sets the element at the index (auto-enlarges the array if the index is out of range).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":7290,"byte_end":7296,"line_start":156,"line_end":156,"column_start":12,"column_end":18},"name":"delete","qualname":"<Array>::delete","value":"pub fn delete(&Self, u32)","parent":null,"children":[],"decl_id":null,"docs":" Deletes the element at the index (does nothing if the index is out of range).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":7510,"byte_end":7514,"line_start":161,"line_end":161,"column_start":12,"column_end":16},"name":"from","qualname":"<Array>::from","value":"pub fn from(&JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Array.from()` method creates a new, shallow-copied `Array` instance\n from an array-like or iterable object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":7893,"byte_end":7904,"line_start":168,"line_end":168,"column_start":12,"column_end":23},"name":"copy_within","qualname":"<Array>::copy_within","value":"pub fn copy_within(&Self, i32, i32, i32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `copyWithin()` method shallow copies part of an array to another\n location in the same array and returns it, without modifying its size.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":8292,"byte_end":8298,"line_start":175,"line_end":175,"column_start":12,"column_end":18},"name":"concat","qualname":"<Array>::concat","value":"pub fn concat(&Self, &Array) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `concat()` method is used to merge two or more arrays. This method\n does not change the existing arrays, but instead returns a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":8637,"byte_end":8642,"line_start":182,"line_end":182,"column_start":12,"column_end":17},"name":"every","qualname":"<Array>::every","value":"pub fn every(&Self, &mut FnMut(JsValue, u32, Array) -> bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `every()` method tests whether all elements in the array pass the test\n implemented by the provided function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":9049,"byte_end":9053,"line_start":189,"line_end":189,"column_start":12,"column_end":16},"name":"fill","qualname":"<Array>::fill","value":"pub fn fill(&Self, &JsValue, u32, u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":9421,"byte_end":9427,"line_start":196,"line_end":196,"column_start":12,"column_end":18},"name":"filter","qualname":"<Array>::filter","value":"pub fn filter(&Self, &mut FnMut(JsValue, u32, Array) -> bool) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `filter()` method creates a new array with all elements that pass the\n test implemented by the provided function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":9847,"byte_end":9851,"line_start":203,"line_end":203,"column_start":12,"column_end":16},"name":"find","qualname":"<Array>::find","value":"pub fn find(&Self, &mut FnMut(JsValue, u32, Array) -> bool) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `find()` method returns the value of the first element in the array that satisfies\n  the provided testing function. Otherwise `undefined` is returned.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":10294,"byte_end":10304,"line_start":210,"line_end":210,"column_start":12,"column_end":22},"name":"find_index","qualname":"<Array>::find_index","value":"pub fn find_index(&Self, &mut FnMut(JsValue, u32, Array) -> bool) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `findIndex()` method returns the index of the first element in the array that\n satisfies the provided testing function. Otherwise -1 is returned.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":10696,"byte_end":10700,"line_start":217,"line_end":217,"column_start":12,"column_end":16},"name":"flat","qualname":"<Array>::flat","value":"pub fn flat(&Self, i32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `flat()` method creates a new array with all sub-array elements concatenated into it\n recursively up to the specified depth.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":11060,"byte_end":11068,"line_start":224,"line_end":224,"column_start":12,"column_end":20},"name":"flat_map","qualname":"<Array>::flat_map","value":"pub fn flat_map(&Self, &mut FnMut(JsValue, u32, Array) -> Vec<JsValue>)\n-> Array","parent":null,"children":[],"decl_id":null,"docs":" The `flatMap()` method first maps each element using a mapping function, then flattens\n the result into a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":11459,"byte_end":11467,"line_start":233,"line_end":233,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Array>::for_each","value":"pub fn for_each(&Self, &mut FnMut(JsValue, u32, Array) -> ())","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once for each array element.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":11839,"byte_end":11847,"line_start":240,"line_end":240,"column_start":12,"column_end":20},"name":"includes","qualname":"<Array>::includes","value":"pub fn includes(&Self, &JsValue, i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `includes()` method determines whether an array includes a certain\n element, returning true or false as appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":12239,"byte_end":12247,"line_start":247,"line_end":247,"column_start":12,"column_end":20},"name":"index_of","qualname":"<Array>::index_of","value":"pub fn index_of(&Self, &JsValue, i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `indexOf()` method returns the first index at which a given element\n can be found in the array, or -1 if it is not present.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":12599,"byte_end":12607,"line_start":253,"line_end":253,"column_start":12,"column_end":20},"name":"is_array","qualname":"<Array>::is_array","value":"pub fn is_array(&JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Array.isArray()` method determines whether the passed value is an Array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":12935,"byte_end":12939,"line_start":260,"line_end":260,"column_start":12,"column_end":16},"name":"join","qualname":"<Array>::join","value":"pub fn join(&Self, &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `join()` method joins all elements of an array (or an array-like object)\n into a string and returns this string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":13393,"byte_end":13406,"line_start":268,"line_end":268,"column_start":12,"column_end":25},"name":"last_index_of","qualname":"<Array>::last_index_of","value":"pub fn last_index_of(&Self, &JsValue, i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `lastIndexOf()` method returns the last index at which a given element\n can be found in the array, or -1 if it is not present. The array is\n searched backwards, starting at fromIndex.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":13921,"byte_end":13927,"line_start":277,"line_end":277,"column_start":12,"column_end":18},"name":"length","qualname":"<Array>::length","value":"pub fn length(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length property of an object which is an instance of type Array\n sets or returns the number of elements in that array. The value is an\n unsigned, 32-bit integer that is always numerically greater than the\n highest index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":14553,"byte_end":14556,"line_start":287,"line_end":287,"column_start":12,"column_end":15},"name":"map","qualname":"<Array>::map","value":"pub fn map(&Self, &mut FnMut(JsValue, u32, Array) -> JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" `map()` calls a provided callback function once for each element in an array,\n in order, and constructs a new array from the results. callback is invoked\n only for indexes of the array which have assigned values, including undefined.\n It is not called for missing elements of the array (that is, indexes that have\n never been set, which have been deleted or which have never been assigned a value).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":15505,"byte_end":15508,"line_start":305,"line_end":305,"column_start":12,"column_end":15},"name":"of1","qualname":"<Array>::of1","value":"pub fn of1(&JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Array.of()` method creates a new Array instance with a variable\n number of arguments, regardless of number or type of the arguments.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":15723,"byte_end":15726,"line_start":309,"line_end":309,"column_start":12,"column_end":15},"name":"of2","qualname":"<Array>::of2","value":"pub fn of2(&JsValue, &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":15954,"byte_end":15957,"line_start":313,"line_end":313,"column_start":12,"column_end":15},"name":"of3","qualname":"<Array>::of3","value":"pub fn of3(&JsValue, &JsValue, &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":16198,"byte_end":16201,"line_start":317,"line_end":317,"column_start":12,"column_end":15},"name":"of4","qualname":"<Array>::of4","value":"pub fn of4(&JsValue, &JsValue, &JsValue, &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":16455,"byte_end":16458,"line_start":321,"line_end":321,"column_start":12,"column_end":15},"name":"of5","qualname":"<Array>::of5","value":"pub fn of5(&JsValue, &JsValue, &JsValue, &JsValue, &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":16847,"byte_end":16850,"line_start":328,"line_end":328,"column_start":12,"column_end":15},"name":"pop","qualname":"<Array>::pop","value":"pub fn pop(&Self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `pop()` method removes the last element from an array and returns that\n element. This method changes the length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":17172,"byte_end":17176,"line_start":335,"line_end":335,"column_start":12,"column_end":16},"name":"push","qualname":"<Array>::push","value":"pub fn push(&Self, &JsValue) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `push()` method adds one or more elements to the end of an array and\n returns the new length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":17550,"byte_end":17556,"line_start":342,"line_end":342,"column_start":12,"column_end":18},"name":"reduce","qualname":"<Array>::reduce","value":"pub fn reduce(&Self, &mut FnMut(JsValue, JsValue, u32, Array) -> JsValue,\n              &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `reduce()` method applies a function against an accumulator and each element in\n the array (from left to right) to reduce it to a single value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":18072,"byte_end":18084,"line_start":353,"line_end":353,"column_start":12,"column_end":24},"name":"reduce_right","qualname":"<Array>::reduce_right","value":"pub fn reduce_right(&Self,\n                    &mut FnMut(JsValue, JsValue, u32, Array) -> JsValue,\n                    &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `reduceRight()` method applies a function against an accumulator and each value\n of the array (from right-to-left) to reduce it to a single value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":18562,"byte_end":18569,"line_start":364,"line_end":364,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Array>::reverse","value":"pub fn reverse(&Self) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `reverse()` method reverses an array in place. The first array\n element becomes the last, and the last array element becomes the first.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":18920,"byte_end":18925,"line_start":371,"line_end":371,"column_start":12,"column_end":17},"name":"shift","qualname":"<Array>::shift","value":"pub fn shift(&Self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `shift()` method removes the first element from an array and returns\n that removed element. This method changes the length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":19327,"byte_end":19332,"line_start":379,"line_end":379,"column_start":12,"column_end":17},"name":"slice","qualname":"<Array>::slice","value":"pub fn slice(&Self, u32, u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of an array into\n a new array object selected from begin to end (end not included).\n The original array will not be modified.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":19759,"byte_end":19763,"line_start":386,"line_end":386,"column_start":12,"column_end":16},"name":"some","qualname":"<Array>::some","value":"pub fn some(&Self, &mut FnMut(JsValue) -> bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `some()` method tests whether at least one element in the array passes the test implemented\n by the provided function.\n Note: This method returns false for any condition put on an empty array.\n [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":20332,"byte_end":20336,"line_start":397,"line_end":397,"column_start":12,"column_end":16},"name":"sort","qualname":"<Array>::sort","value":"pub fn sort(&Self) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `sort()` method sorts the elements of an array in place and returns\n the array. The sort is not necessarily stable. The default sort\n order is according to string Unicode code points.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":20661,"byte_end":20667,"line_start":404,"line_end":404,"column_start":12,"column_end":18},"name":"splice","qualname":"<Array>::splice","value":"pub fn splice(&Self, u32, u32, &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `splice()` method changes the contents of an array by removing existing elements and/or\n adding new elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":21215,"byte_end":21231,"line_start":412,"line_end":412,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Array>::to_locale_string","value":"pub fn to_locale_string(&Self, &JsValue, &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleString()` method returns a string representing the elements of the array.\n The elements are converted to Strings using their toLocaleString methods and these\n Strings are separated by a locale-specific String (such as a comma “,”).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":21598,"byte_end":21607,"line_start":419,"line_end":419,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Array>::to_string","value":"pub fn to_string(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the specified array\n and its elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":21942,"byte_end":21949,"line_start":426,"line_end":426,"column_start":12,"column_end":19},"name":"unshift","qualname":"<Array>::unshift","value":"pub fn unshift(&Self, &JsValue) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `unshift()` method adds one or more elements to the beginning of an\n array and returns the new length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":355},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":22066,"byte_end":22075,"line_start":431,"line_end":431,"column_start":12,"column_end":21},"name":"ArrayIter","qualname":"::ArrayIter","value":"ArrayIter {  }","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358}],"decl_id":null,"docs":" Iterator returned by `Array::iter`\n","sig":null,"attributes":[{"value":"/ Iterator returned by `Array::iter`","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":21992,"byte_end":22030,"line_start":429,"line_end":429,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":22854,"byte_end":22858,"line_start":463,"line_end":463,"column_start":12,"column_end":16},"name":"iter","qualname":"<Array>::iter","value":"pub fn iter(&Self) -> ArrayIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the values of the JS array.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the values of the JS array.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":22786,"byte_end":22842,"line_start":462,"line_end":462,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23041,"byte_end":23047,"line_start":471,"line_end":471,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<Array>::to_vec","value":"pub fn to_vec(&Self) -> Vec<JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Converts the JS array into a new Vec.\n","sig":null,"attributes":[{"value":"/ Converts the JS array into a new Vec.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":22988,"byte_end":23029,"line_start":470,"line_end":470,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23807,"byte_end":23818,"line_start":508,"line_end":508,"column_start":14,"column_end":25},"name":"ArrayBuffer","qualname":"::ArrayBuffer","value":"ArrayBuffer {  }","parent":null,"children":[{"krate":0,"index":440}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":24385,"byte_end":24388,"line_start":519,"line_end":519,"column_start":12,"column_end":15},"name":"new","qualname":"<ArrayBuffer>::new","value":"pub fn new(u32) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `ArrayBuffer` object is used to represent a generic,\n fixed-length raw binary data buffer. You cannot directly\n manipulate the contents of an `ArrayBuffer`; instead, you\n create one of the typed array objects or a `DataView` object\n which represents the buffer in a specific format, and use that\n to read and write the contents of the buffer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":25002,"byte_end":25013,"line_start":529,"line_end":529,"column_start":12,"column_end":23},"name":"byte_length","qualname":"<ArrayBuffer>::byte_length","value":"pub fn byte_length(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength property of an object which is an instance of type ArrayBuffer\n it's an accessor property whose set accessor function is undefined,\n meaning that you can only read this property.\n The value is established when the array is constructed and cannot be changed.\n This property returns 0 if this ArrayBuffer has been detached.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":25414,"byte_end":25421,"line_start":536,"line_end":536,"column_start":12,"column_end":19},"name":"is_view","qualname":"<ArrayBuffer>::is_view","value":"pub fn is_view(&JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `isView()` method returns true if arg is one of the `ArrayBuffer`\n views, such as typed array objects or a DataView; false otherwise.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":25798,"byte_end":25803,"line_start":544,"line_end":544,"column_start":12,"column_end":17},"name":"slice","qualname":"<ArrayBuffer>::slice","value":"pub fn slice(&Self, u32) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a new `ArrayBuffer` whose contents\n are a copy of this `ArrayBuffer`'s bytes from begin, inclusive,\n up to end, exclusive.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":26097,"byte_end":26111,"line_start":550,"line_end":550,"column_start":12,"column_end":26},"name":"slice_with_end","qualname":"<ArrayBuffer>::slice_with_end","value":"pub fn slice_with_end(&Self, u32, u32) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" Like `slice()` but with the `end` argument.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":26341,"byte_end":26358,"line_start":558,"line_end":558,"column_start":14,"column_end":31},"name":"SharedArrayBuffer","qualname":"::SharedArrayBuffer","value":"SharedArrayBuffer {  }","parent":null,"children":[{"krate":0,"index":524}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":26858,"byte_end":26861,"line_start":568,"line_end":568,"column_start":12,"column_end":15},"name":"new","qualname":"<SharedArrayBuffer>::new","value":"pub fn new(u32) -> SharedArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `SharedArrayBuffer` object is used to represent a generic,\n fixed-length raw binary data buffer, similar to the `ArrayBuffer`\n object, but in a way that they can be used to create views\n on shared memory. Unlike an `ArrayBuffer`, a `SharedArrayBuffer`\n cannot become detached.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":27316,"byte_end":27327,"line_start":576,"line_end":576,"column_start":12,"column_end":23},"name":"byte_length","qualname":"<SharedArrayBuffer>::byte_length","value":"pub fn byte_length(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length of\n an `SharedArrayBuffer` in bytes. This is established when\n the `SharedArrayBuffer` is constructed and cannot be changed.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":27730,"byte_end":27735,"line_start":584,"line_end":584,"column_start":12,"column_end":17},"name":"slice","qualname":"<SharedArrayBuffer>::slice","value":"pub fn slice(&Self, u32) -> SharedArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a new `SharedArrayBuffer` whose contents\n are a copy of this `SharedArrayBuffer`'s bytes from begin, inclusive,\n up to end, exclusive.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":28047,"byte_end":28061,"line_start":590,"line_end":590,"column_start":12,"column_end":26},"name":"slice_with_end","qualname":"<SharedArrayBuffer>::slice_with_end","value":"pub fn slice_with_end(&Self, u32, u32) -> SharedArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" Like `slice()` but with the `end` argument.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":28474,"byte_end":28478,"line_start":601,"line_end":601,"column_start":12,"column_end":16},"name":"keys","qualname":"<Array>::keys","value":"pub fn keys(&Self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `keys()` method returns a new Array Iterator object that contains the\n keys for each index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":28153,"byte_end":28168,"line_start":594,"line_end":594,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":28153,"byte_end":28168,"line_start":594,"line_end":594,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":28816,"byte_end":28823,"line_start":608,"line_end":608,"column_start":12,"column_end":19},"name":"entries","qualname":"<Array>::entries","value":"pub fn entries(&Self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `entries()` method returns a new Array Iterator object that contains\n the key/value pairs for each index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":28153,"byte_end":28168,"line_start":594,"line_end":594,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":28153,"byte_end":28168,"line_start":594,"line_end":594,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29150,"byte_end":29156,"line_start":615,"line_end":615,"column_start":12,"column_end":18},"name":"values","qualname":"<Array>::values","value":"pub fn values(&Self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `values()` method returns a new Array Iterator object that\n contains the values for each index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":28153,"byte_end":28168,"line_start":594,"line_end":594,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":28153,"byte_end":28168,"line_start":594,"line_end":594,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29793,"byte_end":29800,"line_start":628,"line_end":628,"column_start":9,"column_end":16},"name":"Atomics","qualname":"::Atomics","value":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":538},{"krate":0,"index":540},{"krate":0,"index":542},{"krate":0,"index":544},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":564}],"decl_id":null,"docs":" The `Atomics` object provides atomic operations as static methods.\n They are used with `SharedArrayBuffer` objects.","sig":null,"attributes":[{"value":"/ The `Atomics` object provides atomic operations as static methods.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29187,"byte_end":29257,"line_start":618,"line_end":618,"column_start":1,"column_end":71}},{"value":"/ They are used with `SharedArrayBuffer` objects.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29258,"byte_end":29309,"line_start":619,"line_end":619,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29310,"byte_end":29313,"line_start":620,"line_end":620,"column_start":1,"column_end":4}},{"value":"/ The Atomic operations are installed on an `Atomics` module. Unlike","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29314,"byte_end":29384,"line_start":621,"line_end":621,"column_start":1,"column_end":71}},{"value":"/ the other global objects, `Atomics` is not a constructor. You cannot","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29385,"byte_end":29457,"line_start":622,"line_end":622,"column_start":1,"column_end":73}},{"value":"/ use it with a new operator or invoke the `Atomics` object as a","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29458,"byte_end":29524,"line_start":623,"line_end":623,"column_start":1,"column_end":67}},{"value":"/ function. All properties and methods of `Atomics` are static","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29525,"byte_end":29589,"line_start":624,"line_end":624,"column_start":1,"column_end":65}},{"value":"/ (as is the case with the Math object, for example).","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29590,"byte_end":29645,"line_start":625,"line_end":625,"column_start":1,"column_end":56}},{"value":"/ [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29646,"byte_end":29759,"line_start":626,"line_end":626,"column_start":1,"column_end":114}},{"value":"allow(non_snake_case)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29760,"byte_end":29784,"line_start":627,"line_end":627,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":30348,"byte_end":30351,"line_start":640,"line_end":640,"column_start":16,"column_end":19},"name":"add","qualname":"::Atomics::add","value":"pub fn add(&JsValue, u32, i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.add()` method adds a given value at a given\n position in the array and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":30950,"byte_end":30953,"line_start":650,"line_end":650,"column_start":16,"column_end":19},"name":"and","qualname":"::Atomics::and","value":"pub fn and(&JsValue, u32, i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.and()` method computes a bitwise AND with a given\n value at a given position in the array, and returns the old value\n at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":31706,"byte_end":31722,"line_start":661,"line_end":661,"column_start":16,"column_end":32},"name":"compare_exchange","qualname":"::Atomics::compare_exchange","value":"pub fn compare_exchange(&JsValue, u32, i32, i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.compareExchange()` method exchanges a given\n replacement value at a given position in the array, if a given expected\n value equals the old value. It returns the old value at that position\n whether it was equal to the expected value or not.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":32389,"byte_end":32397,"line_start":675,"line_end":675,"column_start":16,"column_end":24},"name":"exchange","qualname":"::Atomics::exchange","value":"pub fn exchange(&JsValue, u32, i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.exchange()` method stores a given value at a given\n position in the array and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":32963,"byte_end":32975,"line_start":684,"line_end":684,"column_start":16,"column_end":28},"name":"is_lock_free","qualname":"::Atomics::is_lock_free","value":"pub fn is_lock_free(u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.isLockFree()` method is used to determine\n whether to use locks or atomic operations. It returns true,\n if the given size is one of the `BYTES_PER_ELEMENT` property\n of integer `TypedArray` types.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":33315,"byte_end":33319,"line_start":691,"line_end":691,"column_start":16,"column_end":20},"name":"load","qualname":"::Atomics::load","value":"pub fn load(&JsValue, u32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.load()` method returns a value at a given\n position in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":33864,"byte_end":33870,"line_start":700,"line_end":700,"column_start":16,"column_end":22},"name":"notify","qualname":"::Atomics::notify","value":"pub fn notify(&Int32Array, u32) -> Result<u32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.notify()` method notifies up some agents that\n are sleeping in the wait queue.\n Note: This operation works with a shared `Int32Array` only.\n If `count` is not provided, notifies all the agents in the queue.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":34084,"byte_end":34101,"line_start":704,"line_end":704,"column_start":16,"column_end":33},"name":"notify_with_count","qualname":"::Atomics::notify_with_count","value":"pub fn notify_with_count(&Int32Array, u32, u32) -> Result<u32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Notifies up to `count` agents in the wait queue.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":34735,"byte_end":34737,"line_start":717,"line_end":717,"column_start":16,"column_end":18},"name":"or","qualname":"::Atomics::or","value":"pub fn or(&JsValue, u32, i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.or()` method computes a bitwise OR with a given value\n at a given position in the array, and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":35161,"byte_end":35166,"line_start":724,"line_end":724,"column_start":16,"column_end":21},"name":"store","qualname":"::Atomics::store","value":"pub fn store(&JsValue, u32, i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.store()` method stores a given value at the given\n position in the array and returns that value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":35735,"byte_end":35738,"line_start":733,"line_end":733,"column_start":16,"column_end":19},"name":"sub","qualname":"::Atomics::sub","value":"pub fn sub(&JsValue, u32, i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.sub()` method substracts a given value at a\n given position in the array and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":36430,"byte_end":36434,"line_start":744,"line_end":744,"column_start":16,"column_end":20},"name":"wait","qualname":"::Atomics::wait","value":"pub fn wait(&Int32Array, u32, i32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.wait()` method verifies that a given\n position in an `Int32Array` still contains a given value\n and if so sleeps, awaiting a wakeup or a timeout.\n It returns a string which is either \"ok\", \"not-equal\", or \"timed-out\".\n Note: This operation only works with a shared `Int32Array`\n and may not be allowed on the main thread.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":36785,"byte_end":36802,"line_start":750,"line_end":750,"column_start":16,"column_end":33},"name":"wait_with_timeout","qualname":"::Atomics::wait_with_timeout","value":"pub fn wait_with_timeout(&Int32Array, u32, i32, f64)\n-> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Like `wait()`, but with timeout","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":564},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":37482,"byte_end":37485,"line_start":765,"line_end":765,"column_start":16,"column_end":19},"name":"xor","qualname":"::Atomics::xor","value":"pub fn xor(&JsValue, u32, i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.xor()` method computes a bitwise XOR\n with a given value at a given position in the array,\n and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":37763,"byte_end":37770,"line_start":774,"line_end":774,"column_start":14,"column_end":21},"name":"Boolean","qualname":"::Boolean","value":"Boolean {  }","parent":null,"children":[{"krate":0,"index":634}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":37578,"byte_end":37593,"line_start":770,"line_end":770,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":37578,"byte_end":37593,"line_start":770,"line_end":770,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":37578,"byte_end":37593,"line_start":770,"line_end":770,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38122,"byte_end":38125,"line_start":782,"line_end":782,"column_start":12,"column_end":15},"name":"new","qualname":"<Boolean>::new","value":"pub fn new(&JsValue) -> Boolean","parent":null,"children":[],"decl_id":null,"docs":" The `Boolean()` constructor creates an object wrapper for a boolean value.","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `Boolean::from` instead\")","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38019,"byte_end":38085,"line_start":780,"line_end":780,"column_start":5,"column_end":71}},{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38090,"byte_end":38110,"line_start":781,"line_end":781,"column_start":5,"column_end":25}},{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":37578,"byte_end":37593,"line_start":770,"line_end":770,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":37578,"byte_end":37593,"line_start":770,"line_end":770,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38430,"byte_end":38438,"line_start":788,"line_end":788,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Boolean>::value_of","value":"pub fn value_of(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of a `Boolean` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":37578,"byte_end":37593,"line_start":770,"line_end":770,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":37578,"byte_end":37593,"line_start":770,"line_end":770,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":799},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":39142,"byte_end":39150,"line_start":823,"line_end":823,"column_start":14,"column_end":22},"name":"DataView","qualname":"::DataView","value":"DataView {  }","parent":null,"children":[{"krate":0,"index":800}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":39508,"byte_end":39511,"line_start":831,"line_end":831,"column_start":12,"column_end":15},"name":"new","qualname":"<DataView>::new","value":"pub fn new(&ArrayBuffer, usize, usize) -> DataView","parent":null,"children":[],"decl_id":null,"docs":" The `DataView` view provides a low-level interface for reading and\n writing multiple number types in an `ArrayBuffer` irrespective of the\n platform's endianness.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":39875,"byte_end":39881,"line_start":837,"line_end":837,"column_start":12,"column_end":18},"name":"buffer","qualname":"<DataView>::buffer","value":"pub fn buffer(&Self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The ArrayBuffer referenced by this view. Fixed at construction time and thus read only.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":40268,"byte_end":40279,"line_start":844,"line_end":844,"column_start":12,"column_end":23},"name":"byte_length","qualname":"<DataView>::byte_length","value":"pub fn byte_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The length (in bytes) of this view from the start of its ArrayBuffer.\n Fixed at construction time and thus read only.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":40660,"byte_end":40671,"line_start":851,"line_end":851,"column_start":12,"column_end":23},"name":"byte_offset","qualname":"<DataView>::byte_offset","value":"pub fn byte_offset(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The offset (in bytes) of this view from the start of its ArrayBuffer.\n Fixed at construction time and thus read only.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":41028,"byte_end":41036,"line_start":858,"line_end":858,"column_start":12,"column_end":20},"name":"get_int8","qualname":"<DataView>::get_int8","value":"pub fn get_int8(&Self, usize) -> i8","parent":null,"children":[],"decl_id":null,"docs":" The `getInt8()` method gets a signed 8-bit integer (byte) at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":41415,"byte_end":41424,"line_start":865,"line_end":865,"column_start":12,"column_end":21},"name":"get_uint8","qualname":"<DataView>::get_uint8","value":"pub fn get_uint8(&Self, usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The `getUint8()` method gets a unsigned 8-bit integer (byte) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":41803,"byte_end":41812,"line_start":872,"line_end":872,"column_start":12,"column_end":21},"name":"get_int16","qualname":"<DataView>::get_int16","value":"pub fn get_int16(&Self, usize) -> i16","parent":null,"children":[],"decl_id":null,"docs":" The `getInt16()` method gets a signed 16-bit integer (short) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":42192,"byte_end":42208,"line_start":879,"line_end":879,"column_start":12,"column_end":28},"name":"get_int16_endian","qualname":"<DataView>::get_int16_endian","value":"pub fn get_int16_endian(&Self, usize, bool) -> i16","parent":null,"children":[],"decl_id":null,"docs":" The `getInt16()` method gets a signed 16-bit integer (short) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":42620,"byte_end":42630,"line_start":886,"line_end":886,"column_start":12,"column_end":22},"name":"get_uint16","qualname":"<DataView>::get_uint16","value":"pub fn get_uint16(&Self, usize) -> u16","parent":null,"children":[],"decl_id":null,"docs":" The `getUint16()` method gets an unsigned 16-bit integer (unsigned short) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":43021,"byte_end":43038,"line_start":893,"line_end":893,"column_start":12,"column_end":29},"name":"get_uint16_endian","qualname":"<DataView>::get_uint16_endian","value":"pub fn get_uint16_endian(&Self, usize, bool) -> u16","parent":null,"children":[],"decl_id":null,"docs":" The `getUint16()` method gets an unsigned 16-bit integer (unsigned short) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":43438,"byte_end":43447,"line_start":900,"line_end":900,"column_start":12,"column_end":21},"name":"get_int32","qualname":"<DataView>::get_int32","value":"pub fn get_int32(&Self, usize) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `getInt32()` method gets a signed 32-bit integer (long) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":43826,"byte_end":43842,"line_start":907,"line_end":907,"column_start":12,"column_end":28},"name":"get_int32_endian","qualname":"<DataView>::get_int32_endian","value":"pub fn get_int32_endian(&Self, usize, bool) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `getInt32()` method gets a signed 32-bit integer (long) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":44253,"byte_end":44263,"line_start":914,"line_end":914,"column_start":12,"column_end":22},"name":"get_uint32","qualname":"<DataView>::get_uint32","value":"pub fn get_uint32(&Self, usize) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUint32()` method gets an unsigned 32-bit integer (unsigned long) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":44653,"byte_end":44670,"line_start":921,"line_end":921,"column_start":12,"column_end":29},"name":"get_uint32_endian","qualname":"<DataView>::get_uint32_endian","value":"pub fn get_uint32_endian(&Self, usize, bool) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUint32()` method gets an unsigned 32-bit integer (unsigned long) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":45075,"byte_end":45086,"line_start":928,"line_end":928,"column_start":12,"column_end":23},"name":"get_float32","qualname":"<DataView>::get_float32","value":"pub fn get_float32(&Self, usize) -> f32","parent":null,"children":[],"decl_id":null,"docs":" The `getFloat32()` method gets a signed 32-bit float (float) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":45470,"byte_end":45488,"line_start":935,"line_end":935,"column_start":12,"column_end":30},"name":"get_float32_endian","qualname":"<DataView>::get_float32_endian","value":"pub fn get_float32_endian(&Self, usize, bool) -> f32","parent":null,"children":[],"decl_id":null,"docs":" The `getFloat32()` method gets a signed 32-bit float (float) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":45894,"byte_end":45905,"line_start":942,"line_end":942,"column_start":12,"column_end":23},"name":"get_float64","qualname":"<DataView>::get_float64","value":"pub fn get_float64(&Self, usize) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `getFloat64()` method gets a signed 64-bit float (double) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":46290,"byte_end":46308,"line_start":949,"line_end":949,"column_start":12,"column_end":30},"name":"get_float64_endian","qualname":"<DataView>::get_float64_endian","value":"pub fn get_float64_endian(&Self, usize, bool) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `getFloat64()` method gets a signed 64-bit float (double) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":46712,"byte_end":46720,"line_start":956,"line_end":956,"column_start":12,"column_end":20},"name":"set_int8","qualname":"<DataView>::set_int8","value":"pub fn set_int8(&Self, usize, i8)","parent":null,"children":[],"decl_id":null,"docs":" The `setInt8()` method stores a signed 8-bit integer (byte) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":47113,"byte_end":47122,"line_start":963,"line_end":963,"column_start":12,"column_end":21},"name":"set_uint8","qualname":"<DataView>::set_uint8","value":"pub fn set_uint8(&Self, usize, u8)","parent":null,"children":[],"decl_id":null,"docs":" The `setUint8()` method stores an unsigned 8-bit integer (byte) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":47514,"byte_end":47523,"line_start":970,"line_end":970,"column_start":12,"column_end":21},"name":"set_int16","qualname":"<DataView>::set_int16","value":"pub fn set_int16(&Self, usize, i16)","parent":null,"children":[],"decl_id":null,"docs":" The `setInt16()` method stores a signed 16-bit integer (short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":47916,"byte_end":47932,"line_start":977,"line_end":977,"column_start":12,"column_end":28},"name":"set_int16_endian","qualname":"<DataView>::set_int16_endian","value":"pub fn set_int16_endian(&Self, usize, i16, bool)","parent":null,"children":[],"decl_id":null,"docs":" The `setInt16()` method stores a signed 16-bit integer (short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":48361,"byte_end":48371,"line_start":984,"line_end":984,"column_start":12,"column_end":22},"name":"set_uint16","qualname":"<DataView>::set_uint16","value":"pub fn set_uint16(&Self, usize, u16)","parent":null,"children":[],"decl_id":null,"docs":" The `setUint16()` method stores an unsigned 16-bit integer (unsigned short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":48779,"byte_end":48796,"line_start":991,"line_end":991,"column_start":12,"column_end":29},"name":"set_uint16_endian","qualname":"<DataView>::set_uint16_endian","value":"pub fn set_uint16_endian(&Self, usize, u16, bool)","parent":null,"children":[],"decl_id":null,"docs":" The `setUint16()` method stores an unsigned 16-bit integer (unsigned short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":49209,"byte_end":49218,"line_start":998,"line_end":998,"column_start":12,"column_end":21},"name":"set_int32","qualname":"<DataView>::set_int32","value":"pub fn set_int32(&Self, usize, i32)","parent":null,"children":[],"decl_id":null,"docs":" The `setInt32()` method stores a signed 32-bit integer (long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":49610,"byte_end":49626,"line_start":1005,"line_end":1005,"column_start":12,"column_end":28},"name":"set_int32_endian","qualname":"<DataView>::set_int32_endian","value":"pub fn set_int32_endian(&Self, usize, i32, bool)","parent":null,"children":[],"decl_id":null,"docs":" The `setInt32()` method stores a signed 32-bit integer (long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":50054,"byte_end":50064,"line_start":1012,"line_end":1012,"column_start":12,"column_end":22},"name":"set_uint32","qualname":"<DataView>::set_uint32","value":"pub fn set_uint32(&Self, usize, u32)","parent":null,"children":[],"decl_id":null,"docs":" The `setUint32()` method stores an unsigned 32-bit integer (unsigned long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":50471,"byte_end":50488,"line_start":1019,"line_end":1019,"column_start":12,"column_end":29},"name":"set_uint32_endian","qualname":"<DataView>::set_uint32_endian","value":"pub fn set_uint32_endian(&Self, usize, u32, bool)","parent":null,"children":[],"decl_id":null,"docs":" The `setUint32()` method stores an unsigned 32-bit integer (unsigned long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":50906,"byte_end":50917,"line_start":1026,"line_end":1026,"column_start":12,"column_end":23},"name":"set_float32","qualname":"<DataView>::set_float32","value":"pub fn set_float32(&Self, usize, f32)","parent":null,"children":[],"decl_id":null,"docs":" The `setFloat32()` method stores a signed 32-bit float (float) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":51314,"byte_end":51332,"line_start":1033,"line_end":1033,"column_start":12,"column_end":30},"name":"set_float32_endian","qualname":"<DataView>::set_float32_endian","value":"pub fn set_float32_endian(&Self, usize, f32, bool)","parent":null,"children":[],"decl_id":null,"docs":" The `setFloat32()` method stores a signed 32-bit float (float) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":51751,"byte_end":51762,"line_start":1040,"line_end":1040,"column_start":12,"column_end":23},"name":"set_float64","qualname":"<DataView>::set_float64","value":"pub fn set_float64(&Self, usize, f64)","parent":null,"children":[],"decl_id":null,"docs":" The `setFloat64()` method stores a signed 64-bit float (double) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52160,"byte_end":52178,"line_start":1047,"line_end":1047,"column_start":12,"column_end":30},"name":"set_float64_endian","qualname":"<DataView>::set_float64_endian","value":"pub fn set_float64_endian(&Self, usize, f64, bool)","parent":null,"children":[],"decl_id":null,"docs":" The `setFloat64()` method stores a signed 64-bit float (double) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38989,"byte_end":39004,"line_start":819,"line_end":819,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":889},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52412,"byte_end":52417,"line_start":1055,"line_end":1055,"column_start":14,"column_end":19},"name":"Error","qualname":"::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":890}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52262,"byte_end":52277,"line_start":1051,"line_end":1051,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52262,"byte_end":52277,"line_start":1051,"line_end":1051,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52262,"byte_end":52277,"line_start":1051,"line_end":1051,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52857,"byte_end":52860,"line_start":1064,"line_end":1064,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"pub fn new(&str) -> Error","parent":null,"children":[],"decl_id":null,"docs":" The Error constructor creates an error object.\n Instances of Error objects are thrown when runtime errors occur.\n The Error object can also be used as a base object for user-defined exceptions.\n See below for standard built-in error types.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52262,"byte_end":52277,"line_start":1051,"line_end":1051,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52262,"byte_end":52277,"line_start":1051,"line_end":1051,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":53153,"byte_end":53160,"line_start":1070,"line_end":1070,"column_start":12,"column_end":19},"name":"message","qualname":"<Error>::message","value":"pub fn message(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The message property is a human-readable description of the error.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52262,"byte_end":52277,"line_start":1051,"line_end":1051,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52262,"byte_end":52277,"line_start":1051,"line_end":1051,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":53247,"byte_end":53258,"line_start":1072,"line_end":1072,"column_start":12,"column_end":23},"name":"set_message","qualname":"<Error>::set_message","value":"pub fn set_message(&Self, &str)","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52262,"byte_end":52277,"line_start":1051,"line_end":1051,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52262,"byte_end":52277,"line_start":1051,"line_end":1051,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":53575,"byte_end":53579,"line_start":1078,"line_end":1078,"column_start":12,"column_end":16},"name":"name","qualname":"<Error>::name","value":"pub fn name(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The name property represents a name for the type of error. The initial value is \"Error\".","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52262,"byte_end":52277,"line_start":1051,"line_end":1051,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52262,"byte_end":52277,"line_start":1051,"line_end":1051,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":53666,"byte_end":53674,"line_start":1080,"line_end":1080,"column_start":12,"column_end":20},"name":"set_name","qualname":"<Error>::set_name","value":"pub fn set_name(&Self, &str)","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52262,"byte_end":52277,"line_start":1051,"line_end":1051,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52262,"byte_end":52277,"line_start":1051,"line_end":1051,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":53984,"byte_end":53993,"line_start":1086,"line_end":1086,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Error>::to_string","value":"pub fn to_string(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the specified Error object","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52262,"byte_end":52277,"line_start":1051,"line_end":1051,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":52262,"byte_end":52277,"line_start":1051,"line_end":1051,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":970},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54208,"byte_end":54217,"line_start":1094,"line_end":1094,"column_start":14,"column_end":23},"name":"EvalError","qualname":"::EvalError","value":"EvalError {  }","parent":null,"children":[{"krate":0,"index":971}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54037,"byte_end":54052,"line_start":1090,"line_end":1090,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54037,"byte_end":54052,"line_start":1090,"line_end":1090,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54037,"byte_end":54052,"line_start":1090,"line_end":1090,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54602,"byte_end":54605,"line_start":1102,"line_end":1102,"column_start":12,"column_end":15},"name":"new","qualname":"<EvalError>::new","value":"pub fn new(&str) -> EvalError","parent":null,"children":[],"decl_id":null,"docs":" The EvalError object indicates an error regarding the global eval() function. This\n exception is not thrown by JavaScript anymore, however the EvalError object remains for\n compatibility.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54037,"byte_end":54052,"line_start":1090,"line_end":1090,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54037,"byte_end":54052,"line_start":1090,"line_end":1090,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1088},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54838,"byte_end":54846,"line_start":1110,"line_end":1110,"column_start":14,"column_end":22},"name":"Function","qualname":"::Function","value":"Function {  }","parent":null,"children":[{"krate":0,"index":1089}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":55479,"byte_end":55492,"line_start":1121,"line_end":1121,"column_start":12,"column_end":25},"name":"new_with_args","qualname":"<Function>::new_with_args","value":"pub fn new_with_args(&str, &str) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `Function` constructor creates a new `Function` object. Calling the\n constructor directly can create functions dynamically, but suffers from\n security and similar (but far less significant) performance issues\n similar to `eval`. However, unlike `eval`, the `Function` constructor\n allows executing code in the global scope, prompting better programming\n habits and allowing for more efficient code minification.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":56161,"byte_end":56172,"line_start":1132,"line_end":1132,"column_start":12,"column_end":23},"name":"new_no_args","qualname":"<Function>::new_no_args","value":"pub fn new_no_args(&str) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `Function` constructor creates a new `Function` object. Calling the\n constructor directly can create functions dynamically, but suffers from\n security and similar (but far less significant) performance issues\n similar to `eval`. However, unlike `eval`, the `Function` constructor\n allows executing code in the global scope, prompting better programming\n habits and allowing for more efficient code minification.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":56519,"byte_end":56524,"line_start":1139,"line_end":1139,"column_start":12,"column_end":17},"name":"apply","qualname":"<Function>::apply","value":"pub fn apply(&Self, &JsValue, &Array) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `apply()` method calls a function with a given this value, and arguments provided as an array\n (or an array-like object).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":56913,"byte_end":56918,"line_start":1146,"line_end":1146,"column_start":12,"column_end":17},"name":"call0","qualname":"<Function>::call0","value":"pub fn call0(&Self, &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":57293,"byte_end":57298,"line_start":1153,"line_end":1153,"column_start":12,"column_end":17},"name":"call1","qualname":"<Function>::call1","value":"pub fn call1(&Self, &JsValue, &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":57689,"byte_end":57694,"line_start":1160,"line_end":1160,"column_start":12,"column_end":17},"name":"call2","qualname":"<Function>::call2","value":"pub fn call2(&Self, &JsValue, &JsValue, &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":58140,"byte_end":58145,"line_start":1172,"line_end":1172,"column_start":12,"column_end":17},"name":"call3","qualname":"<Function>::call3","value":"pub fn call3(&Self, &JsValue, &JsValue, &JsValue, &JsValue)\n-> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":58711,"byte_end":58715,"line_start":1185,"line_end":1185,"column_start":12,"column_end":16},"name":"bind","qualname":"<Function>::bind","value":"pub fn bind(&Self, &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `bind()` method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":59170,"byte_end":59175,"line_start":1192,"line_end":1192,"column_start":12,"column_end":17},"name":"bind0","qualname":"<Function>::bind0","value":"pub fn bind0(&Self, &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `bind()` method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1071},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":59630,"byte_end":59635,"line_start":1199,"line_end":1199,"column_start":12,"column_end":17},"name":"bind1","qualname":"<Function>::bind1","value":"pub fn bind1(&Self, &JsValue, &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `bind()` method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":60106,"byte_end":60111,"line_start":1206,"line_end":1206,"column_start":12,"column_end":17},"name":"bind2","qualname":"<Function>::bind2","value":"pub fn bind2(&Self, &JsValue, &JsValue, &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `bind()` method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":60598,"byte_end":60603,"line_start":1213,"line_end":1213,"column_start":12,"column_end":17},"name":"bind3","qualname":"<Function>::bind3","value":"pub fn bind3(&Self, &JsValue, &JsValue, &JsValue, &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `bind()` method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":61030,"byte_end":61036,"line_start":1225,"line_end":1225,"column_start":12,"column_end":18},"name":"length","qualname":"<Function>::length","value":"pub fn length(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length property indicates the number of arguments expected by the function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":61435,"byte_end":61439,"line_start":1233,"line_end":1233,"column_start":12,"column_end":16},"name":"name","qualname":"<Function>::name","value":"pub fn name(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" A Function object's read-only name property indicates the function's\n name as specified when it was created or \"anonymous\" for functions\n created anonymously.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":61761,"byte_end":61770,"line_start":1239,"line_end":1239,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Function>::to_string","value":"pub fn to_string(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the source code of the function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":54650,"byte_end":54665,"line_start":1106,"line_end":1106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":62115,"byte_end":62123,"line_start":1249,"line_end":1249,"column_start":12,"column_end":20},"name":"try_from","qualname":"<Function>::try_from","value":"pub fn try_from(&JsValue) -> Option<&Function>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `Function` value of this JS value if it's an instance of a\n function.","sig":null,"attributes":[{"value":"/ Returns the `Function` value of this JS value if it's an instance of a","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":61824,"byte_end":61898,"line_start":1243,"line_end":1243,"column_start":5,"column_end":79}},{"value":"/ function.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":61903,"byte_end":61916,"line_start":1244,"line_end":1244,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":61921,"byte_end":61924,"line_start":1245,"line_end":1245,"column_start":5,"column_end":8}},{"value":"/ If this JS value is not an instance of a function then this returns","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":61929,"byte_end":62000,"line_start":1246,"line_end":1246,"column_start":5,"column_end":76}},{"value":"/ `None`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":62005,"byte_end":62016,"line_start":1247,"line_end":1247,"column_start":5,"column_end":16}},{"value":"deprecated(note =\n             \"recommended to use dyn_ref instead which is now equivalent\")","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":62021,"byte_end":62103,"line_start":1248,"line_end":1248,"column_start":5,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":1169},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":62375,"byte_end":62384,"line_start":1259,"line_end":1259,"column_start":14,"column_end":23},"name":"Generator","qualname":"::Generator","value":"Generator {  }","parent":null,"children":[{"krate":0,"index":1170}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":62206,"byte_end":62221,"line_start":1255,"line_end":1255,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":62206,"byte_end":62221,"line_start":1255,"line_end":1255,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":62206,"byte_end":62221,"line_start":1255,"line_end":1255,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":62754,"byte_end":62758,"line_start":1266,"line_end":1266,"column_start":12,"column_end":16},"name":"next","qualname":"<Generator>::next","value":"pub fn next(&Self, &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `next()` method returns an object with two properties done and value.\n You can also provide a parameter to the next method to send a value to the generator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":62206,"byte_end":62221,"line_start":1255,"line_end":1255,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":62206,"byte_end":62221,"line_start":1255,"line_end":1255,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63110,"byte_end":63117,"line_start":1272,"line_end":1272,"column_start":12,"column_end":19},"name":"return_","qualname":"<Generator>::return_","value":"pub fn return_(&Self, &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `return()` method returns the given value and finishes the generator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":62206,"byte_end":62221,"line_start":1255,"line_end":1255,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":62206,"byte_end":62221,"line_start":1255,"line_end":1255,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63519,"byte_end":63524,"line_start":1279,"line_end":1279,"column_start":12,"column_end":17},"name":"throw","qualname":"<Generator>::throw","value":"pub fn throw(&Self, &Error) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `throw()` method resumes the execution of a generator by throwing an error into it\n and returns an object with two properties done and value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":62206,"byte_end":62221,"line_start":1255,"line_end":1255,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":62206,"byte_end":62221,"line_start":1255,"line_end":1255,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1265},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63755,"byte_end":63758,"line_start":1287,"line_end":1287,"column_start":14,"column_end":17},"name":"Map","qualname":"::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":1266}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1242},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63997,"byte_end":64002,"line_start":1293,"line_end":1293,"column_start":12,"column_end":17},"name":"clear","qualname":"<Map>::clear","value":"pub fn clear(&Self)","parent":null,"children":[],"decl_id":null,"docs":" The `clear()` method removes all elements from a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":64264,"byte_end":64270,"line_start":1299,"line_end":1299,"column_start":12,"column_end":18},"name":"delete","qualname":"<Map>::delete","value":"pub fn delete(&Self, &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":64896,"byte_end":64904,"line_start":1313,"line_end":1313,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Map>::for_each","value":"pub fn for_each(&Self, &mut FnMut(JsValue, JsValue) -> ())","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per each\n key/value pair in the Map object, in insertion order.\n Note that in Javascript land the `Key` and `Value` are reversed compared to normal expectations:\n # Examples\n ```\n let js_map = Map::new();\n js_map.for_each(&mut |value, key| {\n     // Do something here...\n })\n ```\n [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":65202,"byte_end":65205,"line_start":1319,"line_end":1319,"column_start":12,"column_end":15},"name":"get","qualname":"<Map>::get","value":"pub fn get(&Self, &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `get()` method returns a specified element from a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1254},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":65532,"byte_end":65535,"line_start":1326,"line_end":1326,"column_start":12,"column_end":15},"name":"has","qualname":"<Map>::has","value":"pub fn has(&Self, &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an element with\n the specified key exists or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1257},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":65878,"byte_end":65881,"line_start":1333,"line_end":1333,"column_start":12,"column_end":15},"name":"new","qualname":"<Map>::new","value":"pub fn new() -> Map","parent":null,"children":[],"decl_id":null,"docs":" The Map object holds key-value pairs. Any value (both objects and\n primitive values) maybe used as either a key or a value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1260},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":66168,"byte_end":66171,"line_start":1340,"line_end":1340,"column_start":12,"column_end":15},"name":"set","qualname":"<Map>::set","value":"pub fn set(&Self, &JsValue, &JsValue) -> Map","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method adds or updates an element with a specified key\n and value to a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":66598,"byte_end":66602,"line_start":1348,"line_end":1348,"column_start":12,"column_end":16},"name":"size","qualname":"<Map>::size","value":"pub fn size(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The value of size is an integer representing how many entries\n the Map object has. A set accessor function for size is undefined;\n you can not change this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":63597,"byte_end":63612,"line_start":1283,"line_end":1283,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1279},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":67009,"byte_end":67016,"line_start":1360,"line_end":1360,"column_start":12,"column_end":19},"name":"entries","qualname":"<Map>::entries","value":"pub fn entries(&Self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `entries()` method returns a new Iterator object that contains\n the [key, value] pairs for each element in the Map object in\n insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":66642,"byte_end":66657,"line_start":1352,"line_end":1352,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":66642,"byte_end":66657,"line_start":1352,"line_end":1352,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":67353,"byte_end":67357,"line_start":1367,"line_end":1367,"column_start":12,"column_end":16},"name":"keys","qualname":"<Map>::keys","value":"pub fn keys(&Self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `keys()` method returns a new Iterator object that contains the\n keys for each element in the Map object in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":66642,"byte_end":66657,"line_start":1352,"line_end":1352,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":66642,"byte_end":66657,"line_start":1352,"line_end":1352,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1285},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":67700,"byte_end":67706,"line_start":1374,"line_end":1374,"column_start":12,"column_end":18},"name":"values","qualname":"<Map>::values","value":"pub fn values(&Self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `values()` method returns a new Iterator object that contains the\n values for each element in the Map object in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":66642,"byte_end":66657,"line_start":1352,"line_end":1352,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":66642,"byte_end":66657,"line_start":1352,"line_end":1352,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1344},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":68174,"byte_end":68182,"line_start":1386,"line_end":1386,"column_start":14,"column_end":22},"name":"Iterator","qualname":"::Iterator","value":"Iterator {  }","parent":null,"children":[{"krate":0,"index":1345}],"decl_id":null,"docs":" Any object that conforms to the JS iterator protocol. For example,\n something returned by `myArray[Symbol.iterator]()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":67747,"byte_end":67762,"line_start":1378,"line_end":1378,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":67747,"byte_end":67762,"line_start":1378,"line_end":1378,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":67747,"byte_end":67762,"line_start":1378,"line_end":1378,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":68522,"byte_end":68526,"line_start":1393,"line_end":1393,"column_start":12,"column_end":16},"name":"next","qualname":"<Iterator>::next","value":"pub fn next(&Self) -> Result<IteratorNext, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `next()` method always has to return an object with appropriate\n properties including done and value. If a non-object value gets returned\n (such as false or undefined), a TypeError (\"iterator.next() returned a\n non-object value\") will be thrown.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":67747,"byte_end":67762,"line_start":1378,"line_end":1378,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":67747,"byte_end":67762,"line_start":1378,"line_end":1378,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1464},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":69469,"byte_end":69482,"line_start":1425,"line_end":1425,"column_start":14,"column_end":27},"name":"AsyncIterator","qualname":"::AsyncIterator","value":"AsyncIterator {  }","parent":null,"children":[{"krate":0,"index":1465}],"decl_id":null,"docs":" Any object that conforms to the JS async iterator protocol. For example,\n something returned by `myObject[Symbol.asyncIterator]()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":69015,"byte_end":69030,"line_start":1417,"line_end":1417,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":69015,"byte_end":69030,"line_start":1417,"line_end":1417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":69015,"byte_end":69030,"line_start":1417,"line_end":1417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1462},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":69850,"byte_end":69854,"line_start":1432,"line_end":1432,"column_start":12,"column_end":16},"name":"next","qualname":"<AsyncIterator>::next","value":"pub fn next(&Self) -> Result<Promise, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `next()` method always has to return a Promise which resolves to an object\n with appropriate properties including done and value. If a non-object value\n gets returned (such as false or undefined), a TypeError (\"iterator.next()\n returned a non-object value\") will be thrown.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":69015,"byte_end":69030,"line_start":1417,"line_end":1417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":69015,"byte_end":69030,"line_start":1417,"line_end":1417,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":70070,"byte_end":70074,"line_start":1438,"line_end":1438,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44}],"decl_id":null,"docs":" An iterator over the JS `Symbol.iterator` iteration protocol.","sig":null,"attributes":[{"value":"/ An iterator over the JS `Symbol.iterator` iteration protocol.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":69909,"byte_end":69974,"line_start":1435,"line_end":1435,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":69975,"byte_end":69978,"line_start":1436,"line_end":1436,"column_start":1,"column_end":4}},{"value":"/ Use the `IntoIterator for &js_sys::Iterator` implementation to create this.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":69979,"byte_end":70058,"line_start":1437,"line_end":1437,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":70288,"byte_end":70296,"line_start":1446,"line_end":1446,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47}],"decl_id":null,"docs":" An iterator over the JS `Symbol.iterator` iteration protocol.","sig":null,"attributes":[{"value":"/ An iterator over the JS `Symbol.iterator` iteration protocol.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":70128,"byte_end":70193,"line_start":1443,"line_end":1443,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":70194,"byte_end":70197,"line_start":1444,"line_end":1444,"column_start":1,"column_end":4}},{"value":"/ Use the `IntoIterator for js_sys::Iterator` implementation to create this.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":70198,"byte_end":70276,"line_start":1445,"line_end":1445,"column_start":1,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":71861,"byte_end":71869,"line_start":1522,"line_end":1522,"column_start":8,"column_end":16},"name":"try_iter","qualname":"::try_iter","value":"pub fn try_iter(&JsValue) -> Result<Option<IntoIter>, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator over `val` using the JS iteration protocol and\n `Symbol.iterator`.\n","sig":null,"attributes":[{"value":"/ Create an iterator over `val` using the JS iteration protocol and","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":71761,"byte_end":71830,"line_start":1520,"line_end":1520,"column_start":1,"column_end":70}},{"value":"/ `Symbol.iterator`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":71831,"byte_end":71853,"line_start":1521,"line_end":1521,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1535},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":72670,"byte_end":72682,"line_start":1547,"line_end":1547,"column_start":14,"column_end":26},"name":"IteratorNext","qualname":"::IteratorNext","value":"IteratorNext {  }","parent":null,"children":[{"krate":0,"index":1536}],"decl_id":null,"docs":" The result of calling `next()` on a JS iterator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":72326,"byte_end":72341,"line_start":1540,"line_end":1540,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":72326,"byte_end":72341,"line_start":1540,"line_end":1540,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":72326,"byte_end":72341,"line_start":1540,"line_end":1540,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73110,"byte_end":73114,"line_start":1557,"line_end":1557,"column_start":12,"column_end":16},"name":"done","qualname":"<IteratorNext>::done","value":"pub fn done(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Has the value `true` if the iterator is past the end of the iterated\n sequence. In this case value optionally specifies the return value of\n the iterator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":72326,"byte_end":72341,"line_start":1540,"line_end":1540,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":72326,"byte_end":72341,"line_start":1540,"line_end":1540,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1533},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73302,"byte_end":73307,"line_start":1562,"line_end":1562,"column_start":12,"column_end":17},"name":"value","qualname":"<IteratorNext>::value","value":"pub fn value(&Self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" Any JavaScript value returned by the iterator. Can be omitted when done\n is true.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":72326,"byte_end":72341,"line_start":1540,"line_end":1540,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":72326,"byte_end":72341,"line_start":1540,"line_end":1540,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73377,"byte_end":73381,"line_start":1566,"line_end":1566,"column_start":9,"column_end":13},"name":"Math","qualname":"::Math","value":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":1548},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1562},{"krate":0,"index":1564},{"krate":0,"index":1566},{"krate":0,"index":1568},{"krate":0,"index":1570},{"krate":0,"index":1572},{"krate":0,"index":1574},{"krate":0,"index":1576},{"krate":0,"index":1578},{"krate":0,"index":1580},{"krate":0,"index":1582},{"krate":0,"index":1584},{"krate":0,"index":1586},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1592},{"krate":0,"index":1594},{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1600},{"krate":0,"index":1602},{"krate":0,"index":1604},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1610},{"krate":0,"index":1612},{"krate":0,"index":1614},{"krate":0,"index":1616}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73344,"byte_end":73368,"line_start":1565,"line_end":1565,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1548},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73763,"byte_end":73766,"line_start":1577,"line_end":1577,"column_start":16,"column_end":19},"name":"abs","qualname":"::Math::abs","value":"pub fn abs(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.abs()` function returns the absolute value of a number, that is\n Math.abs(x) = |x|","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1550},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":74181,"byte_end":74185,"line_start":1585,"line_end":1585,"column_start":16,"column_end":20},"name":"acos","qualname":"::Math::acos","value":"pub fn acos(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.acos()` function returns the arccosine (in radians) of a\n number, that is ∀x∊[-1;1]\n Math.acos(x) = arccos(x) = the unique y∊[0;π] such that cos(y)=x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1552},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":74599,"byte_end":74604,"line_start":1593,"line_end":1593,"column_start":16,"column_end":21},"name":"acosh","qualname":"::Math::acosh","value":"pub fn acosh(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.acosh()` function returns the hyperbolic arc-cosine of a\n number, that is ∀x ≥ 1\n Math.acosh(x) = arcosh(x) = the unique y ≥ 0 such that cosh(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1554},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":75025,"byte_end":75029,"line_start":1601,"line_end":1601,"column_start":16,"column_end":20},"name":"asin","qualname":"::Math::asin","value":"pub fn asin(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.asin()` function returns the arcsine (in radians) of a\n number, that is ∀x ∊ [-1;1]\n Math.asin(x) = arcsin(x) = the unique y∊[-π2;π2] such that sin(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1556},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":75411,"byte_end":75416,"line_start":1608,"line_end":1608,"column_start":16,"column_end":21},"name":"asinh","qualname":"::Math::asinh","value":"pub fn asinh(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.asinh()` function returns the hyperbolic arcsine of a\n number, that is Math.asinh(x) = arsinh(x) = the unique y such that sinh(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1558},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":75689,"byte_end":75693,"line_start":1614,"line_end":1614,"column_start":16,"column_end":20},"name":"atan","qualname":"::Math::atan","value":"pub fn atan(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.atan()` function returns the arctangent (in radians) of a\n number, that is Math.atan(x) = arctan(x) = the unique y ∊ [-π2;π2]such that\n tan(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1560},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":76017,"byte_end":76022,"line_start":1621,"line_end":1621,"column_start":16,"column_end":21},"name":"atan2","qualname":"::Math::atan2","value":"pub fn atan2(f64, f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.atan2()` function returns the arctangent of the quotient of\n its arguments.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1562},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":76445,"byte_end":76450,"line_start":1629,"line_end":1629,"column_start":16,"column_end":21},"name":"atanh","qualname":"::Math::atanh","value":"pub fn atanh(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.atanh()` function returns the hyperbolic arctangent of a number,\n that is ∀x ∊ (-1,1), Math.atanh(x) = arctanh(x) = the unique y such that\n tanh(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1564},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":76811,"byte_end":76815,"line_start":1636,"line_end":1636,"column_start":16,"column_end":20},"name":"cbrt","qualname":"::Math::cbrt","value":"pub fn cbrt(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.cbrt() `function returns the cube root of a number, that is\n Math.cbrt(x) = ∛x = the unique y such that y^3 = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1566},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":77150,"byte_end":77154,"line_start":1643,"line_end":1643,"column_start":16,"column_end":20},"name":"ceil","qualname":"::Math::ceil","value":"pub fn ceil(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.ceil()` function returns the smallest integer greater than\n or equal to a given number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1568},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":77510,"byte_end":77515,"line_start":1650,"line_end":1650,"column_start":16,"column_end":21},"name":"clz32","qualname":"::Math::clz32","value":"pub fn clz32(i32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `Math.clz32()` function returns the number of leading zero bits in\n the 32-bit binary representation of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1570},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":77915,"byte_end":77918,"line_start":1657,"line_end":1657,"column_start":16,"column_end":19},"name":"cos","qualname":"::Math::cos","value":"pub fn cos(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.cos()` static function returns the cosine of the specified angle,\n which must be specified in radians. This value is length(adjacent)/length(hypotenuse).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1572},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":78270,"byte_end":78274,"line_start":1664,"line_end":1664,"column_start":16,"column_end":20},"name":"cosh","qualname":"::Math::cosh","value":"pub fn cosh(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.cosh()` function returns the hyperbolic cosine of a number,\n that can be expressed using the constant e.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1574},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":78670,"byte_end":78673,"line_start":1671,"line_end":1671,"column_start":16,"column_end":19},"name":"exp","qualname":"::Math::exp","value":"pub fn exp(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.exp()` function returns e^x, where x is the argument, and e is Euler's number\n (also known as Napier's constant), the base of the natural logarithms.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1576},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":79024,"byte_end":79029,"line_start":1678,"line_end":1678,"column_start":16,"column_end":21},"name":"expm1","qualname":"::Math::expm1","value":"pub fn expm1(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.expm1()` function returns e^x - 1, where x is the argument, and e the base of the\n natural logarithms.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1578},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":79362,"byte_end":79367,"line_start":1685,"line_end":1685,"column_start":16,"column_end":21},"name":"floor","qualname":"::Math::floor","value":"pub fn floor(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.floor()` function returns the largest integer less than or\n equal to a given number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1580},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":79714,"byte_end":79720,"line_start":1692,"line_end":1692,"column_start":16,"column_end":22},"name":"fround","qualname":"::Math::fround","value":"pub fn fround(f64) -> f32","parent":null,"children":[],"decl_id":null,"docs":" The `Math.fround()` function returns the nearest 32-bit single precision float representation\n of a Number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1582},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":80039,"byte_end":80044,"line_start":1698,"line_end":1698,"column_start":16,"column_end":21},"name":"hypot","qualname":"::Math::hypot","value":"pub fn hypot(f64, f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.hypot()` function returns the square root of the sum of squares of its arguments.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1584},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":80395,"byte_end":80399,"line_start":1705,"line_end":1705,"column_start":16,"column_end":20},"name":"imul","qualname":"::Math::imul","value":"pub fn imul(i32, i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `Math.imul()` function returns the result of the C-like 32-bit multiplication of the\n two parameters.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1586},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":80798,"byte_end":80801,"line_start":1712,"line_end":1712,"column_start":16,"column_end":19},"name":"log","qualname":"::Math::log","value":"pub fn log(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.log()` function returns the natural logarithm (base e) of a number.\n The JavaScript `Math.log()` function is equivalent to ln(x) in mathematics.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1588},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":81099,"byte_end":81104,"line_start":1718,"line_end":1718,"column_start":16,"column_end":21},"name":"log10","qualname":"::Math::log10","value":"pub fn log10(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.log10()` function returns the base 10 logarithm of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1590},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":81403,"byte_end":81408,"line_start":1723,"line_end":1723,"column_start":16,"column_end":21},"name":"log1p","qualname":"::Math::log1p","value":"pub fn log1p(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.log1p()` function returns the natural logarithm (base e) of 1 + a number.\n [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1592},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":81703,"byte_end":81707,"line_start":1729,"line_end":1729,"column_start":16,"column_end":20},"name":"log2","qualname":"::Math::log2","value":"pub fn log2(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.log2()` function returns the base 2 logarithm of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1594},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":81994,"byte_end":81997,"line_start":1735,"line_end":1735,"column_start":16,"column_end":19},"name":"max","qualname":"::Math::max","value":"pub fn max(f64, f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.max()` function returns the largest of two numbers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1596},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":82312,"byte_end":82315,"line_start":1741,"line_end":1741,"column_start":16,"column_end":19},"name":"min","qualname":"::Math::min","value":"pub fn min(f64, f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The static function `Math.min()` returns the lowest-valued number passed into it.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1598},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":82638,"byte_end":82641,"line_start":1747,"line_end":1747,"column_start":16,"column_end":19},"name":"pow","qualname":"::Math::pow","value":"pub fn pow(f64, f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.pow()` function returns the base to the exponent power, that is, base^exponent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1600},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":83295,"byte_end":83301,"line_start":1757,"line_end":1757,"column_start":16,"column_end":22},"name":"random","qualname":"::Math::random","value":"pub fn random() -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.random()` function returns a floating-point, pseudo-random number\n in the range 0–1 (inclusive of 0, but not 1) with approximately uniform distribution\n over that range — which you can then scale to your desired range.\n The implementation selects the initial seed to the random number generation algorithm;\n it cannot be chosen or reset by the user.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1602},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":83612,"byte_end":83617,"line_start":1763,"line_end":1763,"column_start":16,"column_end":21},"name":"round","qualname":"::Math::round","value":"pub fn round(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.round()` function returns the value of a number rounded to the nearest integer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1604},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":83973,"byte_end":83977,"line_start":1770,"line_end":1770,"column_start":16,"column_end":20},"name":"sign","qualname":"::Math::sign","value":"pub fn sign(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.sign()` function returns the sign of a number, indicating whether the number is\n positive, negative or zero.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1606},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":84258,"byte_end":84261,"line_start":1776,"line_end":1776,"column_start":16,"column_end":19},"name":"sin","qualname":"::Math::sin","value":"pub fn sin(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.sin()` function returns the sine of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1608},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":84641,"byte_end":84645,"line_start":1783,"line_end":1783,"column_start":16,"column_end":20},"name":"sinh","qualname":"::Math::sinh","value":"pub fn sinh(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.sinh()` function returns the hyperbolic sine of a number, that can be expressed\n using the constant e: Math.sinh(x) = (e^x - e^-x)/2","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1610},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":85026,"byte_end":85030,"line_start":1790,"line_end":1790,"column_start":16,"column_end":20},"name":"sqrt","qualname":"::Math::sqrt","value":"pub fn sqrt(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.sqrt()` function returns the square root of a number, that is\n ∀x ≥ 0, Math.sqrt(x) = √x = the unique y ≥ 0 such that y^2 = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1612},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":85314,"byte_end":85317,"line_start":1796,"line_end":1796,"column_start":16,"column_end":19},"name":"tan","qualname":"::Math::tan","value":"pub fn tan(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.tan()` function returns the tangent of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1614},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":85711,"byte_end":85715,"line_start":1803,"line_end":1803,"column_start":16,"column_end":20},"name":"tanh","qualname":"::Math::tanh","value":"pub fn tanh(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.tanh()` function returns the hyperbolic tangent of a number, that is\n tanh x = sinh x / cosh x = (e^x - e^-x)/(e^x + e^-x) = (e^2x - 1)/(e^2x + 1)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1616},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86054,"byte_end":86059,"line_start":1810,"line_end":1810,"column_start":16,"column_end":21},"name":"trunc","qualname":"::Math::trunc","value":"pub fn trunc(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.trunc()` function returns the integer part of a number by removing any fractional\n digits.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":73419,"byte_end":73434,"line_start":1570,"line_end":1570,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1718},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86264,"byte_end":86270,"line_start":1819,"line_end":1819,"column_start":14,"column_end":20},"name":"Number","qualname":"::Number","value":"Number {  }","parent":null,"children":[{"krate":0,"index":1719}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86580,"byte_end":86589,"line_start":1825,"line_end":1825,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Number>::is_finite","value":"pub fn is_finite(&JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Number.isFinite()` method determines whether the passed value is a finite number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1683},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86922,"byte_end":86932,"line_start":1831,"line_end":1831,"column_start":12,"column_end":22},"name":"is_integer","qualname":"<Number>::is_integer","value":"pub fn is_integer(&JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Number.isInteger()` method determines whether the passed value is an integer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1686},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":87340,"byte_end":87346,"line_start":1838,"line_end":1838,"column_start":12,"column_end":18},"name":"is_nan","qualname":"<Number>::is_nan","value":"pub fn is_nan(&JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Number.isNaN()` method determines whether the passed value is `NaN` and its type is Number.\n It is a more robust version of the original, global isNaN().","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1689},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":87722,"byte_end":87737,"line_start":1845,"line_end":1845,"column_start":12,"column_end":27},"name":"is_safe_integer","qualname":"<Number>::is_safe_integer","value":"pub fn is_safe_integer(&JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Number.isSafeInteger()` method determines whether the provided value is a number\n that is a safe integer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":88211,"byte_end":88214,"line_start":1855,"line_end":1855,"column_start":12,"column_end":15},"name":"new","qualname":"<Number>::new","value":"pub fn new(&JsValue) -> Number","parent":null,"children":[],"decl_id":null,"docs":" The `Number` JavaScript object is a wrapper object allowing\n you to work with numerical values. A `Number` object is\n created using the `Number()` constructor.","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `Number::from` instead\")","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":88109,"byte_end":88174,"line_start":1853,"line_end":1853,"column_start":5,"column_end":70}},{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":88179,"byte_end":88199,"line_start":1854,"line_end":1854,"column_start":5,"column_end":25}},{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1695},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":88583,"byte_end":88592,"line_start":1862,"line_end":1862,"column_start":12,"column_end":21},"name":"parse_int","qualname":"<Number>::parse_int","value":"pub fn parse_int(&str, u8) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Number.parseInt()` method parses a string argument and returns an\n integer of the specified radix or base.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1698},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":88952,"byte_end":88963,"line_start":1869,"line_end":1869,"column_start":12,"column_end":23},"name":"parse_float","qualname":"<Number>::parse_float","value":"pub fn parse_float(&str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Number.parseFloat()` method parses a string argument and returns a\n floating point number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1701},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":89310,"byte_end":89326,"line_start":1876,"line_end":1876,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Number>::to_locale_string","value":"pub fn to_locale_string(&Self, &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleString()` method returns a string with a language sensitive\n representation of this number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":89695,"byte_end":89707,"line_start":1883,"line_end":1883,"column_start":12,"column_end":24},"name":"to_precision","qualname":"<Number>::to_precision","value":"pub fn to_precision(&Self, u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `toPrecision()` method returns a string representing the Number\n object to the specified precision.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1707},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":90082,"byte_end":90090,"line_start":1890,"line_end":1890,"column_start":12,"column_end":20},"name":"to_fixed","qualname":"<Number>::to_fixed","value":"pub fn to_fixed(&Self, u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `toFixed()` method returns a string representing the Number\n object using fixed-point notation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1710},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":90477,"byte_end":90491,"line_start":1897,"line_end":1897,"column_start":12,"column_end":26},"name":"to_exponential","qualname":"<Number>::to_exponential","value":"pub fn to_exponential(&Self, u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `toExponential()` method returns a string representing the Number\n object in exponential notation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1713},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":90858,"byte_end":90867,"line_start":1904,"line_end":1904,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Number>::to_string","value":"pub fn to_string(&Self, u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the\n specified Number object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1716},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":91211,"byte_end":91219,"line_start":1911,"line_end":1911,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Number>::value_of","value":"pub fn value_of(&Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the wrapped primitive value of\n a Number object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":86096,"byte_end":86111,"line_start":1815,"line_end":1815,"column_start":1,"column_end":16}}]},{"kind":"Const","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":91472,"byte_end":91479,"line_start":1918,"line_end":1918,"column_start":15,"column_end":22},"name":"EPSILON","qualname":"::Number::EPSILON","value":"f64","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" The smallest interval between two representable numbers.","sig":null,"attributes":[{"value":"/ The smallest interval between two representable numbers.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":91264,"byte_end":91324,"line_start":1915,"line_end":1915,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":91329,"byte_end":91332,"line_start":1916,"line_end":1916,"column_start":5,"column_end":8}},{"value":"/ [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":91337,"byte_end":91457,"line_start":1917,"line_end":1917,"column_start":5,"column_end":125}}]},{"kind":"Const","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":91716,"byte_end":91732,"line_start":1922,"line_end":1922,"column_start":15,"column_end":31},"name":"MAX_SAFE_INTEGER","qualname":"::Number::MAX_SAFE_INTEGER","value":"f64","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" The maximum safe integer in JavaScript (2^53 - 1).","sig":null,"attributes":[{"value":"/ The maximum safe integer in JavaScript (2^53 - 1).","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":91505,"byte_end":91559,"line_start":1919,"line_end":1919,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":91564,"byte_end":91567,"line_start":1920,"line_end":1920,"column_start":5,"column_end":8}},{"value":"/ [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":91572,"byte_end":91701,"line_start":1921,"line_end":1921,"column_start":5,"column_end":134}}]},{"kind":"Const","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":91960,"byte_end":91969,"line_start":1926,"line_end":1926,"column_start":15,"column_end":24},"name":"MAX_VALUE","qualname":"::Number::MAX_VALUE","value":"f64","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" The largest positive representable number.","sig":null,"attributes":[{"value":"/ The largest positive representable number.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":91764,"byte_end":91810,"line_start":1923,"line_end":1923,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":91815,"byte_end":91818,"line_start":1924,"line_end":1924,"column_start":5,"column_end":8}},{"value":"/ [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":91823,"byte_end":91945,"line_start":1925,"line_end":1925,"column_start":5,"column_end":127}}]},{"kind":"Const","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":92205,"byte_end":92221,"line_start":1930,"line_end":1930,"column_start":15,"column_end":31},"name":"MIN_SAFE_INTEGER","qualname":"::Number::MIN_SAFE_INTEGER","value":"f64","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" The minimum safe integer in JavaScript (-(2^53 - 1)).","sig":null,"attributes":[{"value":"/ The minimum safe integer in JavaScript (-(2^53 - 1)).","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":91991,"byte_end":92048,"line_start":1927,"line_end":1927,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":92053,"byte_end":92056,"line_start":1928,"line_end":1928,"column_start":5,"column_end":8}},{"value":"/ [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":92061,"byte_end":92190,"line_start":1929,"line_end":1929,"column_start":5,"column_end":134}}]},{"kind":"Const","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":92628,"byte_end":92637,"line_start":1936,"line_end":1936,"column_start":15,"column_end":24},"name":"MIN_VALUE","qualname":"::Number::MIN_VALUE","value":"f64","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" The smallest positive representable number—that is, the positive number closest to zero\n (without actually being zero).","sig":null,"attributes":[{"value":"/ The smallest positive representable number—that is, the positive number closest to zero","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":92254,"byte_end":92347,"line_start":1931,"line_end":1931,"column_start":5,"column_end":96}},{"value":"/ (without actually being zero).","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":92352,"byte_end":92386,"line_start":1932,"line_end":1932,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":92391,"byte_end":92394,"line_start":1933,"line_end":1933,"column_start":5,"column_end":8}},{"value":"/ [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":92399,"byte_end":92521,"line_start":1934,"line_end":1934,"column_start":5,"column_end":127}}]},{"kind":"Const","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":92834,"byte_end":92837,"line_start":1940,"line_end":1940,"column_start":15,"column_end":18},"name":"NAN","qualname":"::Number::NAN","value":"f64","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Special \"Not a Number\" value.","sig":null,"attributes":[{"value":"/ Special \"Not a Number\" value.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":92657,"byte_end":92690,"line_start":1937,"line_end":1937,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":92695,"byte_end":92698,"line_start":1938,"line_end":1938,"column_start":5,"column_end":8}},{"value":"/ [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":92703,"byte_end":92819,"line_start":1939,"line_end":1939,"column_start":5,"column_end":121}}]},{"kind":"Const","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":93088,"byte_end":93105,"line_start":1944,"line_end":1944,"column_start":15,"column_end":32},"name":"NEGATIVE_INFINITY","qualname":"::Number::NEGATIVE_INFINITY","value":"f64","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Special value representing negative infinity. Returned on overflow.","sig":null,"attributes":[{"value":"/ Special value representing negative infinity. Returned on overflow.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":92859,"byte_end":92930,"line_start":1941,"line_end":1941,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":92935,"byte_end":92938,"line_start":1942,"line_end":1942,"column_start":5,"column_end":8}},{"value":"/ [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":92943,"byte_end":93073,"line_start":1943,"line_end":1943,"column_start":5,"column_end":135}}]},{"kind":"Const","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":93356,"byte_end":93373,"line_start":1948,"line_end":1948,"column_start":15,"column_end":32},"name":"POSITIVE_INFINITY","qualname":"::Number::POSITIVE_INFINITY","value":"f64","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Special value representing infinity. Returned on overflow.","sig":null,"attributes":[{"value":"/ Special value representing infinity. Returned on overflow.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":93136,"byte_end":93198,"line_start":1945,"line_end":1945,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":93203,"byte_end":93206,"line_start":1946,"line_end":1946,"column_start":5,"column_end":8}},{"value":"/ [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":93211,"byte_end":93341,"line_start":1947,"line_end":1947,"column_start":5,"column_end":135}}]},{"kind":"Struct","id":{"krate":0,"index":1987},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94265,"byte_end":94269,"line_start":1988,"line_end":1988,"column_start":14,"column_end":18},"name":"Date","qualname":"::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":1988}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1814},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94577,"byte_end":94585,"line_start":1995,"line_end":1995,"column_start":12,"column_end":20},"name":"get_date","qualname":"<Date>::get_date","value":"pub fn get_date(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getDate()` method returns the day of the month for the\n specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1817},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94976,"byte_end":94983,"line_start":2002,"line_end":2002,"column_start":12,"column_end":19},"name":"get_day","qualname":"<Date>::get_day","value":"pub fn get_day(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getDay()` method returns the day of the week for the specified date according to local time,\n where 0 represents Sunday. For the day of the month see getDate().","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1820},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":95302,"byte_end":95315,"line_start":2008,"line_end":2008,"column_start":12,"column_end":25},"name":"get_full_year","qualname":"<Date>::get_full_year","value":"pub fn get_full_year(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getFullYear()` method returns the year of the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1823},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":95627,"byte_end":95636,"line_start":2014,"line_end":2014,"column_start":12,"column_end":21},"name":"get_hours","qualname":"<Date>::get_hours","value":"pub fn get_hours(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getHours()` method returns the hour for the specified date, according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1826},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":95975,"byte_end":95991,"line_start":2020,"line_end":2020,"column_start":12,"column_end":28},"name":"get_milliseconds","qualname":"<Date>::get_milliseconds","value":"pub fn get_milliseconds(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getMilliseconds()` method returns the milliseconds in the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":96310,"byte_end":96321,"line_start":2026,"line_end":2026,"column_start":12,"column_end":23},"name":"get_minutes","qualname":"<Date>::get_minutes","value":"pub fn get_minutes(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getMinutes()` method returns the minutes in the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1832},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":96714,"byte_end":96723,"line_start":2033,"line_end":2033,"column_start":12,"column_end":21},"name":"get_month","qualname":"<Date>::get_month","value":"pub fn get_month(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getMonth()` method returns the month in the specified date according to local time,\n as a zero-based value (where zero indicates the first month of the year).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1835},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":97042,"byte_end":97053,"line_start":2039,"line_end":2039,"column_start":12,"column_end":23},"name":"get_seconds","qualname":"<Date>::get_seconds","value":"pub fn get_seconds(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getSeconds()` method returns the seconds in the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1838},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":97408,"byte_end":97416,"line_start":2046,"line_end":2046,"column_start":12,"column_end":20},"name":"get_time","qualname":"<Date>::get_time","value":"pub fn get_time(&Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `getTime()` method returns the numeric value corresponding to the time for the specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":97794,"byte_end":97813,"line_start":2053,"line_end":2053,"column_start":12,"column_end":31},"name":"get_timezone_offset","qualname":"<Date>::get_timezone_offset","value":"pub fn get_timezone_offset(&Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `getTimezoneOffset()` method returns the time zone difference, in minutes,\n from current locale (host system settings) to UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1844},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":98160,"byte_end":98172,"line_start":2060,"line_end":2060,"column_start":12,"column_end":24},"name":"get_utc_date","qualname":"<Date>::get_utc_date","value":"pub fn get_utc_date(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCDate()` method returns the day (date) of the month in the specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1847},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":98535,"byte_end":98546,"line_start":2067,"line_end":2067,"column_start":12,"column_end":23},"name":"get_utc_day","qualname":"<Date>::get_utc_day","value":"pub fn get_utc_day(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCDay()` method returns the day of the week in the specified date according to universal time,\n where 0 represents Sunday.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":98878,"byte_end":98895,"line_start":2073,"line_end":2073,"column_start":12,"column_end":29},"name":"get_utc_full_year","qualname":"<Date>::get_utc_full_year","value":"pub fn get_utc_full_year(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCFullYear()` method returns the year in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1853},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":99219,"byte_end":99232,"line_start":2079,"line_end":2079,"column_start":12,"column_end":25},"name":"get_utc_hours","qualname":"<Date>::get_utc_hours","value":"pub fn get_utc_hours(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCHours()` method returns the hours in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1856},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":99592,"byte_end":99612,"line_start":2086,"line_end":2086,"column_start":12,"column_end":32},"name":"get_utc_milliseconds","qualname":"<Date>::get_utc_milliseconds","value":"pub fn get_utc_milliseconds(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCMilliseconds()` method returns the milliseconds in the specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1859},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":99944,"byte_end":99959,"line_start":2092,"line_end":2092,"column_start":12,"column_end":27},"name":"get_utc_minutes","qualname":"<Date>::get_utc_minutes","value":"pub fn get_utc_minutes(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCMinutes()` method returns the minutes in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":100358,"byte_end":100371,"line_start":2099,"line_end":2099,"column_start":12,"column_end":25},"name":"get_utc_month","qualname":"<Date>::get_utc_month","value":"pub fn get_utc_month(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCMonth()` returns the month of the specified date according to universal time,\n as a zero-based value (where zero indicates the first month of the year).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1865},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":100703,"byte_end":100718,"line_start":2105,"line_end":2105,"column_start":12,"column_end":27},"name":"get_utc_seconds","qualname":"<Date>::get_utc_seconds","value":"pub fn get_utc_seconds(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCSeconds()` method returns the seconds in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":101112,"byte_end":101115,"line_start":2113,"line_end":2113,"column_start":12,"column_end":15},"name":"new","qualname":"<Date>::new","value":"pub fn new(&JsValue) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1871},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":101406,"byte_end":101411,"line_start":2120,"line_end":2120,"column_start":12,"column_end":17},"name":"new_0","qualname":"<Date>::new_0","value":"pub fn new_0() -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents the current moment in\n time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1874},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":101795,"byte_end":101814,"line_start":2128,"line_end":2128,"column_start":12,"column_end":31},"name":"new_with_year_month","qualname":"<Date>::new_with_year_month","value":"pub fn new_with_year_month(u32, i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1877},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":102219,"byte_end":102242,"line_start":2136,"line_end":2136,"column_start":12,"column_end":35},"name":"new_with_year_month_day","qualname":"<Date>::new_with_year_month_day","value":"pub fn new_with_year_month_day(u32, i32, i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1880},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":102657,"byte_end":102683,"line_start":2144,"line_end":2144,"column_start":12,"column_end":38},"name":"new_with_year_month_day_hr","qualname":"<Date>::new_with_year_month_day_hr","value":"pub fn new_with_year_month_day_hr(u32, i32, i32, i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1883},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":103107,"byte_end":103137,"line_start":2152,"line_end":2152,"column_start":12,"column_end":42},"name":"new_with_year_month_day_hr_min","qualname":"<Date>::new_with_year_month_day_hr_min","value":"pub fn new_with_year_month_day_hr_min(u32, i32, i32, i32, i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1886},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":103618,"byte_end":103652,"line_start":2166,"line_end":2166,"column_start":12,"column_end":46},"name":"new_with_year_month_day_hr_min_sec","qualname":"<Date>::new_with_year_month_day_hr_min_sec","value":"pub fn new_with_year_month_day_hr_min_sec(u32, i32, i32, i32, i32, i32)\n-> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1889},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":104151,"byte_end":104191,"line_start":2181,"line_end":2181,"column_start":12,"column_end":52},"name":"new_with_year_month_day_hr_min_sec_milli","qualname":"<Date>::new_with_year_month_day_hr_min_sec_milli","value":"pub fn new_with_year_month_day_hr_min_sec_milli(u32, i32, i32, i32, i32, i32,\n                                                i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":104641,"byte_end":104644,"line_start":2196,"line_end":2196,"column_start":12,"column_end":15},"name":"now","qualname":"<Date>::now","value":"pub fn now() -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Date.now()` method returns the number of milliseconds\n elapsed since January 1, 1970 00:00:00 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1895},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":105114,"byte_end":105119,"line_start":2204,"line_end":2204,"column_start":12,"column_end":17},"name":"parse","qualname":"<Date>::parse","value":"pub fn parse(&str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Date.parse()` method parses a string representation of a date, and returns the number of milliseconds\n since January 1, 1970, 00:00:00 UTC or `NaN` if the string is unrecognized or, in some cases,\n contains illegal date values (e.g. 2015-02-31).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1898},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":105447,"byte_end":105455,"line_start":2210,"line_end":2210,"column_start":12,"column_end":20},"name":"set_date","qualname":"<Date>::set_date","value":"pub fn set_date(&Self, u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setDate()` method sets the day of the Date object relative to the beginning of the currently set month.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1901},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":105816,"byte_end":105829,"line_start":2217,"line_end":2217,"column_start":12,"column_end":25},"name":"set_full_year","qualname":"<Date>::set_full_year","value":"pub fn set_full_year(&Self, u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setFullYear()` method sets the full year for a specified date according to local time.\n Returns new timestamp.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1904},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":106191,"byte_end":106215,"line_start":2224,"line_end":2224,"column_start":12,"column_end":36},"name":"set_full_year_with_month","qualname":"<Date>::set_full_year_with_month","value":"pub fn set_full_year_with_month(&Self, u32, i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setFullYear()` method sets the full year for a specified date according to local time.\n Returns new timestamp.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1907},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":106589,"byte_end":106618,"line_start":2231,"line_end":2231,"column_start":12,"column_end":41},"name":"set_full_year_with_month_date","qualname":"<Date>::set_full_year_with_month_date","value":"pub fn set_full_year_with_month_date(&Self, u32, i32, i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setFullYear()` method sets the full year for a specified date according to local time.\n Returns new timestamp.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1910},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":107106,"byte_end":107115,"line_start":2239,"line_end":2239,"column_start":12,"column_end":21},"name":"set_hours","qualname":"<Date>::set_hours","value":"pub fn set_hours(&Self, u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setHours()` method sets the hours for a specified date according to local time,\n and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented\n by the updated Date instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1913},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":107462,"byte_end":107478,"line_start":2245,"line_end":2245,"column_start":12,"column_end":28},"name":"set_milliseconds","qualname":"<Date>::set_milliseconds","value":"pub fn set_milliseconds(&Self, u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setMilliseconds()` method sets the milliseconds for a specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1916},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":107812,"byte_end":107823,"line_start":2251,"line_end":2251,"column_start":12,"column_end":23},"name":"set_minutes","qualname":"<Date>::set_minutes","value":"pub fn set_minutes(&Self, u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setMinutes()` method sets the minutes for a specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1919},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":108156,"byte_end":108165,"line_start":2257,"line_end":2257,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Date>::set_month","value":"pub fn set_month(&Self, u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setMonth()` method sets the month for a specified date according to the currently set year.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1922},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":108492,"byte_end":108503,"line_start":2263,"line_end":2263,"column_start":12,"column_end":23},"name":"set_seconds","qualname":"<Date>::set_seconds","value":"pub fn set_seconds(&Self, u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setSeconds()` method sets the seconds for a specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1925},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":108878,"byte_end":108886,"line_start":2270,"line_end":2270,"column_start":12,"column_end":20},"name":"set_time","qualname":"<Date>::set_time","value":"pub fn set_time(&Self, f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setTime()` method sets the Date object to the time represented by a number of milliseconds\n since January 1, 1970, 00:00:00 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1928},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":109233,"byte_end":109245,"line_start":2277,"line_end":2277,"column_start":12,"column_end":24},"name":"set_utc_date","qualname":"<Date>::set_utc_date","value":"pub fn set_utc_date(&Self, u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCDate()` method sets the day of the month for a specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1931},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":109588,"byte_end":109605,"line_start":2283,"line_end":2283,"column_start":12,"column_end":29},"name":"set_utc_full_year","qualname":"<Date>::set_utc_full_year","value":"pub fn set_utc_full_year(&Self, u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCFullYear()` method sets the full year for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1934},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":109949,"byte_end":109977,"line_start":2289,"line_end":2289,"column_start":12,"column_end":40},"name":"set_utc_full_year_with_month","qualname":"<Date>::set_utc_full_year_with_month","value":"pub fn set_utc_full_year_with_month(&Self, u32, i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCFullYear()` method sets the full year for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1937},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":110333,"byte_end":110366,"line_start":2295,"line_end":2295,"column_start":12,"column_end":45},"name":"set_utc_full_year_with_month_date","qualname":"<Date>::set_utc_full_year_with_month_date","value":"pub fn set_utc_full_year_with_month_date(&Self, u32, i32, i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCFullYear()` method sets the full year for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1940},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":110867,"byte_end":110880,"line_start":2303,"line_end":2303,"column_start":12,"column_end":25},"name":"set_utc_hours","qualname":"<Date>::set_utc_hours","value":"pub fn set_utc_hours(&Self, u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCHours()` method sets the hour for a specified date according to universal time,\n and returns the number of milliseconds since  January 1, 1970 00:00:00 UTC until the time\n represented by the updated Date instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1943},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":111248,"byte_end":111268,"line_start":2310,"line_end":2310,"column_start":12,"column_end":32},"name":"set_utc_milliseconds","qualname":"<Date>::set_utc_milliseconds","value":"pub fn set_utc_milliseconds(&Self, u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCMilliseconds()` method sets the milliseconds for a specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1946},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":111615,"byte_end":111630,"line_start":2316,"line_end":2316,"column_start":12,"column_end":27},"name":"set_utc_minutes","qualname":"<Date>::set_utc_minutes","value":"pub fn set_utc_minutes(&Self, u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCMinutes()` method sets the minutes for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1949},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":111964,"byte_end":111977,"line_start":2322,"line_end":2322,"column_start":12,"column_end":25},"name":"set_utc_month","qualname":"<Date>::set_utc_month","value":"pub fn set_utc_month(&Self, u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCMonth()` method sets the month for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1952},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":112317,"byte_end":112332,"line_start":2328,"line_end":2328,"column_start":12,"column_end":27},"name":"set_utc_seconds","qualname":"<Date>::set_utc_seconds","value":"pub fn set_utc_seconds(&Self, u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCSeconds()` method sets the seconds for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1955},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":112698,"byte_end":112712,"line_start":2335,"line_end":2335,"column_start":12,"column_end":26},"name":"to_date_string","qualname":"<Date>::to_date_string","value":"pub fn to_date_string(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toDateString()` method returns the date portion of a Date object\n in human readable form in American English.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1958},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":113243,"byte_end":113256,"line_start":2344,"line_end":2344,"column_start":12,"column_end":25},"name":"to_iso_string","qualname":"<Date>::to_iso_string","value":"pub fn to_iso_string(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toISOString()` method returns a string in simplified extended ISO format (ISO\n 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or\n ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset,\n as denoted by the suffix \"Z\"","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1961},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":113553,"byte_end":113560,"line_start":2350,"line_end":2350,"column_start":12,"column_end":19},"name":"to_json","qualname":"<Date>::to_json","value":"pub fn to_json(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toJSON()` method returns a string representation of the Date object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1964},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":114319,"byte_end":114340,"line_start":2362,"line_end":2362,"column_start":12,"column_end":33},"name":"to_locale_date_string","qualname":"<Date>::to_locale_date_string","value":"pub fn to_locale_date_string(&Self, &str, &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleDateString()` method returns a string with a language sensitive\n representation of the date portion of this date. The new locales and options\n arguments let applications specify the language whose formatting conventions\n should be used and allow to customize the behavior of the function.\n In older implementations, which ignore the locales and options arguments,\n the locale used and the form of the string\n returned are entirely implementation dependent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":115091,"byte_end":115107,"line_start":2374,"line_end":2374,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Date>::to_locale_string","value":"pub fn to_locale_string(&Self, &str, &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleString()` method returns a string with a language sensitive\n representation of this date. The new locales and options arguments\n let applications specify the language whose formatting conventions\n should be used and customize the behavior of the function.\n In older implementations, which ignore the locales\n and options arguments, the locale used and the form of the string\n returned are entirely implementation dependent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1970},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":115882,"byte_end":115903,"line_start":2385,"line_end":2385,"column_start":12,"column_end":33},"name":"to_locale_time_string","qualname":"<Date>::to_locale_time_string","value":"pub fn to_locale_time_string(&Self, &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleTimeString()` method returns a string with a language sensitive\n representation of the time portion of this date. The new locales and options\n arguments let applications specify the language whose formatting conventions should be\n used and customize the behavior of the function. In older implementations, which ignore\n the locales and options arguments, the locale used and the form of the string\n returned are entirely implementation dependent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1973},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":116233,"byte_end":116242,"line_start":2392,"line_end":2392,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Date>::to_string","value":"pub fn to_string(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing\n the specified Date object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1976},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":116599,"byte_end":116613,"line_start":2399,"line_end":2399,"column_start":12,"column_end":26},"name":"to_time_string","qualname":"<Date>::to_time_string","value":"pub fn to_time_string(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toTimeString()` method returns the time portion of a Date object in human\n readable form in American English.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1979},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":116935,"byte_end":116948,"line_start":2406,"line_end":2406,"column_start":12,"column_end":25},"name":"to_utc_string","qualname":"<Date>::to_utc_string","value":"pub fn to_utc_string(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toUTCString()` method converts a date to a string,\n using the UTC time zone.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1982},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117405,"byte_end":117408,"line_start":2415,"line_end":2415,"column_start":12,"column_end":15},"name":"utc","qualname":"<Date>::utc","value":"pub fn utc(f64, f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Date.UTC()` method accepts the same parameters as the\n longest form of the constructor, and returns the number of\n milliseconds in a `Date` object since January 1, 1970,\n 00:00:00, universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117716,"byte_end":117724,"line_start":2422,"line_end":2422,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Date>::value_of","value":"pub fn value_of(&Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method  returns the primitive value of\n a Date object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":94116,"byte_end":94131,"line_start":1984,"line_end":1984,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2146},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117878,"byte_end":117884,"line_start":2430,"line_end":2430,"column_start":14,"column_end":20},"name":"Object","qualname":"::Object","value":"Object {  }","parent":null,"children":[{"krate":0,"index":2147}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2054},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":118276,"byte_end":118282,"line_start":2438,"line_end":2438,"column_start":12,"column_end":18},"name":"assign","qualname":"<Object>::assign","value":"pub fn assign(&Object, &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.assign()` method is used to copy the values of all enumerable\n own properties from one or more source objects to a target object. It\n will return the target object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2057},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":118736,"byte_end":118743,"line_start":2446,"line_end":2446,"column_start":12,"column_end":19},"name":"assign2","qualname":"<Object>::assign2","value":"pub fn assign2(&Object, &Object, &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.assign()` method is used to copy the values of all enumerable\n own properties from one or more source objects to a target object. It\n will return the target object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2060},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":119216,"byte_end":119223,"line_start":2454,"line_end":2454,"column_start":12,"column_end":19},"name":"assign3","qualname":"<Object>::assign3","value":"pub fn assign3(&Object, &Object, &Object, &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.assign()` method is used to copy the values of all enumerable\n own properties from one or more source objects to a target object. It\n will return the target object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2063},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":119631,"byte_end":119642,"line_start":2462,"line_end":2462,"column_start":12,"column_end":23},"name":"constructor","qualname":"<Object>::constructor","value":"pub fn constructor(&Self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The constructor property returns a reference to the `Object` constructor\n function that created the instance object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2066},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":120003,"byte_end":120009,"line_start":2469,"line_end":2469,"column_start":12,"column_end":18},"name":"create","qualname":"<Object>::create","value":"pub fn create(&Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.create()` method creates a new object, using an existing\n object to provide the newly created object's prototype.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2069},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":120451,"byte_end":120466,"line_start":2477,"line_end":2477,"column_start":12,"column_end":27},"name":"define_property","qualname":"<Object>::define_property","value":"pub fn define_property(&Object, &JsValue, &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The static method `Object.defineProperty()` defines a new\n property directly on an object, or modifies an existing\n property on an object, and returns the object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2072},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":120910,"byte_end":120927,"line_start":2485,"line_end":2485,"column_start":12,"column_end":29},"name":"define_properties","qualname":"<Object>::define_properties","value":"pub fn define_properties(&Object, &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.defineProperties()` method defines new or modifies\n existing properties directly on an object, returning the\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2075},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":121462,"byte_end":121469,"line_start":2495,"line_end":2495,"column_start":12,"column_end":19},"name":"entries","qualname":"<Object>::entries","value":"pub fn entries(&Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.entries()` method returns an array of a given\n object's own enumerable property [key, value] pairs, in the\n same order as that provided by a for...in loop (the difference\n being that a for-in loop enumerates properties in the\n prototype chain as well).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2078},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":122082,"byte_end":122088,"line_start":2505,"line_end":2505,"column_start":12,"column_end":18},"name":"freeze","qualname":"<Object>::freeze","value":"pub fn freeze(&Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.freeze()` method freezes an object: that is, prevents new\n properties from being added to it; prevents existing properties from\n being removed; and prevents existing properties, or their enumerability,\n configurability, or writability, from being changed, it also prevents\n the prototype from being changed. The method returns the passed object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2081},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":122445,"byte_end":122457,"line_start":2512,"line_end":2512,"column_start":12,"column_end":24},"name":"from_entries","qualname":"<Object>::from_entries","value":"pub fn from_entries(&JsValue) -> Result<Object, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `Object.fromEntries()` method transforms a list of key-value pairs\n into an object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2084},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":122984,"byte_end":123011,"line_start":2521,"line_end":2521,"column_start":12,"column_end":39},"name":"get_own_property_descriptor","qualname":"<Object>::get_own_property_descriptor","value":"pub fn get_own_property_descriptor(&Object, &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `Object.getOwnPropertyDescriptor()` method returns a\n property descriptor for an own property (that is, one directly\n present on an object and not in the object's prototype chain)\n of a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2087},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":123421,"byte_end":123449,"line_start":2528,"line_end":2528,"column_start":12,"column_end":40},"name":"get_own_property_descriptors","qualname":"<Object>::get_own_property_descriptors","value":"pub fn get_own_property_descriptors(&Object) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `Object.getOwnPropertyDescriptors()` method returns all own\n property descriptors of a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2090},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":123920,"byte_end":123942,"line_start":2536,"line_end":2536,"column_start":12,"column_end":34},"name":"get_own_property_names","qualname":"<Object>::get_own_property_names","value":"pub fn get_own_property_names(&Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.getOwnPropertyNames()` method returns an array of\n all properties (including non-enumerable properties except for\n those which use Symbol) found directly upon a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2093},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":124344,"byte_end":124368,"line_start":2543,"line_end":2543,"column_start":12,"column_end":36},"name":"get_own_property_symbols","qualname":"<Object>::get_own_property_symbols","value":"pub fn get_own_property_symbols(&Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.getOwnPropertySymbols()` method returns an array of\n all symbol properties found directly upon a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2096},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":124782,"byte_end":124798,"line_start":2551,"line_end":2551,"column_start":12,"column_end":28},"name":"get_prototype_of","qualname":"<Object>::get_prototype_of","value":"pub fn get_prototype_of(&JsValue) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.getPrototypeOf()` method returns the prototype\n (i.e. the value of the internal [[Prototype]] property) of the\n specified object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2099},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":125211,"byte_end":125227,"line_start":2559,"line_end":2559,"column_start":12,"column_end":28},"name":"has_own_property","qualname":"<Object>::has_own_property","value":"pub fn has_own_property(&Self, &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `hasOwnProperty()` method returns a boolean indicating whether the\n object has the specified property as its own property (as opposed to\n inheriting it).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2102},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":125542,"byte_end":125544,"line_start":2565,"line_end":2565,"column_start":12,"column_end":14},"name":"is","qualname":"<Object>::is","value":"pub fn is(&JsValue, &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.is()` method determines whether two values are the same value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2105},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":125952,"byte_end":125965,"line_start":2572,"line_end":2572,"column_start":12,"column_end":25},"name":"is_extensible","qualname":"<Object>::is_extensible","value":"pub fn is_extensible(&Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.isExtensible()` method determines if an object is extensible\n (whether it can have new properties added to it).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2108},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":126272,"byte_end":126281,"line_start":2578,"line_end":2578,"column_start":12,"column_end":21},"name":"is_frozen","qualname":"<Object>::is_frozen","value":"pub fn is_frozen(&Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.isFrozen()` determines if an object is frozen.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2111},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":126595,"byte_end":126604,"line_start":2584,"line_end":2584,"column_start":12,"column_end":21},"name":"is_sealed","qualname":"<Object>::is_sealed","value":"pub fn is_sealed(&Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.isSealed()` method determines if an object is sealed.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2114},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":126944,"byte_end":126959,"line_start":2591,"line_end":2591,"column_start":12,"column_end":27},"name":"is_prototype_of","qualname":"<Object>::is_prototype_of","value":"pub fn is_prototype_of(&Self, &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `isPrototypeOf()` method checks if an object exists in another\n object's prototype chain.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2117},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":127334,"byte_end":127338,"line_start":2598,"line_end":2598,"column_start":12,"column_end":16},"name":"keys","qualname":"<Object>::keys","value":"pub fn keys(&Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.keys()` method returns an array of a given object's property\n names, in the same order as we get with a normal loop.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":127598,"byte_end":127601,"line_start":2604,"line_end":2604,"column_start":12,"column_end":15},"name":"new","qualname":"<Object>::new","value":"pub fn new() -> Object","parent":null,"children":[],"decl_id":null,"docs":" The [`Object`] constructor creates an object wrapper.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2123},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":128018,"byte_end":128036,"line_start":2612,"line_end":2612,"column_start":12,"column_end":30},"name":"prevent_extensions","qualname":"<Object>::prevent_extensions","value":"pub fn prevent_extensions(&Object)","parent":null,"children":[],"decl_id":null,"docs":" The `Object.preventExtensions()` method prevents new properties from\n ever being added to an object (i.e. prevents future extensions to the\n object).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2126},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":128400,"byte_end":128422,"line_start":2619,"line_end":2619,"column_start":12,"column_end":34},"name":"property_is_enumerable","qualname":"<Object>::property_is_enumerable","value":"pub fn property_is_enumerable(&Self, &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `propertyIsEnumerable()` method returns a Boolean indicating\n whether the specified property is enumerable.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2129},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":128919,"byte_end":128923,"line_start":2628,"line_end":2628,"column_start":12,"column_end":16},"name":"seal","qualname":"<Object>::seal","value":"pub fn seal(&Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.seal()` method seals an object, preventing new properties\n from being added to it and marking all existing properties as\n non-configurable.  Values of present properties can still be changed as\n long as they are writable.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2132},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":129353,"byte_end":129369,"line_start":2636,"line_end":2636,"column_start":12,"column_end":28},"name":"set_prototype_of","qualname":"<Object>::set_prototype_of","value":"pub fn set_prototype_of(&Object, &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.setPrototypeOf()` method sets the prototype (i.e., the\n internal `[[Prototype]]` property) of a specified object to another\n object or `null`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2135},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":129807,"byte_end":129823,"line_start":2644,"line_end":2644,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Object>::to_locale_string","value":"pub fn to_locale_string(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleString()` method returns a string representing the object.\n This method is meant to be overridden by derived objects for\n locale-specific purposes.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2138},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":130120,"byte_end":130129,"line_start":2650,"line_end":2650,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Object>::to_string","value":"pub fn to_string(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2141},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":130442,"byte_end":130450,"line_start":2657,"line_end":2657,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Object>::value_of","value":"pub fn value_of(&Self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of the\n specified object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2144},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":130950,"byte_end":130956,"line_start":2666,"line_end":2666,"column_start":12,"column_end":18},"name":"values","qualname":"<Object>::values","value":"pub fn values(&Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.values()` method returns an array of a given object's own\n enumerable property values, in the same order as that provided by a\n `for...in` loop (the difference being that a for-in loop enumerates\n properties in the prototype chain as well).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":117760,"byte_end":117775,"line_start":2426,"line_end":2426,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131205,"byte_end":131213,"line_start":2675,"line_end":2675,"column_start":12,"column_end":20},"name":"try_from","qualname":"<Object>::try_from","value":"pub fn try_from(&JsValue) -> Option<&Object>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `Object` value of this JS value if it's an instance of an\n object.","sig":null,"attributes":[{"value":"/ Returns the `Object` value of this JS value if it's an instance of an","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131005,"byte_end":131078,"line_start":2670,"line_end":2670,"column_start":5,"column_end":78}},{"value":"/ object.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131083,"byte_end":131094,"line_start":2671,"line_end":2671,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131099,"byte_end":131102,"line_start":2672,"line_end":2672,"column_start":5,"column_end":8}},{"value":"/ If this JS value is not an instance of an object then this returns","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131107,"byte_end":131177,"line_start":2673,"line_end":2673,"column_start":5,"column_end":75}},{"value":"/ `None`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131182,"byte_end":131193,"line_start":2674,"line_end":2674,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2211},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131674,"byte_end":131679,"line_start":2698,"line_end":2698,"column_start":14,"column_end":19},"name":"Proxy","qualname":"::Proxy","value":"Proxy {  }","parent":null,"children":[{"krate":0,"index":2212}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131546,"byte_end":131561,"line_start":2694,"line_end":2694,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131546,"byte_end":131561,"line_start":2694,"line_end":2694,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131546,"byte_end":131561,"line_start":2694,"line_end":2694,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2206},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":132031,"byte_end":132034,"line_start":2706,"line_end":2706,"column_start":12,"column_end":15},"name":"new","qualname":"<Proxy>::new","value":"pub fn new(&JsValue, &Object) -> Proxy","parent":null,"children":[],"decl_id":null,"docs":" The [`Proxy`] object is used to define custom behavior for fundamental\n operations (e.g. property lookup, assignment, enumeration, function\n invocation, etc).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131546,"byte_end":131561,"line_start":2694,"line_end":2694,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131546,"byte_end":131561,"line_start":2694,"line_end":2694,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2209},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":132368,"byte_end":132377,"line_start":2713,"line_end":2713,"column_start":12,"column_end":21},"name":"revocable","qualname":"<Proxy>::revocable","value":"pub fn revocable(&JsValue, &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Proxy.revocable()` method is used to create a revocable [`Proxy`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131546,"byte_end":131561,"line_start":2694,"line_end":2694,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131546,"byte_end":131561,"line_start":2694,"line_end":2694,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2285},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":132861,"byte_end":132871,"line_start":2725,"line_end":2725,"column_start":14,"column_end":24},"name":"RangeError","qualname":"::RangeError","value":"RangeError {  }","parent":null,"children":[{"krate":0,"index":2286}],"decl_id":null,"docs":" The `RangeError` object indicates an error when a value is not in the set\n or range of allowed values.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":132442,"byte_end":132457,"line_start":2717,"line_end":2717,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":132442,"byte_end":132457,"line_start":2717,"line_end":2717,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":132442,"byte_end":132457,"line_start":2717,"line_end":2717,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2283},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":133165,"byte_end":133168,"line_start":2732,"line_end":2732,"column_start":12,"column_end":15},"name":"new","qualname":"<RangeError>::new","value":"pub fn new(&str) -> RangeError","parent":null,"children":[],"decl_id":null,"docs":" The `RangeError` object indicates an error when a value is not in the set\n or range of allowed values.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":132442,"byte_end":132457,"line_start":2717,"line_end":2717,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":132442,"byte_end":132457,"line_start":2717,"line_end":2717,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2366},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":133637,"byte_end":133651,"line_start":2744,"line_end":2744,"column_start":14,"column_end":28},"name":"ReferenceError","qualname":"::ReferenceError","value":"ReferenceError {  }","parent":null,"children":[{"krate":0,"index":2367}],"decl_id":null,"docs":" The `ReferenceError` object represents an error when a non-existent\n variable is referenced.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":133220,"byte_end":133235,"line_start":2736,"line_end":2736,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":133220,"byte_end":133235,"line_start":2736,"line_end":2736,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":133220,"byte_end":133235,"line_start":2736,"line_end":2736,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2364},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":133939,"byte_end":133942,"line_start":2751,"line_end":2751,"column_start":12,"column_end":15},"name":"new","qualname":"<ReferenceError>::new","value":"pub fn new(&str) -> ReferenceError","parent":null,"children":[],"decl_id":null,"docs":" The `ReferenceError` object represents an error when a non-existent\n variable is referenced.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":133220,"byte_end":133235,"line_start":2736,"line_end":2736,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":133220,"byte_end":133235,"line_start":2736,"line_end":2736,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134013,"byte_end":134020,"line_start":2755,"line_end":2755,"column_start":9,"column_end":16},"name":"Reflect","qualname":"::Reflect","value":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":2379},{"krate":0,"index":2381},{"krate":0,"index":2383},{"krate":0,"index":2385},{"krate":0,"index":2387},{"krate":0,"index":2389},{"krate":0,"index":2391},{"krate":0,"index":2393},{"krate":0,"index":2395},{"krate":0,"index":2397},{"krate":0,"index":2399},{"krate":0,"index":2401},{"krate":0,"index":2403},{"krate":0,"index":2405},{"krate":0,"index":2407},{"krate":0,"index":2409},{"krate":0,"index":2411},{"krate":0,"index":2413},{"krate":0,"index":2415}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":133980,"byte_end":134004,"line_start":2754,"line_end":2754,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":2379},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134417,"byte_end":134422,"line_start":2766,"line_end":2766,"column_start":16,"column_end":21},"name":"apply","qualname":"::Reflect::apply","value":"pub fn apply(&Function, &JsValue, &Array) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.apply()` method calls a target function with\n arguments as specified.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2381},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":135022,"byte_end":135031,"line_start":2778,"line_end":2778,"column_start":16,"column_end":25},"name":"construct","qualname":"::Reflect::construct","value":"pub fn construct(&Function, &Array) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.construct()` method acts like the new operator, but\n as a function.  It is equivalent to calling `new target(...args)`. It\n gives also the added option to specify a different prototype.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2383},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":135580,"byte_end":135605,"line_start":2786,"line_end":2786,"column_start":16,"column_end":41},"name":"construct_with_new_target","qualname":"::Reflect::construct_with_new_target","value":"pub fn construct_with_new_target(&Function, &Array, &Function)\n-> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.construct()` method acts like the new operator, but\n as a function.  It is equivalent to calling `new target(...args)`. It\n gives also the added option to specify a different prototype.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2385},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":136122,"byte_end":136137,"line_start":2797,"line_end":2797,"column_start":16,"column_end":31},"name":"define_property","qualname":"::Reflect::define_property","value":"pub fn define_property(&Object, &JsValue, &Object) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.defineProperty()` method is like\n `Object.defineProperty()` but returns a `Boolean`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2387},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":136666,"byte_end":136681,"line_start":2808,"line_end":2808,"column_start":16,"column_end":31},"name":"delete_property","qualname":"::Reflect::delete_property","value":"pub fn delete_property(&Object, &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.deleteProperty()` method allows to delete\n properties.  It is like the `delete` operator as a function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2389},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":137091,"byte_end":137094,"line_start":2815,"line_end":2815,"column_start":16,"column_end":19},"name":"get","qualname":"::Reflect::get","value":"pub fn get(&JsValue, &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.get()` method works like getting a property from\n an object (`target[propertyKey]`) as a function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2391},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":137356,"byte_end":137363,"line_start":2820,"line_end":2820,"column_start":16,"column_end":23},"name":"get_f64","qualname":"::Reflect::get_f64","value":"pub fn get_f64(&JsValue, f64) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`get`](fn.get.html)\n except the key is an `f64`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2393},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":137619,"byte_end":137626,"line_start":2825,"line_end":2825,"column_start":16,"column_end":23},"name":"get_u32","qualname":"::Reflect::get_u32","value":"pub fn get_u32(&JsValue, u32) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`get`](fn.get.html)\n except the key is a `u32`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2395},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":138198,"byte_end":138225,"line_start":2833,"line_end":2833,"column_start":16,"column_end":43},"name":"get_own_property_descriptor","qualname":"::Reflect::get_own_property_descriptor","value":"pub fn get_own_property_descriptor(&Object, &JsValue)\n-> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.getOwnPropertyDescriptor()` method is similar to\n `Object.getOwnPropertyDescriptor()`. It returns a property descriptor\n of the given property if it exists on the object, `undefined` otherwise.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2397},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":138834,"byte_end":138850,"line_start":2845,"line_end":2845,"column_start":16,"column_end":32},"name":"get_prototype_of","qualname":"::Reflect::get_prototype_of","value":"pub fn get_prototype_of(&JsValue) -> Result<Object, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.getPrototypeOf()` method is almost the same\n method as `Object.getPrototypeOf()`. It returns the prototype\n (i.e. the value of the internal `[[Prototype]]` property) of\n the specified object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2399},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":139206,"byte_end":139209,"line_start":2852,"line_end":2852,"column_start":16,"column_end":19},"name":"has","qualname":"::Reflect::has","value":"pub fn has(&JsValue, &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.has()` method works like the in operator as a\n function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2401},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":139756,"byte_end":139769,"line_start":2860,"line_end":2860,"column_start":16,"column_end":29},"name":"is_extensible","qualname":"::Reflect::is_extensible","value":"pub fn is_extensible(&Object) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.isExtensible()` method determines if an object is\n extensible (whether it can have new properties added to it). It is\n similar to `Object.isExtensible()`, but with some differences.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2403},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":140166,"byte_end":140174,"line_start":2867,"line_end":2867,"column_start":16,"column_end":24},"name":"own_keys","qualname":"::Reflect::own_keys","value":"pub fn own_keys(&JsValue) -> Result<Array, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.ownKeys()` method returns an array of the\n target object's own property keys.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2405},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":140750,"byte_end":140768,"line_start":2876,"line_end":2876,"column_start":16,"column_end":34},"name":"prevent_extensions","qualname":"::Reflect::prevent_extensions","value":"pub fn prevent_extensions(&Object) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.preventExtensions()` method prevents new\n properties from ever being added to an object (i.e. prevents\n future extensions to the object). It is similar to\n `Object.preventExtensions()`, but with some differences.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2407},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":141123,"byte_end":141126,"line_start":2883,"line_end":2883,"column_start":16,"column_end":19},"name":"set","qualname":"::Reflect::set","value":"pub fn set(&JsValue, &JsValue, &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.set()` method works like setting a\n property on an object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2409},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":141458,"byte_end":141465,"line_start":2892,"line_end":2892,"column_start":16,"column_end":23},"name":"set_f64","qualname":"::Reflect::set_f64","value":"pub fn set_f64(&JsValue, f64, &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`set`](fn.set.html)\n except the key is an `f64`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2411},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":141791,"byte_end":141798,"line_start":2901,"line_end":2901,"column_start":16,"column_end":23},"name":"set_u32","qualname":"::Reflect::set_u32","value":"pub fn set_u32(&JsValue, u32, &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`set`](fn.set.html)\n except the key is a `u32`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2413},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":142252,"byte_end":142269,"line_start":2912,"line_end":2912,"column_start":16,"column_end":33},"name":"set_with_receiver","qualname":"::Reflect::set_with_receiver","value":"pub fn set_with_receiver(&JsValue, &JsValue, &JsValue, &JsValue)\n-> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.set()` method works like setting a\n property on an object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2415},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":142942,"byte_end":142958,"line_start":2926,"line_end":2926,"column_start":16,"column_end":32},"name":"set_prototype_of","qualname":"::Reflect::set_prototype_of","value":"pub fn set_prototype_of(&Object, &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.setPrototypeOf()` method is the same\n method as `Object.setPrototypeOf()`. It sets the prototype\n (i.e., the internal `[[Prototype]]` property) of a specified\n object to another object or to null.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":134061,"byte_end":134076,"line_start":2759,"line_end":2759,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2560},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143193,"byte_end":143199,"line_start":2935,"line_end":2935,"column_start":14,"column_end":20},"name":"RegExp","qualname":"::RegExp","value":"RegExp {  }","parent":null,"children":[{"krate":0,"index":2561}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2477},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143493,"byte_end":143497,"line_start":2942,"line_end":2942,"column_start":12,"column_end":16},"name":"exec","qualname":"<RegExp>::exec","value":"pub fn exec(&Self, &str) -> Option<Array>","parent":null,"children":[],"decl_id":null,"docs":" The `exec()` method executes a search for a match in a specified\n string. Returns a result array, or null.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2480},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143840,"byte_end":143845,"line_start":2949,"line_end":2949,"column_start":12,"column_end":17},"name":"flags","qualname":"<RegExp>::flags","value":"pub fn flags(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The flags property returns a string consisting of the flags of\n the current regular expression object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2483},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":144250,"byte_end":144256,"line_start":2957,"line_end":2957,"column_start":12,"column_end":18},"name":"global","qualname":"<RegExp>::global","value":"pub fn global(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The global property indicates whether or not the \"g\" flag is\n used with the regular expression. global is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2486},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":144691,"byte_end":144702,"line_start":2965,"line_end":2965,"column_start":12,"column_end":23},"name":"ignore_case","qualname":"<RegExp>::ignore_case","value":"pub fn ignore_case(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The ignoreCase property indicates whether or not the \"i\" flag\n is used with the regular expression. ignoreCase is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2489},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":145146,"byte_end":145151,"line_start":2974,"line_end":2974,"column_start":12,"column_end":17},"name":"input","qualname":"<RegExp>::input","value":"pub fn input() -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard input property is a static property of\n regular expressions that contains the string against which a\n regular expression is matched. RegExp.$_ is an alias for this\n property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2492},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":145528,"byte_end":145538,"line_start":2981,"line_end":2981,"column_start":12,"column_end":22},"name":"last_index","qualname":"<RegExp>::last_index","value":"pub fn last_index(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The lastIndex is a read/write integer property of regular expression\n instances that specifies the index at which to start the next match.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2495},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":145923,"byte_end":145937,"line_start":2988,"line_end":2988,"column_start":12,"column_end":26},"name":"set_last_index","qualname":"<RegExp>::set_last_index","value":"pub fn set_last_index(&Self, u32)","parent":null,"children":[],"decl_id":null,"docs":" The lastIndex is a read/write integer property of regular expression\n instances that specifies the index at which to start the next match.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2498},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":146393,"byte_end":146403,"line_start":2996,"line_end":2996,"column_start":12,"column_end":22},"name":"last_match","qualname":"<RegExp>::last_match","value":"pub fn last_match() -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard lastMatch property is a static and read-only\n property of regular expressions that contains the last matched\n characters. `RegExp.$&` is an alias for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2501},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":146873,"byte_end":146883,"line_start":3005,"line_end":3005,"column_start":12,"column_end":22},"name":"last_paren","qualname":"<RegExp>::last_paren","value":"pub fn last_paren() -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard lastParen property is a static and read-only\n property of regular expressions that contains the last\n parenthesized substring match, if any. `RegExp.$+` is an alias\n for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2504},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":147358,"byte_end":147370,"line_start":3014,"line_end":3014,"column_start":12,"column_end":24},"name":"left_context","qualname":"<RegExp>::left_context","value":"pub fn left_context() -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard leftContext property is a static and\n read-only property of regular expressions that contains the\n substring preceding the most recent match. `RegExp.$`` is an\n alias for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2507},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":147771,"byte_end":147780,"line_start":3022,"line_end":3022,"column_start":12,"column_end":21},"name":"multiline","qualname":"<RegExp>::multiline","value":"pub fn multiline(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The multiline property indicates whether or not the \"m\" flag\n is used with the regular expression. multiline is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2510},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":148207,"byte_end":148209,"line_start":3030,"line_end":3030,"column_start":12,"column_end":14},"name":"n1","qualname":"<RegExp>::n1","value":"pub fn n1() -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard $1, $2, $3, $4, $5, $6, $7, $8, $9 properties\n are static and read-only properties of regular expressions\n that contain parenthesized substring matches.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2513},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":148307,"byte_end":148309,"line_start":3032,"line_end":3032,"column_start":12,"column_end":14},"name":"n2","qualname":"<RegExp>::n2","value":"pub fn n2() -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2516},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":148407,"byte_end":148409,"line_start":3034,"line_end":3034,"column_start":12,"column_end":14},"name":"n3","qualname":"<RegExp>::n3","value":"pub fn n3() -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2519},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":148507,"byte_end":148509,"line_start":3036,"line_end":3036,"column_start":12,"column_end":14},"name":"n4","qualname":"<RegExp>::n4","value":"pub fn n4() -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2522},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":148607,"byte_end":148609,"line_start":3038,"line_end":3038,"column_start":12,"column_end":14},"name":"n5","qualname":"<RegExp>::n5","value":"pub fn n5() -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2525},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":148707,"byte_end":148709,"line_start":3040,"line_end":3040,"column_start":12,"column_end":14},"name":"n6","qualname":"<RegExp>::n6","value":"pub fn n6() -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2528},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":148807,"byte_end":148809,"line_start":3042,"line_end":3042,"column_start":12,"column_end":14},"name":"n7","qualname":"<RegExp>::n7","value":"pub fn n7() -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2531},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":148907,"byte_end":148909,"line_start":3044,"line_end":3044,"column_start":12,"column_end":14},"name":"n8","qualname":"<RegExp>::n8","value":"pub fn n8() -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2534},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":149007,"byte_end":149009,"line_start":3046,"line_end":3046,"column_start":12,"column_end":14},"name":"n9","qualname":"<RegExp>::n9","value":"pub fn n9() -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2537},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":149298,"byte_end":149301,"line_start":3052,"line_end":3052,"column_start":12,"column_end":15},"name":"new","qualname":"<RegExp>::new","value":"pub fn new(&str, &str) -> RegExp","parent":null,"children":[],"decl_id":null,"docs":" The `RegExp` constructor creates a regular expression object for matching text with a pattern.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2540},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":149385,"byte_end":149395,"line_start":3054,"line_end":3054,"column_start":12,"column_end":22},"name":"new_regexp","qualname":"<RegExp>::new_regexp","value":"pub fn new_regexp(&RegExp, &str) -> RegExp","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2543},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":149900,"byte_end":149913,"line_start":3063,"line_end":3063,"column_start":12,"column_end":25},"name":"right_context","qualname":"<RegExp>::right_context","value":"pub fn right_context() -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard rightContext property is a static and\n read-only property of regular expressions that contains the\n substring following the most recent match. `RegExp.$'` is an\n alias for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2546},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":150295,"byte_end":150301,"line_start":3071,"line_end":3071,"column_start":12,"column_end":18},"name":"source","qualname":"<RegExp>::source","value":"pub fn source(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The source property returns a String containing the source\n text of the regexp object, and it doesn't contain the two\n forward slashes on both sides and any flags.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2549},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":150796,"byte_end":150802,"line_start":3081,"line_end":3081,"column_start":12,"column_end":18},"name":"sticky","qualname":"<RegExp>::sticky","value":"pub fn sticky(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The sticky property reflects whether or not the search is\n sticky (searches in strings only from the index indicated by\n the lastIndex property of this regular expression). sticky is\n a read-only property of an individual regular expression\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2552},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151147,"byte_end":151151,"line_start":3089,"line_end":3089,"column_start":12,"column_end":16},"name":"test","qualname":"<RegExp>::test","value":"pub fn test(&Self, &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `test()` method executes a search for a match between a\n regular expression and a specified string. Returns true or\n false.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2555},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151476,"byte_end":151485,"line_start":3096,"line_end":3096,"column_start":12,"column_end":21},"name":"to_string","qualname":"<RegExp>::to_string","value":"pub fn to_string(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the\n regular expression.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2558},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151891,"byte_end":151898,"line_start":3104,"line_end":3104,"column_start":12,"column_end":19},"name":"unicode","qualname":"<RegExp>::unicode","value":"pub fn unicode(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The unicode property indicates whether or not the \"u\" flag is\n used with a regular expression. unicode is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":143042,"byte_end":143057,"line_start":2931,"line_end":2931,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2653},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":152086,"byte_end":152089,"line_start":3112,"line_end":3112,"column_start":14,"column_end":17},"name":"Set","qualname":"::Set","value":"Set {  }","parent":null,"children":[{"krate":0,"index":2654}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2633},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":152369,"byte_end":152372,"line_start":3119,"line_end":3119,"column_start":12,"column_end":15},"name":"add","qualname":"<Set>::add","value":"pub fn add(&Self, &JsValue) -> Set","parent":null,"children":[],"decl_id":null,"docs":" The `add()` method appends a new element with a specified value to the\n end of a [`Set`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2636},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":152651,"byte_end":152656,"line_start":3125,"line_end":3125,"column_start":12,"column_end":17},"name":"clear","qualname":"<Set>::clear","value":"pub fn clear(&Self)","parent":null,"children":[],"decl_id":null,"docs":" The `clear()` method removes all elements from a [`Set`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2639},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":152930,"byte_end":152936,"line_start":3132,"line_end":3132,"column_start":12,"column_end":18},"name":"delete","qualname":"<Set>::delete","value":"pub fn delete(&Self, &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a [`Set`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2642},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":153291,"byte_end":153299,"line_start":3139,"line_end":3139,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Set>::for_each","value":"pub fn for_each(&Self, &mut FnMut(JsValue, JsValue, Set) -> ())","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once for each value\n in the Set object, in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2645},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":153671,"byte_end":153674,"line_start":3146,"line_end":3146,"column_start":12,"column_end":15},"name":"has","qualname":"<Set>::has","value":"pub fn has(&Self, &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an element with\n the specified value exists in a [`Set`] object or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":154004,"byte_end":154007,"line_start":3153,"line_end":3153,"column_start":12,"column_end":15},"name":"new","qualname":"<Set>::new","value":"pub fn new(&JsValue) -> Set","parent":null,"children":[],"decl_id":null,"docs":" The [`Set`] object lets you store unique values of any type, whether\n primitive values or object references.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2651},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":154311,"byte_end":154315,"line_start":3160,"line_end":3160,"column_start":12,"column_end":16},"name":"size","qualname":"<Set>::size","value":"pub fn size(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The size accessor property returns the number of elements in a [`Set`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":151933,"byte_end":151948,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2667},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":154950,"byte_end":154957,"line_start":3174,"line_end":3174,"column_start":12,"column_end":19},"name":"entries","qualname":"<Set>::entries","value":"pub fn entries(&Self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `entries()` method returns a new Iterator object that contains an\n array of [value, value] for each element in the Set object, in insertion\n order. For Set objects there is no key like in Map objects. However, to\n keep the API similar to the Map object, each entry has the same value\n for its key and value here, so that an array [value, value] is returned.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":154354,"byte_end":154369,"line_start":3164,"line_end":3164,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":154354,"byte_end":154369,"line_start":3164,"line_end":3164,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2670},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":155322,"byte_end":155326,"line_start":3182,"line_end":3182,"column_start":12,"column_end":16},"name":"keys","qualname":"<Set>::keys","value":"pub fn keys(&Self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `keys()` method is an alias for this method (for similarity with\n Map objects); it behaves exactly the same and returns values\n of Set elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":154354,"byte_end":154369,"line_start":3164,"line_end":3164,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":154354,"byte_end":154369,"line_start":3164,"line_end":3164,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2673},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":155668,"byte_end":155674,"line_start":3189,"line_end":3189,"column_start":12,"column_end":18},"name":"values","qualname":"<Set>::values","value":"pub fn values(&Self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `values()` method returns a new Iterator object that contains the\n values for each element in the Set object in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":154354,"byte_end":154369,"line_start":3164,"line_end":3164,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":154354,"byte_end":154369,"line_start":3164,"line_end":3164,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2743},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":156201,"byte_end":156212,"line_start":3202,"line_end":3202,"column_start":14,"column_end":25},"name":"SyntaxError","qualname":"::SyntaxError","value":"SyntaxError {  }","parent":null,"children":[{"krate":0,"index":2744}],"decl_id":null,"docs":" A `SyntaxError` is thrown when the JavaScript engine encounters tokens or\n token order that does not conform to the syntax of the language when\n parsing code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":155717,"byte_end":155732,"line_start":3193,"line_end":3193,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":155717,"byte_end":155732,"line_start":3193,"line_end":3193,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":155717,"byte_end":155732,"line_start":3193,"line_end":3193,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2741},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":156570,"byte_end":156573,"line_start":3210,"line_end":3210,"column_start":12,"column_end":15},"name":"new","qualname":"<SyntaxError>::new","value":"pub fn new(&str) -> SyntaxError","parent":null,"children":[],"decl_id":null,"docs":" A `SyntaxError` is thrown when the JavaScript engine encounters tokens or\n token order that does not conform to the syntax of the language when\n parsing code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":155717,"byte_end":155732,"line_start":3193,"line_end":3193,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":155717,"byte_end":155732,"line_start":3193,"line_end":3193,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2824},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":157021,"byte_end":157030,"line_start":3222,"line_end":3222,"column_start":14,"column_end":23},"name":"TypeError","qualname":"::TypeError","value":"TypeError {  }","parent":null,"children":[{"krate":0,"index":2825}],"decl_id":null,"docs":" The `TypeError` object represents an error when a value is not of the\n expected type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":156621,"byte_end":156636,"line_start":3214,"line_end":3214,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":156621,"byte_end":156636,"line_start":3214,"line_end":3214,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":156621,"byte_end":156636,"line_start":3214,"line_end":3214,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2822},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":157306,"byte_end":157309,"line_start":3229,"line_end":3229,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeError>::new","value":"pub fn new(&str) -> TypeError","parent":null,"children":[],"decl_id":null,"docs":" The `TypeError` object represents an error when a value is not of the\n expected type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":156621,"byte_end":156636,"line_start":3214,"line_end":3214,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":156621,"byte_end":156636,"line_start":3214,"line_end":3214,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2905},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":157790,"byte_end":157798,"line_start":3241,"line_end":3241,"column_start":14,"column_end":22},"name":"UriError","qualname":"::UriError","value":"UriError {  }","parent":null,"children":[{"krate":0,"index":2906}],"decl_id":null,"docs":" The `URIError` object represents an error when a global URI handling\n function was used in a wrong way.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":157354,"byte_end":157369,"line_start":3233,"line_end":3233,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":157354,"byte_end":157369,"line_start":3233,"line_end":3233,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":157354,"byte_end":157369,"line_start":3233,"line_end":3233,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2903},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":158114,"byte_end":158117,"line_start":3248,"line_end":3248,"column_start":12,"column_end":15},"name":"new","qualname":"<UriError>::new","value":"pub fn new(&str) -> UriError","parent":null,"children":[],"decl_id":null,"docs":" The `URIError` object represents an error when a global URI handling\n function was used in a wrong way.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":157354,"byte_end":157369,"line_start":3233,"line_end":3233,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":157354,"byte_end":157369,"line_start":3233,"line_end":3233,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2992},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":158325,"byte_end":158332,"line_start":3256,"line_end":3256,"column_start":14,"column_end":21},"name":"WeakMap","qualname":"::WeakMap","value":"WeakMap {  }","parent":null,"children":[{"krate":0,"index":2993}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":158160,"byte_end":158175,"line_start":3252,"line_end":3252,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":158160,"byte_end":158175,"line_start":3252,"line_end":3252,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":158160,"byte_end":158175,"line_start":3252,"line_end":3252,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2978},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":158694,"byte_end":158697,"line_start":3264,"line_end":3264,"column_start":12,"column_end":15},"name":"new","qualname":"<WeakMap>::new","value":"pub fn new() -> WeakMap","parent":null,"children":[],"decl_id":null,"docs":" The [`WeakMap`] object is a collection of key/value pairs in which the\n keys are weakly referenced.  The keys must be objects and the values can\n be arbitrary values.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":158160,"byte_end":158175,"line_start":3252,"line_end":3252,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":158160,"byte_end":158175,"line_start":3252,"line_end":3252,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2981},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":159025,"byte_end":159028,"line_start":3271,"line_end":3271,"column_start":12,"column_end":15},"name":"set","qualname":"<WeakMap>::set","value":"pub fn set(&Self, &Object, &JsValue) -> WeakMap","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method sets the value for the key in the [`WeakMap`] object.\n Returns the [`WeakMap`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":158160,"byte_end":158175,"line_start":3252,"line_end":3252,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":158160,"byte_end":158175,"line_start":3252,"line_end":3252,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2984},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":159355,"byte_end":159358,"line_start":3278,"line_end":3278,"column_start":12,"column_end":15},"name":"get","qualname":"<WeakMap>::get","value":"pub fn get(&Self, &Object) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `get()` method returns a specified by key element\n from a [`WeakMap`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":158160,"byte_end":158175,"line_start":3252,"line_end":3252,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":158160,"byte_end":158175,"line_start":3252,"line_end":3252,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2987},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":159718,"byte_end":159721,"line_start":3285,"line_end":3285,"column_start":12,"column_end":15},"name":"has","qualname":"<WeakMap>::has","value":"pub fn has(&Self, &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an element with\n the specified key exists in the [`WeakMap`] object or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":158160,"byte_end":158175,"line_start":3252,"line_end":3252,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":158160,"byte_end":158175,"line_start":3252,"line_end":3252,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2990},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":160029,"byte_end":160035,"line_start":3292,"line_end":3292,"column_start":12,"column_end":18},"name":"delete","qualname":"<WeakMap>::delete","value":"pub fn delete(&Self, &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a [`WeakMap`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":158160,"byte_end":158175,"line_start":3252,"line_end":3252,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":158160,"byte_end":158175,"line_start":3252,"line_end":3252,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":3076},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":160249,"byte_end":160256,"line_start":3300,"line_end":3300,"column_start":14,"column_end":21},"name":"WeakSet","qualname":"::WeakSet","value":"WeakSet {  }","parent":null,"children":[{"krate":0,"index":3077}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":160089,"byte_end":160104,"line_start":3296,"line_end":3296,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":160089,"byte_end":160104,"line_start":3296,"line_end":3296,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":160089,"byte_end":160104,"line_start":3296,"line_end":3296,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3065},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":160510,"byte_end":160513,"line_start":3306,"line_end":3306,"column_start":12,"column_end":15},"name":"new","qualname":"<WeakSet>::new","value":"pub fn new() -> WeakSet","parent":null,"children":[],"decl_id":null,"docs":" The `WeakSet` object lets you store weakly held objects in a collection.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":160089,"byte_end":160104,"line_start":3296,"line_end":3296,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":160089,"byte_end":160104,"line_start":3296,"line_end":3296,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3068},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":160808,"byte_end":160811,"line_start":3313,"line_end":3313,"column_start":12,"column_end":15},"name":"has","qualname":"<WeakSet>::has","value":"pub fn has(&Self, &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an object exists\n in a WeakSet or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":160089,"byte_end":160104,"line_start":3296,"line_end":3296,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":160089,"byte_end":160104,"line_start":3296,"line_end":3296,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3071},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":161103,"byte_end":161106,"line_start":3319,"line_end":3319,"column_start":12,"column_end":15},"name":"add","qualname":"<WeakSet>::add","value":"pub fn add(&Self, &Object) -> WeakSet","parent":null,"children":[],"decl_id":null,"docs":" The `add()` method appends a new object to the end of a WeakSet object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":160089,"byte_end":160104,"line_start":3296,"line_end":3296,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":160089,"byte_end":160104,"line_start":3296,"line_end":3296,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3074},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":161415,"byte_end":161421,"line_start":3326,"line_end":3326,"column_start":12,"column_end":18},"name":"delete","qualname":"<WeakSet>::delete","value":"pub fn delete(&Self, &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a WeakSet\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":160089,"byte_end":160104,"line_start":3296,"line_end":3296,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":160089,"byte_end":160104,"line_start":3296,"line_end":3296,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":161499,"byte_end":161510,"line_start":3330,"line_end":3330,"column_start":9,"column_end":20},"name":"WebAssembly","qualname":"::WebAssembly","value":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":3089},{"krate":0,"index":3091},{"krate":0,"index":3093},{"krate":0,"index":3095},{"krate":0,"index":3097},{"krate":0,"index":3161},{"krate":0,"index":3172},{"krate":0,"index":3170},{"krate":0,"index":3166},{"krate":0,"index":3167},{"krate":0,"index":3163},{"krate":0,"index":3164},{"krate":0,"index":3099},{"krate":0,"index":3152},{"krate":0,"index":3155},{"krate":0,"index":3158},{"krate":0,"index":3239},{"krate":0,"index":3250},{"krate":0,"index":3248},{"krate":0,"index":3244},{"krate":0,"index":3245},{"krate":0,"index":3241},{"krate":0,"index":3242},{"krate":0,"index":3174},{"krate":0,"index":3227},{"krate":0,"index":3230},{"krate":0,"index":3233},{"krate":0,"index":3236},{"krate":0,"index":3314},{"krate":0,"index":3325},{"krate":0,"index":3323},{"krate":0,"index":3319},{"krate":0,"index":3320},{"krate":0,"index":3316},{"krate":0,"index":3317},{"krate":0,"index":3252},{"krate":0,"index":3305},{"krate":0,"index":3308},{"krate":0,"index":3311},{"krate":0,"index":3389},{"krate":0,"index":3400},{"krate":0,"index":3398},{"krate":0,"index":3394},{"krate":0,"index":3395},{"krate":0,"index":3391},{"krate":0,"index":3392},{"krate":0,"index":3327},{"krate":0,"index":3380},{"krate":0,"index":3383},{"krate":0,"index":3386},{"krate":0,"index":3473},{"krate":0,"index":3484},{"krate":0,"index":3482},{"krate":0,"index":3478},{"krate":0,"index":3479},{"krate":0,"index":3475},{"krate":0,"index":3476},{"krate":0,"index":3402},{"krate":0,"index":3455},{"krate":0,"index":3458},{"krate":0,"index":3461},{"krate":0,"index":3464},{"krate":0,"index":3467},{"krate":0,"index":3470},{"krate":0,"index":3560},{"krate":0,"index":3571},{"krate":0,"index":3569},{"krate":0,"index":3565},{"krate":0,"index":3566},{"krate":0,"index":3562},{"krate":0,"index":3563},{"krate":0,"index":3486},{"krate":0,"index":3539},{"krate":0,"index":3542},{"krate":0,"index":3545},{"krate":0,"index":3548},{"krate":0,"index":3551},{"krate":0,"index":3554},{"krate":0,"index":3557},{"krate":0,"index":3641},{"krate":0,"index":3652},{"krate":0,"index":3650},{"krate":0,"index":3646},{"krate":0,"index":3647},{"krate":0,"index":3643},{"krate":0,"index":3644},{"krate":0,"index":3573},{"krate":0,"index":3626},{"krate":0,"index":3629},{"krate":0,"index":3632},{"krate":0,"index":3635},{"krate":0,"index":3638}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":161466,"byte_end":161490,"line_start":3329,"line_end":3329,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":3089},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":162114,"byte_end":162121,"line_start":3343,"line_end":3343,"column_start":16,"column_end":23},"name":"compile","qualname":"::WebAssembly::compile","value":"pub fn compile(&JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.compile()` function compiles a `WebAssembly.Module`\n from WebAssembly binary code.  This function is useful if it is\n necessary to a compile a module before it can be instantiated\n (otherwise, the `WebAssembly.instantiate()` function should be used).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":161555,"byte_end":161570,"line_start":3334,"line_end":3334,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":161555,"byte_end":161570,"line_start":3334,"line_end":3334,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3091},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":162521,"byte_end":162539,"line_start":3350,"line_end":3350,"column_start":16,"column_end":34},"name":"instantiate_buffer","qualname":"::WebAssembly::instantiate_buffer","value":"pub fn instantiate_buffer(&[u8], &Object) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.instantiate()` function allows you to compile and\n instantiate WebAssembly code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":161555,"byte_end":161570,"line_start":3334,"line_end":3334,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":161555,"byte_end":161570,"line_start":3334,"line_end":3334,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3093},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":162947,"byte_end":162965,"line_start":3357,"line_end":3357,"column_start":16,"column_end":34},"name":"instantiate_module","qualname":"::WebAssembly::instantiate_module","value":"pub fn instantiate_module(&Module, &Object) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.instantiate()` function allows you to compile and\n instantiate WebAssembly code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":161555,"byte_end":161570,"line_start":3334,"line_end":3334,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":161555,"byte_end":161570,"line_start":3334,"line_end":3334,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3095},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":163522,"byte_end":163543,"line_start":3366,"line_end":3366,"column_start":16,"column_end":37},"name":"instantiate_streaming","qualname":"::WebAssembly::instantiate_streaming","value":"pub fn instantiate_streaming(&Promise, &Object) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.instantiateStreaming()` function compiles and\n instantiates a WebAssembly module directly from a streamed\n underlying source. This is the most efficient, optimized way to load\n wasm code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":161555,"byte_end":161570,"line_start":3334,"line_end":3334,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":161555,"byte_end":161570,"line_start":3334,"line_end":3334,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3097},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":164028,"byte_end":164036,"line_start":3374,"line_end":3374,"column_start":16,"column_end":24},"name":"validate","qualname":"::WebAssembly::validate","value":"pub fn validate(&JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.validate()` function validates a given typed\n array of WebAssembly binary code, returning whether the bytes\n form a valid wasm module (`true`) or not (`false`).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":161555,"byte_end":161570,"line_start":3334,"line_end":3334,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":161555,"byte_end":161570,"line_start":3334,"line_end":3334,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3161},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":164692,"byte_end":164704,"line_start":3387,"line_end":3387,"column_start":18,"column_end":30},"name":"CompileError","qualname":"::WebAssembly::CompileError","value":"CompileError {  }","parent":null,"children":[{"krate":0,"index":3162}],"decl_id":null,"docs":" The `WebAssembly.CompileError()` constructor creates a new\n WebAssembly `CompileError` object, which indicates an error during\n WebAssembly decoding or validation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":164131,"byte_end":164146,"line_start":3378,"line_end":3378,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":164131,"byte_end":164146,"line_start":3378,"line_end":3378,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":164131,"byte_end":164146,"line_start":3378,"line_end":3378,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3159},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":165136,"byte_end":165139,"line_start":3395,"line_end":3395,"column_start":16,"column_end":19},"name":"new","qualname":"<CompileError>::new","value":"pub fn new(&str) -> CompileError","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.CompileError()` constructor creates a new\n WebAssembly `CompileError` object, which indicates an error during\n WebAssembly decoding or validation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":164131,"byte_end":164146,"line_start":3378,"line_end":3378,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":164131,"byte_end":164146,"line_start":3378,"line_end":3378,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3239},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":165831,"byte_end":165839,"line_start":3409,"line_end":3409,"column_start":18,"column_end":26},"name":"Instance","qualname":"::WebAssembly::Instance","value":"Instance {  }","parent":null,"children":[{"krate":0,"index":3240}],"decl_id":null,"docs":" A `WebAssembly.Instance` object is a stateful, executable instance\n of a `WebAssembly.Module`. Instance objects contain all the exported\n WebAssembly functions that allow calling into WebAssembly code from\n JavaScript.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":165211,"byte_end":165226,"line_start":3399,"line_end":3399,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":165211,"byte_end":165226,"line_start":3399,"line_end":3399,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":165211,"byte_end":165226,"line_start":3399,"line_end":3399,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3234},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":166375,"byte_end":166378,"line_start":3418,"line_end":3418,"column_start":16,"column_end":19},"name":"new","qualname":"<Instance>::new","value":"pub fn new(&Module, &Object) -> Result<Instance, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.Instance()` constructor function can be called to\n synchronously instantiate a given `WebAssembly.Module`\n object. However, the primary way to get an `Instance` is through the\n asynchronous `WebAssembly.instantiateStreaming()` function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":165211,"byte_end":165226,"line_start":3399,"line_end":3399,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":165211,"byte_end":165226,"line_start":3399,"line_end":3399,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3237},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":166972,"byte_end":166979,"line_start":3427,"line_end":3427,"column_start":16,"column_end":23},"name":"exports","qualname":"<Instance>::exports","value":"pub fn exports(&Self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `exports` readonly property of the `WebAssembly.Instance` object\n prototype returns an object containing as its members all the\n functions exported from the WebAssembly module instance, to allow\n them to be accessed and used by JavaScript.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":165211,"byte_end":165226,"line_start":3399,"line_end":3399,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":165211,"byte_end":165226,"line_start":3399,"line_end":3399,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3314},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":167621,"byte_end":167630,"line_start":3440,"line_end":3440,"column_start":18,"column_end":27},"name":"LinkError","qualname":"::WebAssembly::LinkError","value":"LinkError {  }","parent":null,"children":[{"krate":0,"index":3315}],"decl_id":null,"docs":" The `WebAssembly.LinkError()` constructor creates a new WebAssembly\n LinkError object, which indicates an error during module\n instantiation (besides traps from the start function).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":167048,"byte_end":167063,"line_start":3431,"line_end":3431,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":167048,"byte_end":167063,"line_start":3431,"line_end":3431,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":167048,"byte_end":167063,"line_start":3431,"line_end":3431,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3312},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":168077,"byte_end":168080,"line_start":3448,"line_end":3448,"column_start":16,"column_end":19},"name":"new","qualname":"<LinkError>::new","value":"pub fn new(&str) -> LinkError","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.LinkError()` constructor creates a new WebAssembly\n LinkError object, which indicates an error during module\n instantiation (besides traps from the start function).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":167048,"byte_end":167063,"line_start":3431,"line_end":3431,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":167048,"byte_end":167063,"line_start":3431,"line_end":3431,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3389},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":168712,"byte_end":168724,"line_start":3461,"line_end":3461,"column_start":18,"column_end":30},"name":"RuntimeError","qualname":"::WebAssembly::RuntimeError","value":"RuntimeError {  }","parent":null,"children":[{"krate":0,"index":3390}],"decl_id":null,"docs":" The `WebAssembly.RuntimeError()` constructor creates a new WebAssembly\n `RuntimeError` object — the type that is thrown whenever WebAssembly\n specifies a trap.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":168153,"byte_end":168168,"line_start":3452,"line_end":3452,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":168153,"byte_end":168168,"line_start":3452,"line_end":3452,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":168153,"byte_end":168168,"line_start":3452,"line_end":3452,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3387},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":169154,"byte_end":169157,"line_start":3469,"line_end":3469,"column_start":16,"column_end":19},"name":"new","qualname":"<RuntimeError>::new","value":"pub fn new(&str) -> RuntimeError","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.RuntimeError()` constructor creates a new WebAssembly\n `RuntimeError` object — the type that is thrown whenever WebAssembly\n specifies a trap.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":168153,"byte_end":168168,"line_start":3452,"line_end":3452,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":168153,"byte_end":168168,"line_start":3452,"line_end":3452,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3473},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":169804,"byte_end":169810,"line_start":3482,"line_end":3482,"column_start":18,"column_end":24},"name":"Module","qualname":"::WebAssembly::Module","value":"Module {  }","parent":null,"children":[{"krate":0,"index":3474}],"decl_id":null,"docs":" A `WebAssembly.Module` object contains stateless WebAssembly code\n that has already been compiled by the browser and can be\n efficiently shared with Workers, and instantiated multiple times.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":169227,"byte_end":169242,"line_start":3473,"line_end":3473,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":169227,"byte_end":169242,"line_start":3473,"line_end":3473,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":169227,"byte_end":169242,"line_start":3473,"line_end":3473,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3462},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":170270,"byte_end":170273,"line_start":3490,"line_end":3490,"column_start":16,"column_end":19},"name":"new","qualname":"<Module>::new","value":"pub fn new(&JsValue) -> Result<Module, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" A `WebAssembly.Module` object contains stateless WebAssembly code\n that has already been compiled by the browser and can be\n efficiently shared with Workers, and instantiated multiple times.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":169227,"byte_end":169242,"line_start":3473,"line_end":3473,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":169227,"byte_end":169242,"line_start":3473,"line_end":3473,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3465},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":170790,"byte_end":170805,"line_start":3498,"line_end":3498,"column_start":16,"column_end":31},"name":"custom_sections","qualname":"<Module>::custom_sections","value":"pub fn custom_sections(&Module, &str) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.customSections()` function returns a copy of the\n contents of all custom sections in the given module with the given\n string name.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":169227,"byte_end":169242,"line_start":3473,"line_end":3473,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":169227,"byte_end":169242,"line_start":3473,"line_end":3473,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3468},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":171253,"byte_end":171260,"line_start":3505,"line_end":3505,"column_start":16,"column_end":23},"name":"exports","qualname":"<Module>::exports","value":"pub fn exports(&Module) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.exports()` function returns an array containing\n descriptions of all the declared exports of the given `Module`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":169227,"byte_end":169242,"line_start":3473,"line_end":3473,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":169227,"byte_end":169242,"line_start":3473,"line_end":3473,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3471},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":171689,"byte_end":171696,"line_start":3512,"line_end":3512,"column_start":16,"column_end":23},"name":"imports","qualname":"<Module>::imports","value":"pub fn imports(&Module) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.imports()` function returns an array containing\n descriptions of all the declared imports of the given `Module`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":169227,"byte_end":169242,"line_start":3473,"line_end":3473,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":169227,"byte_end":169242,"line_start":3473,"line_end":3473,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3560},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":172237,"byte_end":172242,"line_start":3524,"line_end":3524,"column_start":18,"column_end":23},"name":"Table","qualname":"::WebAssembly::Table","value":"Table {  }","parent":null,"children":[{"krate":0,"index":3561}],"decl_id":null,"docs":" The `WebAssembly.Table()` constructor creates a new `Table` object\n of the given size and element type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":171760,"byte_end":171775,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":171760,"byte_end":171775,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":171760,"byte_end":171775,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3546},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":172603,"byte_end":172606,"line_start":3531,"line_end":3531,"column_start":16,"column_end":19},"name":"new","qualname":"<Table>::new","value":"pub fn new(&Object) -> Result<Table, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.Table()` constructor creates a new `Table` object\n of the given size and element type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":171760,"byte_end":171775,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":171760,"byte_end":171775,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3549},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":173071,"byte_end":173077,"line_start":3539,"line_end":3539,"column_start":16,"column_end":22},"name":"length","qualname":"<Table>::length","value":"pub fn length(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length prototype property of the `WebAssembly.Table` object\n returns the length of the table, i.e. the number of elements in the\n table.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":171760,"byte_end":171775,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":171760,"byte_end":171775,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3552},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":173476,"byte_end":173479,"line_start":3546,"line_end":3546,"column_start":16,"column_end":19},"name":"get","qualname":"<Table>::get","value":"pub fn get(&Self, u32) -> Result<Function, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `get()` prototype method of the `WebAssembly.Table()` object\n retrieves a function reference stored at a given index.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":171760,"byte_end":171775,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":171760,"byte_end":171775,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3555},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":173946,"byte_end":173950,"line_start":3554,"line_end":3554,"column_start":16,"column_end":20},"name":"grow","qualname":"<Table>::grow","value":"pub fn grow(&Self, u32) -> Result<u32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `grow()` prototype method of the `WebAssembly.Table` object\n increases the size of the `Table` instance by a specified number of\n elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":171760,"byte_end":171775,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":171760,"byte_end":171775,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3558},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":174400,"byte_end":174403,"line_start":3561,"line_end":3561,"column_start":16,"column_end":19},"name":"set","qualname":"<Table>::set","value":"pub fn set(&Self, u32, &Function) -> Result<(), JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `set()` prototype method of the `WebAssembly.Table` object mutates a\n reference stored at a given index to a different value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":171760,"byte_end":171775,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":171760,"byte_end":171775,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3641},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":174852,"byte_end":174858,"line_start":3570,"line_end":3570,"column_start":18,"column_end":24},"name":"Memory","qualname":"::WebAssembly::Memory","value":"Memory {  }","parent":null,"children":[{"krate":0,"index":3642}],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":174512,"byte_end":174527,"line_start":3565,"line_end":3565,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":174512,"byte_end":174527,"line_start":3565,"line_end":3565,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":174512,"byte_end":174527,"line_start":3565,"line_end":3565,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3633},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":175465,"byte_end":175468,"line_start":3581,"line_end":3581,"column_start":16,"column_end":19},"name":"new","qualname":"<Memory>::new","value":"pub fn new(&Object) -> Result<Memory, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.Memory()` constructor creates a new `Memory` object\n which is a resizable `ArrayBuffer` that holds the raw bytes of\n memory accessed by a WebAssembly `Instance`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":174512,"byte_end":174527,"line_start":3565,"line_end":3565,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":174512,"byte_end":174527,"line_start":3565,"line_end":3565,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3636},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":175848,"byte_end":175854,"line_start":3588,"line_end":3588,"column_start":16,"column_end":22},"name":"buffer","qualname":"<Memory>::buffer","value":"pub fn buffer(&Self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" An accessor property that returns the buffer contained in the\n memory.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":174512,"byte_end":174527,"line_start":3565,"line_end":3565,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":174512,"byte_end":174527,"line_start":3565,"line_end":3565,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3639},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":176419,"byte_end":176423,"line_start":3599,"line_end":3599,"column_start":16,"column_end":20},"name":"grow","qualname":"<Memory>::grow","value":"pub fn grow(&Self, u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `grow()` protoype method of the `Memory` object increases the\n size of the memory instance by a specified number of WebAssembly\n pages.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":174512,"byte_end":174527,"line_start":3565,"line_end":3565,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":174512,"byte_end":174527,"line_start":3565,"line_end":3565,"column_start":5,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":176775,"byte_end":176779,"line_start":3608,"line_end":3608,"column_start":9,"column_end":13},"name":"JSON","qualname":"::JSON","value":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":3654},{"krate":0,"index":3656},{"krate":0,"index":3658},{"krate":0,"index":3660}],"decl_id":null,"docs":" The `JSON` object contains methods for parsing [JavaScript Object\n Notation (JSON)](https://json.org/) and converting values to JSON. It\n can't be called or constructed, and aside from its two method\n properties, it has no interesting functionality of its own.\n","sig":null,"attributes":[{"value":"/ The `JSON` object contains methods for parsing [JavaScript Object","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":176468,"byte_end":176537,"line_start":3603,"line_end":3603,"column_start":1,"column_end":70}},{"value":"/ Notation (JSON)](https://json.org/) and converting values to JSON. It","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":176538,"byte_end":176611,"line_start":3604,"line_end":3604,"column_start":1,"column_end":74}},{"value":"/ can't be called or constructed, and aside from its two method","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":176612,"byte_end":176677,"line_start":3605,"line_end":3605,"column_start":1,"column_end":66}},{"value":"/ properties, it has no interesting functionality of its own.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":176678,"byte_end":176741,"line_start":3606,"line_end":3606,"column_start":1,"column_end":64}},{"value":"allow(non_snake_case)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":176742,"byte_end":176766,"line_start":3607,"line_end":3607,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":3654},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":177195,"byte_end":177200,"line_start":3619,"line_end":3619,"column_start":16,"column_end":21},"name":"parse","qualname":"::JSON::parse","value":"pub fn parse(&str) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.parse()` method parses a JSON string, constructing the\n JavaScript value or object described by the string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":176817,"byte_end":176832,"line_start":3612,"line_end":3612,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":176817,"byte_end":176832,"line_start":3612,"line_end":3612,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3656},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":177539,"byte_end":177548,"line_start":3625,"line_end":3625,"column_start":16,"column_end":25},"name":"stringify","qualname":"::JSON::stringify","value":"pub fn stringify(&JsValue) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.stringify()` method converts a JavaScript value to a JSON string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":176817,"byte_end":176832,"line_start":3612,"line_end":3612,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":176817,"byte_end":176832,"line_start":3612,"line_end":3612,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3658},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":178351,"byte_end":178374,"line_start":3637,"line_end":3637,"column_start":16,"column_end":39},"name":"stringify_with_replacer","qualname":"::JSON::stringify_with_replacer","value":"pub fn stringify_with_replacer(&JsValue, &JsValue)\n-> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.stringify()` method converts a JavaScript value to a JSON string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":176817,"byte_end":176832,"line_start":3612,"line_end":3612,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":176817,"byte_end":176832,"line_start":3612,"line_end":3612,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3660},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":179891,"byte_end":179924,"line_start":3661,"line_end":3661,"column_start":16,"column_end":49},"name":"stringify_with_replacer_and_space","qualname":"::JSON::stringify_with_replacer_and_space","value":"pub fn stringify_with_replacer_and_space(&JsValue, &JsValue, &JsValue)\n-> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.stringify()` method converts a JavaScript value to a JSON string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":176817,"byte_end":176832,"line_start":3612,"line_end":3612,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":176817,"byte_end":176832,"line_start":3612,"line_end":3612,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3902},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180271,"byte_end":180279,"line_start":3675,"line_end":3675,"column_start":14,"column_end":22},"name":"JsString","qualname":"::JsString","value":"JsString {  }","parent":null,"children":[{"krate":0,"index":3903}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3723},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180584,"byte_end":180590,"line_start":3682,"line_end":3682,"column_start":12,"column_end":18},"name":"length","qualname":"<JsString>::length","value":"pub fn length(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length property of a String object indicates the length of a string,\n in UTF-16 code units.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3726},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":181001,"byte_end":181008,"line_start":3690,"line_end":3690,"column_start":12,"column_end":19},"name":"char_at","qualname":"<JsString>::char_at","value":"pub fn char_at(&Self, u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The String object's `charAt()` method returns a new string consisting of\n the single UTF-16 code unit located at the specified offset into the\n string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3729},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":181835,"byte_end":181847,"line_start":3704,"line_end":3704,"column_start":12,"column_end":24},"name":"char_code_at","qualname":"<JsString>::char_code_at","value":"pub fn char_code_at(&Self, u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `charCodeAt()` method returns an integer between 0 and 65535\n representing the UTF-16 code unit at the given index (the UTF-16 code\n unit matches the Unicode code point for code points representable in a\n single UTF-16 code unit, but might also be the first code unit of a\n surrogate pair for code points not representable in a single UTF-16 code\n unit, e.g. Unicode code points > 0x10000).  If you want the entire code\n point value, use `codePointAt()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3732},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":182218,"byte_end":182231,"line_start":3711,"line_end":3711,"column_start":12,"column_end":25},"name":"code_point_at","qualname":"<JsString>::code_point_at","value":"pub fn code_point_at(&Self, u32) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `codePointAt()` method returns a non-negative integer that is the\n Unicode code point value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3735},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":182584,"byte_end":182590,"line_start":3718,"line_end":3718,"column_start":12,"column_end":18},"name":"concat","qualname":"<JsString>::concat","value":"pub fn concat(&Self, &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `concat()` method concatenates the string arguments to the calling\n string and returns a new string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3738},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":183012,"byte_end":183021,"line_start":3725,"line_end":3725,"column_start":12,"column_end":21},"name":"ends_with","qualname":"<JsString>::ends_with","value":"pub fn ends_with(&Self, &str, i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `endsWith()` method determines whether a string ends with the characters of a\n specified string, returning true or false as appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3741},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":183864,"byte_end":183878,"line_start":3741,"line_end":3741,"column_start":12,"column_end":26},"name":"from_char_code","qualname":"<JsString>::from_char_code","value":"pub fn from_char_code(&[u16]) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The static `String.fromCharCode()` method returns a string created from\n the specified sequence of UTF-16 code units.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3744},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":184148,"byte_end":184163,"line_start":3745,"line_end":3745,"column_start":12,"column_end":27},"name":"from_char_code1","qualname":"<JsString>::from_char_code1","value":"pub fn from_char_code1(u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3747},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":184421,"byte_end":184436,"line_start":3749,"line_end":3749,"column_start":12,"column_end":27},"name":"from_char_code2","qualname":"<JsString>::from_char_code2","value":"pub fn from_char_code2(u32, u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3750},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":184702,"byte_end":184717,"line_start":3753,"line_end":3753,"column_start":12,"column_end":27},"name":"from_char_code3","qualname":"<JsString>::from_char_code3","value":"pub fn from_char_code3(u32, u32, u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3753},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":184991,"byte_end":185006,"line_start":3757,"line_end":3757,"column_start":12,"column_end":27},"name":"from_char_code4","qualname":"<JsString>::from_char_code4","value":"pub fn from_char_code4(u32, u32, u32, u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3756},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":185288,"byte_end":185303,"line_start":3761,"line_end":3761,"column_start":12,"column_end":27},"name":"from_char_code5","qualname":"<JsString>::from_char_code5","value":"pub fn from_char_code5(u32, u32, u32, u32, u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3759},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":186040,"byte_end":186055,"line_start":3777,"line_end":3777,"column_start":12,"column_end":27},"name":"from_code_point","qualname":"<JsString>::from_code_point","value":"pub fn from_code_point(&[u32]) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `String.fromCodePoint()` method returns a string created by\n using the specified sequence of code points.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3762},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":186352,"byte_end":186368,"line_start":3781,"line_end":3781,"column_start":12,"column_end":28},"name":"from_code_point1","qualname":"<JsString>::from_code_point1","value":"pub fn from_code_point1(u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3765},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":186652,"byte_end":186668,"line_start":3785,"line_end":3785,"column_start":12,"column_end":28},"name":"from_code_point2","qualname":"<JsString>::from_code_point2","value":"pub fn from_code_point2(u32, u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3768},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":186960,"byte_end":186976,"line_start":3789,"line_end":3789,"column_start":12,"column_end":28},"name":"from_code_point3","qualname":"<JsString>::from_code_point3","value":"pub fn from_code_point3(u32, u32, u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3771},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":187276,"byte_end":187292,"line_start":3793,"line_end":3793,"column_start":12,"column_end":28},"name":"from_code_point4","qualname":"<JsString>::from_code_point4","value":"pub fn from_code_point4(u32, u32, u32, u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3774},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":187600,"byte_end":187616,"line_start":3797,"line_end":3797,"column_start":12,"column_end":28},"name":"from_code_point5","qualname":"<JsString>::from_code_point5","value":"pub fn from_code_point5(u32, u32, u32, u32, u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3777},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":188028,"byte_end":188036,"line_start":3804,"line_end":3804,"column_start":12,"column_end":20},"name":"includes","qualname":"<JsString>::includes","value":"pub fn includes(&Self, &str, i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `includes()` method determines whether one string may be found\n within another string, returning true or false as appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3780},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":188531,"byte_end":188539,"line_start":3812,"line_end":3812,"column_start":12,"column_end":20},"name":"index_of","qualname":"<JsString>::index_of","value":"pub fn index_of(&Self, &str, i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `indexOf()` method returns the index within the calling String\n object of the first occurrence of the specified value, starting the\n search at fromIndex.  Returns -1 if the value is not found.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3783},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":189047,"byte_end":189060,"line_start":3820,"line_end":3820,"column_start":12,"column_end":25},"name":"last_index_of","qualname":"<JsString>::last_index_of","value":"pub fn last_index_of(&Self, &str, i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `lastIndexOf()` method returns the index within the calling String\n object of the last occurrence of the specified value, searching\n backwards from fromIndex.  Returns -1 if the value is not found.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3786},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":189528,"byte_end":189542,"line_start":3828,"line_end":3828,"column_start":12,"column_end":26},"name":"locale_compare","qualname":"<JsString>::locale_compare","value":"pub fn locale_compare(&Self, &str, &Array, &Object) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `localeCompare()` method returns a number indicating whether\n a reference string comes before or after or is the same as\n the given string in sort order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3789},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":189977,"byte_end":189983,"line_start":3839,"line_end":3839,"column_start":12,"column_end":18},"name":"match_","qualname":"<JsString>::match_","value":"pub fn match_(&Self, &RegExp) -> Option<Object>","parent":null,"children":[],"decl_id":null,"docs":" The `match()` method retrieves the matches when matching a string against a regular expression.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3792},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":190398,"byte_end":190407,"line_start":3846,"line_end":3846,"column_start":12,"column_end":21},"name":"normalize","qualname":"<JsString>::normalize","value":"pub fn normalize(&Self, &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `normalize()` method returns the Unicode Normalization Form\n of a given string (if the value isn't a string, it will be converted to one first).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3795},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":190901,"byte_end":190908,"line_start":3855,"line_end":3855,"column_start":12,"column_end":19},"name":"pad_end","qualname":"<JsString>::pad_end","value":"pub fn pad_end(&Self, u32, &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `padEnd()` method pads the current string with a given string\n (repeated, if needed) so that the resulting string reaches a given\n length. The padding is applied from the end (right) of the current\n string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3798},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":191437,"byte_end":191446,"line_start":3864,"line_end":3864,"column_start":12,"column_end":21},"name":"pad_start","qualname":"<JsString>::pad_start","value":"pub fn pad_start(&Self, u32, &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `padStart()` method pads the current string with another string\n (repeated, if needed) so that the resulting string reaches the given\n length. The padding is applied from the start (left) of the current\n string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3801},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":191889,"byte_end":191895,"line_start":3871,"line_end":3871,"column_start":12,"column_end":18},"name":"repeat","qualname":"<JsString>::repeat","value":"pub fn repeat(&Self, i32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `repeat()` method constructs and returns a new string which contains the specified\n number of copies of the string on which it was called, concatenated together.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3804},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":192450,"byte_end":192457,"line_start":3881,"line_end":3881,"column_start":12,"column_end":19},"name":"replace","qualname":"<JsString>::replace","value":"pub fn replace(&Self, &str, &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `replace()` method returns a new string with some or all matches of a pattern\n replaced by a replacement. The pattern can be a string or a RegExp, and\n the replacement can be a string or a function to be called for each match.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3807},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":192727,"byte_end":192748,"line_start":3885,"line_end":3885,"column_start":12,"column_end":33},"name":"replace_with_function","qualname":"<JsString>::replace_with_function","value":"pub fn replace_with_function(&Self, &str, &Function) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3810},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":192929,"byte_end":192947,"line_start":3892,"line_end":3892,"column_start":12,"column_end":30},"name":"replace_by_pattern","qualname":"<JsString>::replace_by_pattern","value":"pub fn replace_by_pattern(&Self, &RegExp, &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3813},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":193220,"byte_end":193252,"line_start":3896,"line_end":3896,"column_start":12,"column_end":44},"name":"replace_by_pattern_with_function","qualname":"<JsString>::replace_by_pattern_with_function","value":"pub fn replace_by_pattern_with_function(&Self, &RegExp, &Function) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3816},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":193670,"byte_end":193676,"line_start":3907,"line_end":3907,"column_start":12,"column_end":18},"name":"search","qualname":"<JsString>::search","value":"pub fn search(&Self, &RegExp) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `search()` method executes a search for a match between\n a regular expression and this String object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3819},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":194051,"byte_end":194056,"line_start":3914,"line_end":3914,"column_start":12,"column_end":17},"name":"slice","qualname":"<JsString>::slice","value":"pub fn slice(&Self, u32, u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method extracts a section of a string and returns it as a\n new string, without modifying the original string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3822},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":194502,"byte_end":194507,"line_start":3921,"line_end":3921,"column_start":12,"column_end":17},"name":"split","qualname":"<JsString>::split","value":"pub fn split(&Self, &str) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `split()` method splits a String object into an array of strings by separating the string\n into substrings, using a specified separator string to determine where to make each split.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3825},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":194753,"byte_end":194764,"line_start":3925,"line_end":3925,"column_start":12,"column_end":23},"name":"split_limit","qualname":"<JsString>::split_limit","value":"pub fn split_limit(&Self, &str, u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3828},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":195022,"byte_end":195038,"line_start":3929,"line_end":3929,"column_start":12,"column_end":28},"name":"split_by_pattern","qualname":"<JsString>::split_by_pattern","value":"pub fn split_by_pattern(&Self, &RegExp) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3831},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":195285,"byte_end":195307,"line_start":3933,"line_end":3933,"column_start":12,"column_end":34},"name":"split_by_pattern_limit","qualname":"<JsString>::split_by_pattern_limit","value":"pub fn split_by_pattern_limit(&Self, &RegExp, u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3834},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":195752,"byte_end":195763,"line_start":3941,"line_end":3941,"column_start":12,"column_end":23},"name":"starts_with","qualname":"<JsString>::starts_with","value":"pub fn starts_with(&Self, &str, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `startsWith()` method determines whether a string begins with the\n characters of a specified string, returning true or false as\n appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3837},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":196158,"byte_end":196167,"line_start":3948,"line_end":3948,"column_start":12,"column_end":21},"name":"substring","qualname":"<JsString>::substring","value":"pub fn substring(&Self, u32, u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `substring()` method returns the part of the string between the\n start and end indexes, or to the end of the string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3840},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":196553,"byte_end":196559,"line_start":3955,"line_end":3955,"column_start":12,"column_end":18},"name":"substr","qualname":"<JsString>::substr","value":"pub fn substr(&Self, i32, i32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `substr()` method returns the part of a string between\n the start index and a number of characters after it.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3843},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":197003,"byte_end":197023,"line_start":3962,"line_end":3962,"column_start":12,"column_end":32},"name":"to_locale_lower_case","qualname":"<JsString>::to_locale_lower_case","value":"pub fn to_locale_lower_case(&Self, Option<&str>) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleLowerCase()` method returns the calling string value converted to lower case,\n according to any locale-specific case mappings.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3846},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":197461,"byte_end":197481,"line_start":3969,"line_end":3969,"column_start":12,"column_end":32},"name":"to_locale_upper_case","qualname":"<JsString>::to_locale_upper_case","value":"pub fn to_locale_upper_case(&Self, Option<&str>) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleUpperCase()` method returns the calling string value converted to upper case,\n according to any locale-specific case mappings.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3849},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":197856,"byte_end":197869,"line_start":3976,"line_end":3976,"column_start":12,"column_end":25},"name":"to_lower_case","qualname":"<JsString>::to_lower_case","value":"pub fn to_lower_case(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLowerCase()` method returns the calling string value\n converted to lower case.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3852},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":198207,"byte_end":198216,"line_start":3983,"line_end":3983,"column_start":12,"column_end":21},"name":"to_string","qualname":"<JsString>::to_string","value":"pub fn to_string(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the specified\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3855},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":198626,"byte_end":198639,"line_start":3990,"line_end":3990,"column_start":12,"column_end":25},"name":"to_upper_case","qualname":"<JsString>::to_upper_case","value":"pub fn to_upper_case(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toUpperCase()` method returns the calling string value converted to\n uppercase (the value will be converted to a string if it isn't one).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3858},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":199110,"byte_end":199114,"line_start":3999,"line_end":3999,"column_start":12,"column_end":16},"name":"trim","qualname":"<JsString>::trim","value":"pub fn trim(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trim()` method removes whitespace from both ends of a string.\n Whitespace in this context is all the whitespace characters (space, tab,\n no-break space, etc.) and all the line terminator characters (LF, CR,\n etc.).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3861},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":199484,"byte_end":199492,"line_start":4006,"line_end":4006,"column_start":12,"column_end":20},"name":"trim_end","qualname":"<JsString>::trim_end","value":"pub fn trim_end(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimEnd()` method removes whitespace from the end of a string.\n `trimRight()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3864},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":199864,"byte_end":199874,"line_start":4013,"line_end":4013,"column_start":12,"column_end":22},"name":"trim_right","qualname":"<JsString>::trim_right","value":"pub fn trim_right(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimEnd()` method removes whitespace from the end of a string.\n `trimRight()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3867},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":200255,"byte_end":200265,"line_start":4020,"line_end":4020,"column_start":12,"column_end":22},"name":"trim_start","qualname":"<JsString>::trim_start","value":"pub fn trim_start(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimStart()` method removes whitespace from the beginning of a\n string. `trimLeft()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3870},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":200645,"byte_end":200654,"line_start":4027,"line_end":4027,"column_start":12,"column_end":21},"name":"trim_left","qualname":"<JsString>::trim_left","value":"pub fn trim_left(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimStart()` method removes whitespace from the beginning of a\n string. `trimLeft()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3873},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":200979,"byte_end":200987,"line_start":4033,"line_end":4033,"column_start":12,"column_end":20},"name":"value_of","qualname":"<JsString>::value_of","value":"pub fn value_of(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of a `String` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3876},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":201409,"byte_end":201412,"line_start":4040,"line_end":4040,"column_start":12,"column_end":15},"name":"raw","qualname":"<JsString>::raw","value":"pub fn raw(&Object, &Array) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3879},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":201882,"byte_end":201887,"line_start":4047,"line_end":4047,"column_start":12,"column_end":17},"name":"raw_0","qualname":"<JsString>::raw_0","value":"pub fn raw_0(&Object) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3882},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":202334,"byte_end":202339,"line_start":4054,"line_end":4054,"column_start":12,"column_end":17},"name":"raw_1","qualname":"<JsString>::raw_1","value":"pub fn raw_1(&Object, &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3885},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":202809,"byte_end":202814,"line_start":4061,"line_end":4061,"column_start":12,"column_end":17},"name":"raw_2","qualname":"<JsString>::raw_2","value":"pub fn raw_2(&Object, &str, &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3888},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":203338,"byte_end":203343,"line_start":4072,"line_end":4072,"column_start":12,"column_end":17},"name":"raw_3","qualname":"<JsString>::raw_3","value":"pub fn raw_3(&Object, &str, &str, &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3891},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":203898,"byte_end":203903,"line_start":4084,"line_end":4084,"column_start":12,"column_end":17},"name":"raw_4","qualname":"<JsString>::raw_4","value":"pub fn raw_4(&Object, &str, &str, &str, &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3894},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":204489,"byte_end":204494,"line_start":4097,"line_end":4097,"column_start":12,"column_end":17},"name":"raw_5","qualname":"<JsString>::raw_5","value":"pub fn raw_5(&Object, &str, &str, &str, &str, &str)\n-> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3897},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":205111,"byte_end":205116,"line_start":4111,"line_end":4111,"column_start":12,"column_end":17},"name":"raw_6","qualname":"<JsString>::raw_6","value":"pub fn raw_6(&Object, &str, &str, &str, &str, &str, &str)\n-> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3900},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":205764,"byte_end":205769,"line_start":4126,"line_end":4126,"column_start":12,"column_end":17},"name":"raw_7","qualname":"<JsString>::raw_7","value":"pub fn raw_7(&Object, &str, &str, &str, &str, &str, &str, &str)\n-> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":180076,"byte_end":180091,"line_start":3671,"line_end":3671,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206362,"byte_end":206370,"line_start":4145,"line_end":4145,"column_start":12,"column_end":20},"name":"try_from","qualname":"<JsString>::try_from","value":"pub fn try_from(&JsValue) -> Option<&JsString>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `JsString` value of this JS value if it's an instance of a\n string.","sig":null,"attributes":[{"value":"/ Returns the `JsString` value of this JS value if it's an instance of a","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206075,"byte_end":206149,"line_start":4139,"line_end":4139,"column_start":5,"column_end":79}},{"value":"/ string.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206154,"byte_end":206165,"line_start":4140,"line_end":4140,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206170,"byte_end":206173,"line_start":4141,"line_end":4141,"column_start":5,"column_end":8}},{"value":"/ If this JS value is not an instance of a string then this returns","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206178,"byte_end":206247,"line_start":4142,"line_end":4142,"column_start":5,"column_end":74}},{"value":"/ `None`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206252,"byte_end":206263,"line_start":4143,"line_end":4143,"column_start":5,"column_end":16}},{"value":"deprecated(note =\n             \"recommended to use dyn_ref instead which is now equivalent\")","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206268,"byte_end":206350,"line_start":4144,"line_end":4144,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207295,"byte_end":207309,"line_start":4165,"line_end":4165,"column_start":12,"column_end":26},"name":"is_valid_utf16","qualname":"<JsString>::is_valid_utf16","value":"pub fn is_valid_utf16(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this string is a valid UTF-16 string.","sig":null,"attributes":[{"value":"/ Returns whether this string is a valid UTF-16 string.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206442,"byte_end":206499,"line_start":4149,"line_end":4149,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206504,"byte_end":206507,"line_start":4150,"line_end":4150,"column_start":5,"column_end":8}},{"value":"/ This is useful for learning whether `String::from(..)` will return a","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206512,"byte_end":206584,"line_start":4151,"line_end":4151,"column_start":5,"column_end":77}},{"value":"/ lossless representation of the JS string. If this string contains","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206589,"byte_end":206658,"line_start":4152,"line_end":4152,"column_start":5,"column_end":74}},{"value":"/ unpaired surrogates then `String::from` will succeed but it will be a","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206663,"byte_end":206736,"line_start":4153,"line_end":4153,"column_start":5,"column_end":78}},{"value":"/ lossy representation of the JS string because unpaired surrogates will","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206741,"byte_end":206815,"line_start":4154,"line_end":4154,"column_start":5,"column_end":79}},{"value":"/ become replacement characters.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206820,"byte_end":206854,"line_start":4155,"line_end":4155,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206859,"byte_end":206862,"line_start":4156,"line_end":4156,"column_start":5,"column_end":8}},{"value":"/ If this function returns `false` then to get a lossless representation","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206867,"byte_end":206941,"line_start":4157,"line_end":4157,"column_start":5,"column_end":79}},{"value":"/ of the string you'll need to manually use the `iter` method (or the","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206946,"byte_end":207017,"line_start":4158,"line_end":4158,"column_start":5,"column_end":76}},{"value":"/ `char_code_at` accessor) to view the raw character codes.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207022,"byte_end":207083,"line_start":4159,"line_end":4159,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207088,"byte_end":207091,"line_start":4160,"line_end":4160,"column_start":5,"column_end":8}},{"value":"/ For more information, see the documentation on [JS strings vs Rust","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207096,"byte_end":207166,"line_start":4161,"line_end":4161,"column_start":5,"column_end":75}},{"value":"/ strings][docs]","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207171,"byte_end":207189,"line_start":4162,"line_end":4162,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207194,"byte_end":207197,"line_start":4163,"line_end":4163,"column_start":5,"column_end":8}},{"value":"/ [docs]: https://rustwasm.github.io/docs/wasm-bindgen/reference/types/str.html","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207202,"byte_end":207283,"line_start":4164,"line_end":4164,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207647,"byte_end":207651,"line_start":4174,"line_end":4174,"column_start":12,"column_end":16},"name":"iter","qualname":"<JsString>::iter","value":"pub fn iter<'a>(&'a Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the `u16` character codes that make up this JS\n string.","sig":null,"attributes":[{"value":"/ Returns an iterator over the `u16` character codes that make up this JS","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207402,"byte_end":207477,"line_start":4169,"line_end":4169,"column_start":5,"column_end":80}},{"value":"/ string.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207482,"byte_end":207493,"line_start":4170,"line_end":4170,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207498,"byte_end":207501,"line_start":4171,"line_end":4171,"column_start":5,"column_end":8}},{"value":"/ This method will call `char_code_at` for each code in this JS string,","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207506,"byte_end":207579,"line_start":4172,"line_end":4172,"column_start":5,"column_end":78}},{"value":"/ returning an iterator of the codes in sequence.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207584,"byte_end":207635,"line_start":4173,"line_end":4173,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":208420,"byte_end":208427,"line_start":4190,"line_end":4190,"column_start":12,"column_end":19},"name":"as_char","qualname":"<JsString>::as_char","value":"pub fn as_char(&Self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" If this string consists of a single Unicode code point, then this method\n converts it into a Rust `char` without doing any allocations.","sig":null,"attributes":[{"value":"/ If this string consists of a single Unicode code point, then this method","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207840,"byte_end":207916,"line_start":4180,"line_end":4180,"column_start":5,"column_end":81}},{"value":"/ converts it into a Rust `char` without doing any allocations.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207921,"byte_end":207986,"line_start":4181,"line_end":4181,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207991,"byte_end":207994,"line_start":4182,"line_end":4182,"column_start":5,"column_end":8}},{"value":"/ If this JS value is not a valid UTF-8 or consists of more than a single","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":207999,"byte_end":208074,"line_start":4183,"line_end":4183,"column_start":5,"column_end":80}},{"value":"/ codepoint, then this returns `None`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":208079,"byte_end":208119,"line_start":4184,"line_end":4184,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":208124,"byte_end":208127,"line_start":4185,"line_end":4185,"column_start":5,"column_end":8}},{"value":"/ Note that a single Unicode code point might be represented as more than","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":208132,"byte_end":208207,"line_start":4186,"line_end":4186,"column_start":5,"column_end":80}},{"value":"/ one code unit on the JavaScript side. For example, a JavaScript string","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":208212,"byte_end":208286,"line_start":4187,"line_end":4187,"column_start":5,"column_end":79}},{"value":"/ `\"\\uD801\\uDC37\"` is actually a single Unicode code point U+10437 which","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":208291,"byte_end":208365,"line_start":4188,"line_end":4188,"column_start":5,"column_end":79}},{"value":"/ corresponds to a character '𐐷'.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":208370,"byte_end":208408,"line_start":4189,"line_end":4189,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":4015},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210389,"byte_end":210395,"line_start":4277,"line_end":4277,"column_start":14,"column_end":20},"name":"Symbol","qualname":"::Symbol","value":"Symbol {  }","parent":null,"children":[{"krate":0,"index":4016}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3968},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210857,"byte_end":210869,"line_start":4285,"line_end":4285,"column_start":12,"column_end":24},"name":"has_instance","qualname":"<Symbol>::has_instance","value":"pub fn has_instance() -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.hasInstance` well-known symbol is used to determine\n if a constructor object recognizes an object as its instance.\n The `instanceof` operator's behavior can be customized by this symbol.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3971},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":211336,"byte_end":211356,"line_start":4293,"line_end":4293,"column_start":12,"column_end":32},"name":"is_concat_spreadable","qualname":"<Symbol>::is_concat_spreadable","value":"pub fn is_concat_spreadable() -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.isConcatSpreadable` well-known symbol is used to configure\n if an object should be flattened to its array elements when using the\n `Array.prototype.concat()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3974},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":211831,"byte_end":211845,"line_start":4300,"line_end":4300,"column_start":12,"column_end":26},"name":"async_iterator","qualname":"<Symbol>::async_iterator","value":"pub fn async_iterator() -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.asyncIterator` well-known symbol specifies the default AsyncIterator for an object.\n If this property is set on an object, it is an async iterable and can be used in a `for await...of` loop.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3977},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":212195,"byte_end":212203,"line_start":4307,"line_end":4307,"column_start":12,"column_end":20},"name":"iterator","qualname":"<Symbol>::iterator","value":"pub fn iterator() -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.iterator` well-known symbol specifies the default iterator\n for an object.  Used by `for...of`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3980},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":212636,"byte_end":212642,"line_start":4315,"line_end":4315,"column_start":12,"column_end":18},"name":"match_","qualname":"<Symbol>::match_","value":"pub fn match_() -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.match` well-known symbol specifies the matching of a regular\n expression against a string. This function is called by the\n `String.prototype.match()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3983},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":213183,"byte_end":213190,"line_start":4326,"line_end":4326,"column_start":12,"column_end":19},"name":"replace","qualname":"<Symbol>::replace","value":"pub fn replace() -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.replace` well-known symbol specifies the method that\n replaces matched substrings of a string.  This function is called by the\n `String.prototype.replace()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3986},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":213756,"byte_end":213762,"line_start":4337,"line_end":4337,"column_start":12,"column_end":18},"name":"search","qualname":"<Symbol>::search","value":"pub fn search() -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.search` well-known symbol specifies the method that returns\n the index within a string that matches the regular expression.  This\n function is called by the `String.prototype.search()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3989},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":214142,"byte_end":214149,"line_start":4344,"line_end":4344,"column_start":12,"column_end":19},"name":"species","qualname":"<Symbol>::species","value":"pub fn species() -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The well-known symbol `Symbol.species` specifies a function-valued\n property that the constructor function uses to create derived objects.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3992},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":214695,"byte_end":214700,"line_start":4354,"line_end":4354,"column_start":12,"column_end":17},"name":"split","qualname":"<Symbol>::split","value":"pub fn split() -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.split` well-known symbol specifies the method that splits a\n string at the indices that match a regular expression.  This function is\n called by the `String.prototype.split()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3995},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":215128,"byte_end":215140,"line_start":4362,"line_end":4362,"column_start":12,"column_end":24},"name":"to_primitive","qualname":"<Symbol>::to_primitive","value":"pub fn to_primitive() -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.toPrimitive` is a symbol that specifies a function valued\n property that is called to convert an object to a corresponding\n primitive value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3998},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":215642,"byte_end":215655,"line_start":4371,"line_end":4371,"column_start":12,"column_end":25},"name":"to_string_tag","qualname":"<Symbol>::to_string_tag","value":"pub fn to_string_tag() -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.toStringTag` well-known symbol is a string valued property\n that is used in the creation of the default string description of an\n object.  It is accessed internally by the `Object.prototype.toString()`\n method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4001},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":216114,"byte_end":216118,"line_start":4379,"line_end":4379,"column_start":12,"column_end":16},"name":"for_","qualname":"<Symbol>::for_","value":"pub fn for_(&str) -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.for(key)` method searches for existing symbols in a runtime-wide symbol registry with\n the given key and returns it if found.\n Otherwise a new symbol gets created in the global symbol registry with this key.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4004},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":216474,"byte_end":216481,"line_start":4385,"line_end":4385,"column_start":12,"column_end":19},"name":"key_for","qualname":"<Symbol>::key_for","value":"pub fn key_for(&Symbol) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.keyFor(sym)` method retrieves a shared symbol key from the global symbol registry for the given symbol.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4007},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":216793,"byte_end":216802,"line_start":4391,"line_end":4391,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Symbol>::to_string","value":"pub fn to_string(&Self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the specified Symbol object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4010},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":217265,"byte_end":217276,"line_start":4399,"line_end":4399,"column_start":12,"column_end":23},"name":"unscopables","qualname":"<Symbol>::unscopables","value":"pub fn unscopables() -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.unscopables` well-known symbol is used to specify an object\n value of whose own and inherited property names are excluded from the\n with environment bindings of the associated object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4013},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":217561,"byte_end":217569,"line_start":4405,"line_end":4405,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Symbol>::value_of","value":"pub fn value_of(&Self) -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of a Symbol object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210238,"byte_end":210253,"line_start":4273,"line_end":4273,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":217632,"byte_end":217636,"line_start":4409,"line_end":4409,"column_start":9,"column_end":13},"name":"Intl","qualname":"::Intl","value":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":4021},{"krate":0,"index":4094},{"krate":0,"index":4098},{"krate":0,"index":4096},{"krate":0,"index":4023},{"krate":0,"index":4076},{"krate":0,"index":4079},{"krate":0,"index":4082},{"krate":0,"index":4085},{"krate":0,"index":4088},{"krate":0,"index":4091},{"krate":0,"index":4174},{"krate":0,"index":4178},{"krate":0,"index":4176},{"krate":0,"index":4100},{"krate":0,"index":4153},{"krate":0,"index":4156},{"krate":0,"index":4159},{"krate":0,"index":4162},{"krate":0,"index":4165},{"krate":0,"index":4168},{"krate":0,"index":4171},{"krate":0,"index":4254},{"krate":0,"index":4258},{"krate":0,"index":4256},{"krate":0,"index":4180},{"krate":0,"index":4233},{"krate":0,"index":4236},{"krate":0,"index":4239},{"krate":0,"index":4242},{"krate":0,"index":4245},{"krate":0,"index":4248},{"krate":0,"index":4251},{"krate":0,"index":4331},{"krate":0,"index":4335},{"krate":0,"index":4333},{"krate":0,"index":4260},{"krate":0,"index":4313},{"krate":0,"index":4316},{"krate":0,"index":4319},{"krate":0,"index":4322},{"krate":0,"index":4325},{"krate":0,"index":4328}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":217599,"byte_end":217623,"line_start":4408,"line_end":4408,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":4021},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":218176,"byte_end":218197,"line_start":4421,"line_end":4421,"column_start":16,"column_end":37},"name":"get_canonical_locales","qualname":"::Intl::get_canonical_locales","value":"pub fn get_canonical_locales(&JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.getCanonicalLocales()` method returns an array containing\n the canonical locale names. Duplicates will be omitted and elements\n will be validated as structurally valid language tags.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":217674,"byte_end":217689,"line_start":4413,"line_end":4413,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":217674,"byte_end":217689,"line_start":4413,"line_end":4413,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4094},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":218709,"byte_end":218717,"line_start":4433,"line_end":4433,"column_start":18,"column_end":26},"name":"Collator","qualname":"::Intl::Collator","value":"Collator {  }","parent":null,"children":[{"krate":0,"index":4095}],"decl_id":null,"docs":" The `Intl.Collator` object is a constructor for collators, objects\n that enable language sensitive string comparison.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":218253,"byte_end":218268,"line_start":4425,"line_end":4425,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":218253,"byte_end":218268,"line_start":4425,"line_end":4425,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":218253,"byte_end":218268,"line_start":4425,"line_end":4425,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4083},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":219069,"byte_end":219072,"line_start":4440,"line_end":4440,"column_start":16,"column_end":19},"name":"new","qualname":"<Collator>::new","value":"pub fn new(&Array, &Object) -> Collator","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.Collator` object is a constructor for collators, objects\n that enable language sensitive string comparison.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":218253,"byte_end":218268,"line_start":4425,"line_end":4425,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":218253,"byte_end":218268,"line_start":4425,"line_end":4425,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4086},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":219527,"byte_end":219534,"line_start":4448,"line_end":4448,"column_start":16,"column_end":23},"name":"compare","qualname":"<Collator>::compare","value":"pub fn compare(&Self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The Intl.Collator.prototype.compare property returns a function that\n compares two strings according to the sort order of this Collator\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":218253,"byte_end":218268,"line_start":4425,"line_end":4425,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":218253,"byte_end":218268,"line_start":4425,"line_end":4425,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4089},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":220040,"byte_end":220056,"line_start":4456,"line_end":4456,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<Collator>::resolved_options","value":"pub fn resolved_options(&Self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.Collator.prototype.resolvedOptions()` method returns a new\n object with properties reflecting the locale and collation options\n computed during initialization of this Collator object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":218253,"byte_end":218268,"line_start":4425,"line_end":4425,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":218253,"byte_end":218268,"line_start":4425,"line_end":4425,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4092},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":220606,"byte_end":220626,"line_start":4465,"line_end":4465,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<Collator>::supported_locales_of","value":"pub fn supported_locales_of(&Array, &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.Collator.supportedLocalesOf()` method returns an array\n containing those of the provided locales that are supported in\n collation without having to fall back to the runtime's default\n locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":218253,"byte_end":218268,"line_start":4425,"line_end":4425,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":218253,"byte_end":218268,"line_start":4425,"line_end":4425,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4174},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":221180,"byte_end":221194,"line_start":4477,"line_end":4477,"column_start":18,"column_end":32},"name":"DateTimeFormat","qualname":"::Intl::DateTimeFormat","value":"DateTimeFormat {  }","parent":null,"children":[{"krate":0,"index":4175}],"decl_id":null,"docs":" The `Intl.DateTimeFormat` object is a constructor for objects\n that enable language-sensitive date and time formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":220710,"byte_end":220725,"line_start":4469,"line_end":4469,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":220710,"byte_end":220725,"line_start":4469,"line_end":4469,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":220710,"byte_end":220725,"line_start":4469,"line_end":4469,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4160},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":221554,"byte_end":221557,"line_start":4484,"line_end":4484,"column_start":16,"column_end":19},"name":"new","qualname":"<DateTimeFormat>::new","value":"pub fn new(&Array, &Object) -> DateTimeFormat","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.DateTimeFormat` object is a constructor for objects\n that enable language-sensitive date and time formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":220710,"byte_end":220725,"line_start":4469,"line_end":4469,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":220710,"byte_end":220725,"line_start":4469,"line_end":4469,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4163},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":222065,"byte_end":222071,"line_start":4492,"line_end":4492,"column_start":16,"column_end":22},"name":"format","qualname":"<DateTimeFormat>::format","value":"pub fn format(&Self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The Intl.DateTimeFormat.prototype.format property returns a getter function that\n formats a date according to the locale and formatting options of this\n Intl.DateTimeFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":220710,"byte_end":220725,"line_start":4469,"line_end":4469,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":220710,"byte_end":220725,"line_start":4469,"line_end":4469,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4166},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":222534,"byte_end":222549,"line_start":4499,"line_end":4499,"column_start":16,"column_end":31},"name":"format_to_parts","qualname":"<DateTimeFormat>::format_to_parts","value":"pub fn format_to_parts(&Self, &Date) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.DateTimeFormat.prototype.formatToParts()` method allows locale-aware\n formatting of strings produced by DateTimeFormat formatters.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":220710,"byte_end":220725,"line_start":4469,"line_end":4469,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":220710,"byte_end":220725,"line_start":4469,"line_end":4469,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4169},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":223104,"byte_end":223120,"line_start":4507,"line_end":4507,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<DateTimeFormat>::resolved_options","value":"pub fn resolved_options(&Self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.DateTimeFormat.prototype.resolvedOptions()` method returns a new\n object with properties reflecting the locale and date and time formatting\n options computed during initialization of this DateTimeFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":220710,"byte_end":220725,"line_start":4469,"line_end":4469,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":220710,"byte_end":220725,"line_start":4469,"line_end":4469,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4172},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":223709,"byte_end":223729,"line_start":4516,"line_end":4516,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<DateTimeFormat>::supported_locales_of","value":"pub fn supported_locales_of(&Array, &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.DateTimeFormat.supportedLocalesOf()` method returns an array\n containing those of the provided locales that are supported in date\n and time formatting without having to fall back to the runtime's default\n locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":220710,"byte_end":220725,"line_start":4469,"line_end":4469,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":220710,"byte_end":220725,"line_start":4469,"line_end":4469,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4254},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":224268,"byte_end":224280,"line_start":4528,"line_end":4528,"column_start":18,"column_end":30},"name":"NumberFormat","qualname":"::Intl::NumberFormat","value":"NumberFormat {  }","parent":null,"children":[{"krate":0,"index":4255}],"decl_id":null,"docs":" The `Intl.NumberFormat` object is a constructor for objects\n that enable language sensitive number formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":223811,"byte_end":223826,"line_start":4520,"line_end":4520,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":223811,"byte_end":223826,"line_start":4520,"line_end":4520,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":223811,"byte_end":223826,"line_start":4520,"line_end":4520,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4240},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":224629,"byte_end":224632,"line_start":4535,"line_end":4535,"column_start":16,"column_end":19},"name":"new","qualname":"<NumberFormat>::new","value":"pub fn new(&Array, &Object) -> NumberFormat","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.NumberFormat` object is a constructor for objects\n that enable language sensitive number formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":223811,"byte_end":223826,"line_start":4520,"line_end":4520,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":223811,"byte_end":223826,"line_start":4520,"line_end":4520,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4243},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":225127,"byte_end":225133,"line_start":4543,"line_end":4543,"column_start":16,"column_end":22},"name":"format","qualname":"<NumberFormat>::format","value":"pub fn format(&Self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The Intl.NumberFormat.prototype.format property returns a getter function that\n formats a number according to the locale and formatting options of this\n NumberFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":223811,"byte_end":223826,"line_start":4520,"line_end":4520,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":223811,"byte_end":223826,"line_start":4520,"line_end":4520,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4246},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":225590,"byte_end":225605,"line_start":4550,"line_end":4550,"column_start":16,"column_end":31},"name":"format_to_parts","qualname":"<NumberFormat>::format_to_parts","value":"pub fn format_to_parts(&Self, f64) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.Numberformat.prototype.formatToParts()` method allows locale-aware\n formatting of strings produced by NumberTimeFormat formatters.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":223811,"byte_end":223826,"line_start":4520,"line_end":4520,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":223811,"byte_end":223826,"line_start":4520,"line_end":4520,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4249},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":226145,"byte_end":226161,"line_start":4558,"line_end":4558,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<NumberFormat>::resolved_options","value":"pub fn resolved_options(&Self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.NumberFormat.prototype.resolvedOptions()` method returns a new\n object with properties reflecting the locale and number formatting\n options computed during initialization of this NumberFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":223811,"byte_end":223826,"line_start":4520,"line_end":4520,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":223811,"byte_end":223826,"line_start":4520,"line_end":4520,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4252},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":226723,"byte_end":226743,"line_start":4566,"line_end":4566,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<NumberFormat>::supported_locales_of","value":"pub fn supported_locales_of(&Array, &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.NumberFormat.supportedLocalesOf()` method returns an array\n containing those of the provided locales that are supported in number\n formatting without having to fall back to the runtime's default locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":223811,"byte_end":223826,"line_start":4520,"line_end":4520,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":223811,"byte_end":223826,"line_start":4520,"line_end":4520,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4331},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":227295,"byte_end":227306,"line_start":4578,"line_end":4578,"column_start":18,"column_end":29},"name":"PluralRules","qualname":"::Intl::PluralRules","value":"PluralRules {  }","parent":null,"children":[{"krate":0,"index":4332}],"decl_id":null,"docs":" The `Intl.PluralRules` object is a constructor for objects\n that enable plural sensitive formatting and plural language rules.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":226824,"byte_end":226839,"line_start":4570,"line_end":4570,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":226824,"byte_end":226839,"line_start":4570,"line_end":4570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":226824,"byte_end":226839,"line_start":4570,"line_end":4570,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4320},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":227670,"byte_end":227673,"line_start":4585,"line_end":4585,"column_start":16,"column_end":19},"name":"new","qualname":"<PluralRules>::new","value":"pub fn new(&Array, &Object) -> PluralRules","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.PluralRules` object is a constructor for objects\n that enable plural sensitive formatting and plural language rules.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":226824,"byte_end":226839,"line_start":4570,"line_end":4570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":226824,"byte_end":226839,"line_start":4570,"line_end":4570,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4323},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":228217,"byte_end":228233,"line_start":4593,"line_end":4593,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<PluralRules>::resolved_options","value":"pub fn resolved_options(&Self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.PluralRules.prototype.resolvedOptions()` method returns a new\n object with properties reflecting the locale and plural formatting\n options computed during initialization of this PluralRules object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":226824,"byte_end":226839,"line_start":4570,"line_end":4570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":226824,"byte_end":226839,"line_start":4570,"line_end":4570,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4326},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":228634,"byte_end":228640,"line_start":4600,"line_end":4600,"column_start":16,"column_end":22},"name":"select","qualname":"<PluralRules>::select","value":"pub fn select(&Self, f64) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.PluralRules.prototype.select()` method returns a String indicating\n which plural rule to use for locale-aware formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":226824,"byte_end":226839,"line_start":4570,"line_end":4570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":226824,"byte_end":226839,"line_start":4570,"line_end":4570,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4329},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229213,"byte_end":229233,"line_start":4608,"line_end":4608,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<PluralRules>::supported_locales_of","value":"pub fn supported_locales_of(&Array, &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.PluralRules.supportedLocalesOf()` method returns an array\n containing those of the provided locales that are supported in plural\n formatting without having to fall back to the runtime's default locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":226824,"byte_end":226839,"line_start":4570,"line_end":4570,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":226824,"byte_end":226839,"line_start":4570,"line_end":4570,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4423},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229723,"byte_end":229730,"line_start":4622,"line_end":4622,"column_start":14,"column_end":21},"name":"Promise","qualname":"::Promise","value":"Promise {  }","parent":null,"children":[{"krate":0,"index":4424}],"decl_id":null,"docs":" The `Promise` object represents the eventual completion (or failure) of\n an asynchronous operation, and its resulting value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229598,"byte_end":229609,"line_start":4619,"line_end":4619,"column_start":5,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4397},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":230760,"byte_end":230763,"line_start":4641,"line_end":4641,"column_start":12,"column_end":15},"name":"new","qualname":"<Promise>::new","value":"pub fn new(&mut FnMut(Function, Function) -> ()) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Promise` with the provided executor `cb`","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4400},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":231292,"byte_end":231295,"line_start":4650,"line_end":4650,"column_start":12,"column_end":15},"name":"all","qualname":"<Promise>::all","value":"pub fn all(&JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.all(iterable)` method returns a single `Promise` that\n resolves when all of the promises in the iterable argument have resolved\n or when the iterable argument contains no promises. It rejects with the\n reason of the first promise that rejects.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4403},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":231729,"byte_end":231733,"line_start":4658,"line_end":4658,"column_start":12,"column_end":16},"name":"race","qualname":"<Promise>::race","value":"pub fn race(&JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.race(iterable)` method returns a promise that resolves or\n rejects as soon as one of the promises in the iterable resolves or\n rejects, with the value or reason from that promise.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4406},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":232073,"byte_end":232079,"line_start":4665,"line_end":4665,"column_start":12,"column_end":18},"name":"reject","qualname":"<Promise>::reject","value":"pub fn reject(&JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.reject(reason)` method returns a `Promise` object that is\n rejected with the given reason.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4409},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":232695,"byte_end":232702,"line_start":4675,"line_end":4675,"column_start":12,"column_end":19},"name":"resolve","qualname":"<Promise>::resolve","value":"pub fn resolve(&JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.resolve(value)` method returns a `Promise` object that is\n resolved with the given value. If the value is a promise, that promise\n is returned; if the value is a thenable (i.e. has a \"then\" method), the\n returned promise will \"follow\" that thenable, adopting its eventual\n state; otherwise the returned promise will be fulfilled with the value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4412},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":233186,"byte_end":233191,"line_start":4684,"line_end":4684,"column_start":12,"column_end":17},"name":"catch","qualname":"<Promise>::catch","value":"pub fn catch(&Self, &Closure<FnMut(JsValue) -> ()>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `catch()` method returns a `Promise` and deals with rejected cases\n only.  It behaves the same as calling `Promise.prototype.then(undefined,\n onRejected)` (in fact, calling `obj.catch(onRejected)` internally calls\n `obj.then(undefined, onRejected)`).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4415},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":233583,"byte_end":233587,"line_start":4691,"line_end":4691,"column_start":12,"column_end":16},"name":"then","qualname":"<Promise>::then","value":"pub fn then(&Self, &Closure<FnMut(JsValue) -> ()>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `then()` method returns a `Promise`. It takes up to two arguments:\n callback functions for the success and failure cases of the `Promise`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4418},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":233765,"byte_end":233770,"line_start":4695,"line_end":4695,"column_start":12,"column_end":17},"name":"then2","qualname":"<Promise>::then2","value":"pub fn then2(&Self, &Closure<FnMut(JsValue) -> ()>,\n             &Closure<FnMut(JsValue) -> ()>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" Same as `then`, only with both arguments provided.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4421},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":234546,"byte_end":234553,"line_start":4712,"line_end":4712,"column_start":12,"column_end":19},"name":"finally","qualname":"<Promise>::finally","value":"pub fn finally(&Self, &Closure<FnMut() -> ()>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `finally()` method returns a `Promise`. When the promise is settled,\n whether fulfilled or rejected, the specified callback function is\n executed. This provides a way for code that must be executed once the\n `Promise` has been dealt with to be run whether the promise was\n fulfilled successfully or rejected.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":229299,"byte_end":229314,"line_start":4613,"line_end":4613,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":234777,"byte_end":234783,"line_start":4719,"line_end":4719,"column_start":8,"column_end":14},"name":"global","qualname":"::global","value":"pub fn global() -> Object","parent":null,"children":[],"decl_id":null,"docs":" Returns a handle to the global scope object.","sig":null,"attributes":[{"value":"/ Returns a handle to the global scope object.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":234612,"byte_end":234660,"line_start":4715,"line_end":4715,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":234661,"byte_end":234664,"line_start":4716,"line_end":4716,"column_start":1,"column_end":4}},{"value":"/ This allows access to the global properties and global names by accessing","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":234665,"byte_end":234742,"line_start":4717,"line_end":4717,"column_start":1,"column_end":78}},{"value":"/ the `Object` returned.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":234743,"byte_end":234769,"line_start":4718,"line_end":4718,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":4693},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":248315,"byte_end":248324,"line_start":5027,"line_end":5027,"column_start":5,"column_end":14},"name":"Int8Array","qualname":"::Int8Array","value":"Int8Array {  }","parent":null,"children":[{"krate":0,"index":4694}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":4803},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":248458,"byte_end":248468,"line_start":5031,"line_end":5031,"column_start":5,"column_end":15},"name":"Int16Array","qualname":"::Int16Array","value":"Int16Array {  }","parent":null,"children":[{"krate":0,"index":4804}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":4913},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":248603,"byte_end":248613,"line_start":5035,"line_end":5035,"column_start":5,"column_end":15},"name":"Int32Array","qualname":"::Int32Array","value":"Int32Array {  }","parent":null,"children":[{"krate":0,"index":4914}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5023},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":248748,"byte_end":248758,"line_start":5039,"line_end":5039,"column_start":5,"column_end":15},"name":"Uint8Array","qualname":"::Uint8Array","value":"Uint8Array {  }","parent":null,"children":[{"krate":0,"index":5024}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5133},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":248906,"byte_end":248923,"line_start":5043,"line_end":5043,"column_start":5,"column_end":22},"name":"Uint8ClampedArray","qualname":"::Uint8ClampedArray","value":"Uint8ClampedArray {  }","parent":null,"children":[{"krate":0,"index":5134}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5243},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":249059,"byte_end":249070,"line_start":5047,"line_end":5047,"column_start":5,"column_end":16},"name":"Uint16Array","qualname":"::Uint16Array","value":"Uint16Array {  }","parent":null,"children":[{"krate":0,"index":5244}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5353},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":249207,"byte_end":249218,"line_start":5051,"line_end":5051,"column_start":5,"column_end":16},"name":"Uint32Array","qualname":"::Uint32Array","value":"Uint32Array {  }","parent":null,"children":[{"krate":0,"index":5354}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5463},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":249357,"byte_end":249369,"line_start":5055,"line_end":5055,"column_start":5,"column_end":17},"name":"Float32Array","qualname":"::Float32Array","value":"Float32Array {  }","parent":null,"children":[{"krate":0,"index":5464}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5573},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":249508,"byte_end":249520,"line_start":5059,"line_end":5059,"column_start":5,"column_end":17},"name":"Float64Array","qualname":"::Float64Array","value":"Float64Array {  }","parent":null,"children":[{"krate":0,"index":5574}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":238211,"byte_end":238226,"line_start":4798,"line_end":4798,"column_start":9,"column_end":24}}]}],"impls":[{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":22173,"byte_end":22182,"line_start":436,"line_end":436,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":22495,"byte_end":22504,"line_start":450,"line_end":450,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":15}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":22691,"byte_end":22700,"line_start":457,"line_end":457,"column_start":39,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":22751,"byte_end":22760,"line_start":459,"line_end":459,"column_start":43,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":22774,"byte_end":22779,"line_start":461,"line_end":461,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23379,"byte_end":23384,"line_start":485,"line_end":485,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38487,"byte_end":38494,"line_start":791,"line_end":791,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38740,"byte_end":38747,"line_start":805,"line_end":805,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38868,"byte_end":38875,"line_start":812,"line_end":812,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":61809,"byte_end":61817,"line_start":1242,"line_end":1242,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":68586,"byte_end":68594,"line_start":1396,"line_end":1396,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":70657,"byte_end":70661,"line_start":1467,"line_end":1467,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":70822,"byte_end":70830,"line_start":1475,"line_end":1475,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":71069,"byte_end":71077,"line_start":1487,"line_end":1487,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":71218,"byte_end":71227,"line_start":1495,"line_end":1495,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":91251,"byte_end":91257,"line_start":1914,"line_end":1914,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":93999,"byte_end":94005,"line_start":1977,"line_end":1977,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":464,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":130992,"byte_end":130998,"line_start":2669,"line_end":2669,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":465,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131389,"byte_end":131395,"line_start":2684,"line_end":2684,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":466,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131526,"byte_end":131532,"line_start":2691,"line_end":2691,"column_start":13,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":840,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206060,"byte_end":206068,"line_start":4138,"line_end":4138,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":841,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":208936,"byte_end":208944,"line_start":4211,"line_end":4211,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":842,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":209064,"byte_end":209072,"line_start":4217,"line_end":4217,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":843,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":209209,"byte_end":209217,"line_start":4223,"line_end":4223,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":844,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":209361,"byte_end":209369,"line_start":4229,"line_end":4229,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":845,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":209509,"byte_end":209517,"line_start":4235,"line_end":4235,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":846,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":209643,"byte_end":209651,"line_start":4241,"line_end":4241,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":847,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":209740,"byte_end":209748,"line_start":4247,"line_end":4247,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":848,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":209897,"byte_end":209903,"line_start":4254,"line_end":4254,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":849,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210019,"byte_end":210025,"line_start":4260,"line_end":4260,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":850,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210115,"byte_end":210123,"line_start":4266,"line_end":4266,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":22173,"byte_end":22182,"line_start":436,"line_end":436,"column_start":34,"column_end":43},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":355},"to":{"krate":2,"index":5632}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":22495,"byte_end":22504,"line_start":450,"line_end":450,"column_start":45,"column_end":54},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":355},"to":{"krate":2,"index":5559}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":22691,"byte_end":22700,"line_start":457,"line_end":457,"column_start":39,"column_end":48},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":355},"to":{"krate":2,"index":5898}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":22751,"byte_end":22760,"line_start":459,"line_end":459,"column_start":43,"column_end":52},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":355},"to":{"krate":2,"index":5584}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":22774,"byte_end":22779,"line_start":461,"line_end":461,"column_start":6,"column_end":11},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":23379,"byte_end":23384,"line_start":485,"line_end":485,"column_start":40,"column_end":45},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":342},"to":{"krate":2,"index":5532}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38487,"byte_end":38494,"line_start":791,"line_end":791,"column_start":21,"column_end":28},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":633},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38740,"byte_end":38747,"line_start":805,"line_end":805,"column_start":26,"column_end":33},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":633},"to":{"krate":2,"index":1798}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":38868,"byte_end":38875,"line_start":812,"line_end":812,"column_start":21,"column_end":28},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":633},"to":{"krate":2,"index":6960}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":61809,"byte_end":61817,"line_start":1242,"line_end":1242,"column_start":6,"column_end":14},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":1088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":68586,"byte_end":68594,"line_start":1396,"line_end":1396,"column_start":6,"column_end":14},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":1344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":70657,"byte_end":70661,"line_start":1467,"line_end":1467,"column_start":34,"column_end":38},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":41},"to":{"krate":2,"index":5632}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":70822,"byte_end":70830,"line_start":1475,"line_end":1475,"column_start":23,"column_end":31},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":1344},"to":{"krate":2,"index":5536}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":71069,"byte_end":71077,"line_start":1487,"line_end":1487,"column_start":30,"column_end":38},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":45},"to":{"krate":2,"index":5632}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":71218,"byte_end":71227,"line_start":1495,"line_end":1495,"column_start":6,"column_end":15},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":48},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":91251,"byte_end":91257,"line_start":1914,"line_end":1914,"column_start":6,"column_end":12},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":1718},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":93999,"byte_end":94005,"line_start":1977,"line_end":1977,"column_start":21,"column_end":27},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":1718},"to":{"krate":2,"index":6960}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":130992,"byte_end":130998,"line_start":2669,"line_end":2669,"column_start":6,"column_end":12},"kind":{"Impl":{"id":464}},"from":{"krate":0,"index":2146},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131389,"byte_end":131395,"line_start":2684,"line_end":2684,"column_start":20,"column_end":26},"kind":{"Impl":{"id":465}},"from":{"krate":0,"index":2146},"to":{"krate":2,"index":1798}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":131526,"byte_end":131532,"line_start":2691,"line_end":2691,"column_start":13,"column_end":19},"kind":{"Impl":{"id":466}},"from":{"krate":0,"index":2146},"to":{"krate":2,"index":1803}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":206060,"byte_end":206068,"line_start":4138,"line_end":4138,"column_start":6,"column_end":14},"kind":{"Impl":{"id":840}},"from":{"krate":0,"index":3902},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":208936,"byte_end":208944,"line_start":4211,"line_end":4211,"column_start":25,"column_end":33},"kind":{"Impl":{"id":841}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":1798}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":209064,"byte_end":209072,"line_start":4217,"line_end":4217,"column_start":33,"column_end":41},"kind":{"Impl":{"id":842}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":1798}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":209209,"byte_end":209217,"line_start":4223,"line_end":4223,"column_start":28,"column_end":36},"kind":{"Impl":{"id":843}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":1798}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":209361,"byte_end":209369,"line_start":4229,"line_end":4229,"column_start":36,"column_end":44},"kind":{"Impl":{"id":844}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":1798}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":209509,"byte_end":209517,"line_start":4235,"line_end":4235,"column_start":28,"column_end":36},"kind":{"Impl":{"id":845}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":209643,"byte_end":209651,"line_start":4241,"line_end":4241,"column_start":23,"column_end":31},"kind":{"Impl":{"id":846}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":209740,"byte_end":209748,"line_start":4247,"line_end":4247,"column_start":21,"column_end":29},"kind":{"Impl":{"id":847}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":209897,"byte_end":209903,"line_start":4254,"line_end":4254,"column_start":33,"column_end":39},"kind":{"Impl":{"id":848}},"from":{"krate":5,"index":5852},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210019,"byte_end":210025,"line_start":4260,"line_end":4260,"column_start":25,"column_end":31},"kind":{"Impl":{"id":849}},"from":{"krate":5,"index":5852},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\js-sys-0.3.50\\src\\lib.rs","byte_start":210115,"byte_end":210123,"line_start":4266,"line_end":4266,"column_start":21,"column_end":29},"kind":{"Impl":{"id":850}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":6960}}]}
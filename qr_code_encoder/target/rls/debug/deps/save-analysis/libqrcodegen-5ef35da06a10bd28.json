{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0","program":"C:\\Users\\Jamison\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","qrcodegen","C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=5ef35da06a10bd28","-C","extra-filename=-5ef35da06a10bd28","--out-dir","c:\\Users\\Jamison\\Desktop\\Web-Dev\\svelte_wasm_qr_code_encoder\\qr_code_encoder\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Jamison\\Desktop\\Web-Dev\\svelte_wasm_qr_code_encoder\\qr_code_encoder\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Jamison\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Jamison\\Desktop\\Web-Dev\\svelte_wasm_qr_code_encoder\\qr_code_encoder\\target\\rls\\debug\\deps\\libqrcodegen-5ef35da06a10bd28.rmeta"},"prelude":{"crate_id":{"name":"qrcodegen","disambiguator":[10047780862732565943,17435572189640089111]},"crate_root":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src","external_crates":[{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[15394396593765937133,15104794829170053384]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14223085168939843507,9453778982390123811]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10495964697894269666,7444397110794681726]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5630579929119936438,10747952327389013202]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[755004289757070725,4528322009891643596]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12293211462733931105,3605749939090106910]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14880717690889174640,9014378682587101436]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[1733233879246965746,6308927592973156139]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2578852399168599952,875302055328020592]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15050766551219055192,6843698544963456792]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[14716868785672998615,14481457355720881040]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[7183069464598737283,14932178614966804545]}}],"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1241,"byte_end":46930,"line_start":25,"line_end":1317,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1241,"byte_end":46930,"line_start":25,"line_end":1317,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":106},{"krate":0,"index":120},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":3},{"krate":0,"index":39},{"krate":0,"index":43},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":122},{"krate":0,"index":144},{"krate":0,"index":143},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":135},{"krate":0,"index":133},{"krate":0,"index":131},{"krate":0,"index":61},{"krate":0,"index":146},{"krate":0,"index":157},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":66},{"krate":0,"index":82},{"krate":0,"index":159},{"krate":0,"index":179},{"krate":0,"index":178},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":170},{"krate":0,"index":84},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":181},{"krate":0,"index":186},{"krate":0,"index":184},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":188},{"krate":0,"index":210},{"krate":0,"index":208},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":195},{"krate":0,"index":193},{"krate":0,"index":191},{"krate":0,"index":99},{"krate":0,"index":211},{"krate":0,"index":233},{"krate":0,"index":231},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":218},{"krate":0,"index":216},{"krate":0,"index":214},{"krate":0,"index":102},{"krate":0,"index":105}],"decl_id":null,"docs":" Generates QR Codes from text strings and byte arrays.\n \n This project aims to be the best, clearest QR Code generator library.\n The primary goals are flexible options and absolute correctness.\n Secondary goals are compact implementation size and good documentation comments.\n \n Home page with live JavaScript demo, extensive descriptions, and competitor comparisons:\n [https://www.nayuki.io/page/qr-code-generator-library](https://www.nayuki.io/page/qr-code-generator-library)\n \n # Features\n \n Core features:\n \n - Available in 6 programming languages, all with nearly equal functionality: Java, TypeScript/JavaScript, Python, Rust, C++, C\n - Significantly shorter code but more documentation comments compared to competing libraries\n - Supports encoding all 40 versions (sizes) and all 4 error correction levels, as per the QR Code Model 2 standard\n - Output formats: Raw modules/pixels of the QR symbol, SVG XML string\n - Detects finder-like penalty patterns more accurately than other implementations\n - Encodes numeric and special-alphanumeric text in less space than general text\n - Open source code under the permissive MIT License\n \n Manual parameters:\n \n - User can specify minimum and maximum version numbers allowed, then library will automatically choose smallest version in the range that fits the data\n - User can specify mask pattern manually, otherwise library will automatically evaluate all 8 masks and select the optimal one\n - User can specify absolute error correction level, or allow the library to boost it if it doesn't increase the version number\n - User can create a list of data segments manually and add ECI segments\n \n # Examples\n \n ```\n extern crate qrcodegen;\n use qrcodegen::QrCode;\n use qrcodegen::QrCodeEcc;\n use qrcodegen::QrSegment;\n ```\n \n Simple operation:\n \n ```\n let qr = QrCode::encode_text(\"Hello, world!\",\n     QrCodeEcc::Medium).unwrap();\n let svg = qr.to_svg_string(4);\n ```\n \n Manual operation:\n \n ```\n let chrs: Vec<char> = \"3141592653589793238462643383\".chars().collect();\n let segs = QrSegment::make_segments(&chrs);\n let qr = QrCode::encode_segments_advanced(\n     &segs, QrCodeEcc::High, 5, 5, Some(Mask::new(2)), false).unwrap();\n for y in 0 .. qr.size() {\n     for x in 0 .. qr.size() {\n         (... paint qr.get_module(x, y) ...)\n     }\n }\n ```\n","sig":null,"attributes":[{"value":"/ Generates QR Codes from text strings and byte arrays.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1241,"byte_end":1298,"line_start":25,"line_end":25,"column_start":1,"column_end":58}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1299,"byte_end":1303,"line_start":26,"line_end":26,"column_start":1,"column_end":5}},{"value":"/ This project aims to be the best, clearest QR Code generator library.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1304,"byte_end":1377,"line_start":27,"line_end":27,"column_start":1,"column_end":74}},{"value":"/ The primary goals are flexible options and absolute correctness.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1378,"byte_end":1446,"line_start":28,"line_end":28,"column_start":1,"column_end":69}},{"value":"/ Secondary goals are compact implementation size and good documentation comments.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1447,"byte_end":1531,"line_start":29,"line_end":29,"column_start":1,"column_end":85}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1532,"byte_end":1536,"line_start":30,"line_end":30,"column_start":1,"column_end":5}},{"value":"/ Home page with live JavaScript demo, extensive descriptions, and competitor comparisons:","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1537,"byte_end":1629,"line_start":31,"line_end":31,"column_start":1,"column_end":93}},{"value":"/ [https://www.nayuki.io/page/qr-code-generator-library](https://www.nayuki.io/page/qr-code-generator-library)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1630,"byte_end":1742,"line_start":32,"line_end":32,"column_start":1,"column_end":113}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1743,"byte_end":1747,"line_start":33,"line_end":33,"column_start":1,"column_end":5}},{"value":"/ # Features","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1748,"byte_end":1762,"line_start":34,"line_end":34,"column_start":1,"column_end":15}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1763,"byte_end":1767,"line_start":35,"line_end":35,"column_start":1,"column_end":5}},{"value":"/ Core features:","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1768,"byte_end":1786,"line_start":36,"line_end":36,"column_start":1,"column_end":19}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1787,"byte_end":1791,"line_start":37,"line_end":37,"column_start":1,"column_end":5}},{"value":"/ - Available in 6 programming languages, all with nearly equal functionality: Java, TypeScript/JavaScript, Python, Rust, C++, C","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1792,"byte_end":1922,"line_start":38,"line_end":38,"column_start":1,"column_end":131}},{"value":"/ - Significantly shorter code but more documentation comments compared to competing libraries","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":1923,"byte_end":2019,"line_start":39,"line_end":39,"column_start":1,"column_end":97}},{"value":"/ - Supports encoding all 40 versions (sizes) and all 4 error correction levels, as per the QR Code Model 2 standard","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2020,"byte_end":2138,"line_start":40,"line_end":40,"column_start":1,"column_end":119}},{"value":"/ - Output formats: Raw modules/pixels of the QR symbol, SVG XML string","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2139,"byte_end":2212,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ - Detects finder-like penalty patterns more accurately than other implementations","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2213,"byte_end":2298,"line_start":42,"line_end":42,"column_start":1,"column_end":86}},{"value":"/ - Encodes numeric and special-alphanumeric text in less space than general text","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2299,"byte_end":2382,"line_start":43,"line_end":43,"column_start":1,"column_end":84}},{"value":"/ - Open source code under the permissive MIT License","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2383,"byte_end":2438,"line_start":44,"line_end":44,"column_start":1,"column_end":56}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2439,"byte_end":2443,"line_start":45,"line_end":45,"column_start":1,"column_end":5}},{"value":"/ Manual parameters:","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2444,"byte_end":2466,"line_start":46,"line_end":46,"column_start":1,"column_end":23}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2467,"byte_end":2471,"line_start":47,"line_end":47,"column_start":1,"column_end":5}},{"value":"/ - User can specify minimum and maximum version numbers allowed, then library will automatically choose smallest version in the range that fits the data","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2472,"byte_end":2627,"line_start":48,"line_end":48,"column_start":1,"column_end":156}},{"value":"/ - User can specify mask pattern manually, otherwise library will automatically evaluate all 8 masks and select the optimal one","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2628,"byte_end":2758,"line_start":49,"line_end":49,"column_start":1,"column_end":131}},{"value":"/ - User can specify absolute error correction level, or allow the library to boost it if it doesn't increase the version number","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2759,"byte_end":2889,"line_start":50,"line_end":50,"column_start":1,"column_end":131}},{"value":"/ - User can create a list of data segments manually and add ECI segments","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2890,"byte_end":2965,"line_start":51,"line_end":51,"column_start":1,"column_end":76}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2966,"byte_end":2970,"line_start":52,"line_end":52,"column_start":1,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2971,"byte_end":2985,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2986,"byte_end":2990,"line_start":54,"line_end":54,"column_start":1,"column_end":5}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2991,"byte_end":2998,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ extern crate qrcodegen;","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":2999,"byte_end":3026,"line_start":56,"line_end":56,"column_start":1,"column_end":28}},{"value":"/ use qrcodegen::QrCode;","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3027,"byte_end":3053,"line_start":57,"line_end":57,"column_start":1,"column_end":27}},{"value":"/ use qrcodegen::QrCodeEcc;","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3054,"byte_end":3083,"line_start":58,"line_end":58,"column_start":1,"column_end":30}},{"value":"/ use qrcodegen::QrSegment;","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3084,"byte_end":3113,"line_start":59,"line_end":59,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3114,"byte_end":3121,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3122,"byte_end":3126,"line_start":61,"line_end":61,"column_start":1,"column_end":5}},{"value":"/ Simple operation:","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3127,"byte_end":3148,"line_start":62,"line_end":62,"column_start":1,"column_end":22}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3149,"byte_end":3153,"line_start":63,"line_end":63,"column_start":1,"column_end":5}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3154,"byte_end":3161,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/ let qr = QrCode::encode_text(\"Hello, world!\",","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3162,"byte_end":3211,"line_start":65,"line_end":65,"column_start":1,"column_end":50}},{"value":"/     QrCodeEcc::Medium).unwrap();","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3212,"byte_end":3248,"line_start":66,"line_end":66,"column_start":1,"column_end":37}},{"value":"/ let svg = qr.to_svg_string(4);","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3249,"byte_end":3283,"line_start":67,"line_end":67,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3284,"byte_end":3291,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3292,"byte_end":3296,"line_start":69,"line_end":69,"column_start":1,"column_end":5}},{"value":"/ Manual operation:","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3297,"byte_end":3318,"line_start":70,"line_end":70,"column_start":1,"column_end":22}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3319,"byte_end":3323,"line_start":71,"line_end":71,"column_start":1,"column_end":5}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3324,"byte_end":3331,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/ let chrs: Vec<char> = \"3141592653589793238462643383\".chars().collect();","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3332,"byte_end":3407,"line_start":73,"line_end":73,"column_start":1,"column_end":76}},{"value":"/ let segs = QrSegment::make_segments(&chrs);","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3408,"byte_end":3455,"line_start":74,"line_end":74,"column_start":1,"column_end":48}},{"value":"/ let qr = QrCode::encode_segments_advanced(","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3456,"byte_end":3502,"line_start":75,"line_end":75,"column_start":1,"column_end":47}},{"value":"/     &segs, QrCodeEcc::High, 5, 5, Some(Mask::new(2)), false).unwrap();","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3503,"byte_end":3577,"line_start":76,"line_end":76,"column_start":1,"column_end":75}},{"value":"/ for y in 0 .. qr.size() {","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3578,"byte_end":3607,"line_start":77,"line_end":77,"column_start":1,"column_end":30}},{"value":"/     for x in 0 .. qr.size() {","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3608,"byte_end":3641,"line_start":78,"line_end":78,"column_start":1,"column_end":34}},{"value":"/         (... paint qr.get_module(x, y) ...)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3642,"byte_end":3689,"line_start":79,"line_end":79,"column_start":1,"column_end":48}},{"value":"/     }","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3690,"byte_end":3699,"line_start":80,"line_end":80,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3700,"byte_end":3705,"line_start":81,"line_end":81,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3706,"byte_end":3713,"line_start":82,"line_end":82,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":4923,"byte_end":4929,"line_start":107,"line_end":107,"column_start":12,"column_end":18},"name":"QrCode","qualname":"::QrCode","value":"QrCode {  }","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112}],"decl_id":null,"docs":" A QR Code symbol, which is a type of two-dimension barcode.\n \n Invented by Denso Wave and described in the ISO/IEC 18004 standard.\n \n Instances of this struct represent an immutable square grid of black and white cells.\n The impl provides static factory functions to create a QR Code from text or binary data.\n The struct and impl cover the QR Code Model 2 specification, supporting all versions\n (sizes) from 1 to 40, all 4 error correction levels, and 4 character encoding modes.\n \n Ways to create a QR Code object:\n \n - High level: Take the payload data and call `QrCode::encode_text()` or `QrCode::encode_binary()`.\n - Mid level: Custom-make the list of segments and call\n   `QrCode::encode_segments()` or `QrCode::encode_segments_advanced()`.\n - Low level: Custom-make the array of data codeword bytes (including segment\n   headers and final padding, excluding error correction codewords), supply the\n   appropriate version number, and call the `QrCode::encode_codewords()` constructor.\n \n (Note that all ways require supplying the desired error correction level.)\n","sig":null,"attributes":[{"value":"/ A QR Code symbol, which is a type of two-dimension barcode.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3752,"byte_end":3815,"line_start":87,"line_end":87,"column_start":1,"column_end":64}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3816,"byte_end":3820,"line_start":88,"line_end":88,"column_start":1,"column_end":5}},{"value":"/ Invented by Denso Wave and described in the ISO/IEC 18004 standard.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3821,"byte_end":3892,"line_start":89,"line_end":89,"column_start":1,"column_end":72}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3893,"byte_end":3897,"line_start":90,"line_end":90,"column_start":1,"column_end":5}},{"value":"/ Instances of this struct represent an immutable square grid of black and white cells.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3898,"byte_end":3987,"line_start":91,"line_end":91,"column_start":1,"column_end":90}},{"value":"/ The impl provides static factory functions to create a QR Code from text or binary data.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":3988,"byte_end":4080,"line_start":92,"line_end":92,"column_start":1,"column_end":93}},{"value":"/ The struct and impl cover the QR Code Model 2 specification, supporting all versions","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":4081,"byte_end":4169,"line_start":93,"line_end":93,"column_start":1,"column_end":89}},{"value":"/ (sizes) from 1 to 40, all 4 error correction levels, and 4 character encoding modes.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":4170,"byte_end":4258,"line_start":94,"line_end":94,"column_start":1,"column_end":89}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":4259,"byte_end":4263,"line_start":95,"line_end":95,"column_start":1,"column_end":5}},{"value":"/ Ways to create a QR Code object:","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":4264,"byte_end":4300,"line_start":96,"line_end":96,"column_start":1,"column_end":37}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":4301,"byte_end":4305,"line_start":97,"line_end":97,"column_start":1,"column_end":5}},{"value":"/ - High level: Take the payload data and call `QrCode::encode_text()` or `QrCode::encode_binary()`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":4306,"byte_end":4408,"line_start":98,"line_end":98,"column_start":1,"column_end":103}},{"value":"/ - Mid level: Custom-make the list of segments and call","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":4409,"byte_end":4467,"line_start":99,"line_end":99,"column_start":1,"column_end":59}},{"value":"/   `QrCode::encode_segments()` or `QrCode::encode_segments_advanced()`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":4468,"byte_end":4542,"line_start":100,"line_end":100,"column_start":1,"column_end":75}},{"value":"/ - Low level: Custom-make the array of data codeword bytes (including segment","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":4543,"byte_end":4623,"line_start":101,"line_end":101,"column_start":1,"column_end":81}},{"value":"/   headers and final padding, excluding error correction codewords), supply the","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":4624,"byte_end":4706,"line_start":102,"line_end":102,"column_start":1,"column_end":83}},{"value":"/   appropriate version number, and call the `QrCode::encode_codewords()` constructor.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":4707,"byte_end":4795,"line_start":103,"line_end":103,"column_start":1,"column_end":89}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":4796,"byte_end":4800,"line_start":104,"line_end":104,"column_start":1,"column_end":5}},{"value":"/ (Note that all ways require supplying the desired error correction level.)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":4801,"byte_end":4879,"line_start":105,"line_end":105,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":4},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":6678,"byte_end":6689,"line_start":152,"line_end":152,"column_start":9,"column_end":20},"name":"encode_text","qualname":"<QrCode>::encode_text","value":"pub fn encode_text(&str, QrCodeEcc) -> Result<Self, DataTooLong>","parent":null,"children":[],"decl_id":null,"docs":" Returns a QR Code representing the given Unicode text string at the given error correction level.\n \n As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer Unicode\n code points (not UTF-8 code units) if the low error correction level is used. The smallest possible\n QR Code version is automatically chosen for the output. The ECC level of the result may be higher than\n the ecl argument if it can be done without increasing the version.\n \n Returns a wrapped `QrCode` if successful, or `Err` if the\n data is too long to fit in any version at the given ECC level.\n","sig":null,"attributes":[{"value":"/ Returns a QR Code representing the given Unicode text string at the given error correction level.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":6022,"byte_end":6123,"line_start":143,"line_end":143,"column_start":2,"column_end":103}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":6125,"byte_end":6129,"line_start":144,"line_end":144,"column_start":2,"column_end":6}},{"value":"/ As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer Unicode","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":6131,"byte_end":6247,"line_start":145,"line_end":145,"column_start":2,"column_end":118}},{"value":"/ code points (not UTF-8 code units) if the low error correction level is used. The smallest possible","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":6249,"byte_end":6352,"line_start":146,"line_end":146,"column_start":2,"column_end":105}},{"value":"/ QR Code version is automatically chosen for the output. The ECC level of the result may be higher than","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":6354,"byte_end":6460,"line_start":147,"line_end":147,"column_start":2,"column_end":108}},{"value":"/ the ecl argument if it can be done without increasing the version.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":6462,"byte_end":6532,"line_start":148,"line_end":148,"column_start":2,"column_end":72}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":6534,"byte_end":6538,"line_start":149,"line_end":149,"column_start":2,"column_end":6}},{"value":"/ Returns a wrapped `QrCode` if successful, or `Err` if the","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":6540,"byte_end":6601,"line_start":150,"line_end":150,"column_start":2,"column_end":63}},{"value":"/ data is too long to fit in any version at the given ECC level.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":6603,"byte_end":6669,"line_start":151,"line_end":151,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":5},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":7480,"byte_end":7493,"line_start":167,"line_end":167,"column_start":9,"column_end":22},"name":"encode_binary","qualname":"<QrCode>::encode_binary","value":"pub fn encode_binary(&[u8], QrCodeEcc) -> Result<Self, DataTooLong>","parent":null,"children":[],"decl_id":null,"docs":" Returns a QR Code representing the given binary data at the given error correction level.\n \n This function always encodes using the binary segment mode, not any text mode. The maximum number of\n bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n \n Returns a wrapped `QrCode` if successful, or `Err` if the\n data is too long to fit in any version at the given ECC level.\n","sig":null,"attributes":[{"value":"/ Returns a QR Code representing the given binary data at the given error correction level.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":6904,"byte_end":6997,"line_start":159,"line_end":159,"column_start":2,"column_end":95}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":6999,"byte_end":7003,"line_start":160,"line_end":160,"column_start":2,"column_end":6}},{"value":"/ This function always encodes using the binary segment mode, not any text mode. The maximum number of","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":7005,"byte_end":7109,"line_start":161,"line_end":161,"column_start":2,"column_end":106}},{"value":"/ bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":7111,"byte_end":7215,"line_start":162,"line_end":162,"column_start":2,"column_end":106}},{"value":"/ The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":7217,"byte_end":7334,"line_start":163,"line_end":163,"column_start":2,"column_end":119}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":7336,"byte_end":7340,"line_start":164,"line_end":164,"column_start":2,"column_end":6}},{"value":"/ Returns a wrapped `QrCode` if successful, or `Err` if the","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":7342,"byte_end":7403,"line_start":165,"line_end":165,"column_start":2,"column_end":63}},{"value":"/ data is too long to fit in any version at the given ECC level.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":7405,"byte_end":7471,"line_start":166,"line_end":166,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":7},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":8424,"byte_end":8439,"line_start":186,"line_end":186,"column_start":9,"column_end":24},"name":"encode_segments","qualname":"<QrCode>::encode_segments","value":"pub fn encode_segments(&[QrSegment], QrCodeEcc) -> Result<Self, DataTooLong>","parent":null,"children":[],"decl_id":null,"docs":" Returns a QR Code representing the given segments at the given error correction level.\n \n The smallest possible QR Code version is automatically chosen for the output. The ECC level\n of the result may be higher than the ecl argument if it can be done without increasing the version.\n \n This function allows the user to create a custom sequence of segments that switches\n between modes (such as alphanumeric and byte) to encode text in less space.\n This is a mid-level API; the high-level API is `encode_text()` and `encode_binary()`.\n \n Returns a wrapped `QrCode` if successful, or `Err` if the\n data is too long to fit in any version at the given ECC level.\n","sig":null,"attributes":[{"value":"/ Returns a QR Code representing the given segments at the given error correction level.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":7713,"byte_end":7803,"line_start":175,"line_end":175,"column_start":2,"column_end":92}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":7805,"byte_end":7809,"line_start":176,"line_end":176,"column_start":2,"column_end":6}},{"value":"/ The smallest possible QR Code version is automatically chosen for the output. The ECC level","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":7811,"byte_end":7906,"line_start":177,"line_end":177,"column_start":2,"column_end":97}},{"value":"/ of the result may be higher than the ecl argument if it can be done without increasing the version.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":7908,"byte_end":8011,"line_start":178,"line_end":178,"column_start":2,"column_end":105}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":8013,"byte_end":8017,"line_start":179,"line_end":179,"column_start":2,"column_end":6}},{"value":"/ This function allows the user to create a custom sequence of segments that switches","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":8019,"byte_end":8106,"line_start":180,"line_end":180,"column_start":2,"column_end":89}},{"value":"/ between modes (such as alphanumeric and byte) to encode text in less space.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":8108,"byte_end":8187,"line_start":181,"line_end":181,"column_start":2,"column_end":81}},{"value":"/ This is a mid-level API; the high-level API is `encode_text()` and `encode_binary()`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":8189,"byte_end":8278,"line_start":182,"line_end":182,"column_start":2,"column_end":91}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":8280,"byte_end":8284,"line_start":183,"line_end":183,"column_start":2,"column_end":6}},{"value":"/ Returns a wrapped `QrCode` if successful, or `Err` if the","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":8286,"byte_end":8347,"line_start":184,"line_end":184,"column_start":2,"column_end":63}},{"value":"/ data is too long to fit in any version at the given ECC level.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":8349,"byte_end":8415,"line_start":185,"line_end":185,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":9556,"byte_end":9580,"line_start":205,"line_end":205,"column_start":9,"column_end":33},"name":"encode_segments_advanced","qualname":"<QrCode>::encode_segments_advanced","value":"pub fn encode_segments_advanced(&[QrSegment], QrCodeEcc, Version, Version,\n                                Option<Mask>, bool)\n-> Result<Self, DataTooLong>","parent":null,"children":[],"decl_id":null,"docs":" Returns a QR Code representing the given segments with the given encoding parameters.\n \n The smallest possible QR Code version within the given range is automatically\n chosen for the output. Iff boostecl is `true`, then the ECC level of the result\n may be higher than the ecl argument if it can be done without increasing the\n version. The mask number is either between 0 to 7 (inclusive) to force that\n mask, or `None` to automatically choose an appropriate mask (which may be slow).\n \n This function allows the user to create a custom sequence of segments that switches\n between modes (such as alphanumeric and byte) to encode text in less space.\n This is a mid-level API; the high-level API is `encode_text()` and `encode_binary()`.\n \n Returns a wrapped `QrCode` if successful, or `Err` if the data is too\n long to fit in any version in the given range at the given ECC level.\n","sig":null,"attributes":[{"value":"/ Returns a QR Code representing the given segments with the given encoding parameters.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":8612,"byte_end":8701,"line_start":191,"line_end":191,"column_start":2,"column_end":91}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":8703,"byte_end":8707,"line_start":192,"line_end":192,"column_start":2,"column_end":6}},{"value":"/ The smallest possible QR Code version within the given range is automatically","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":8709,"byte_end":8790,"line_start":193,"line_end":193,"column_start":2,"column_end":83}},{"value":"/ chosen for the output. Iff boostecl is `true`, then the ECC level of the result","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":8792,"byte_end":8875,"line_start":194,"line_end":194,"column_start":2,"column_end":85}},{"value":"/ may be higher than the ecl argument if it can be done without increasing the","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":8877,"byte_end":8957,"line_start":195,"line_end":195,"column_start":2,"column_end":82}},{"value":"/ version. The mask number is either between 0 to 7 (inclusive) to force that","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":8959,"byte_end":9038,"line_start":196,"line_end":196,"column_start":2,"column_end":81}},{"value":"/ mask, or `None` to automatically choose an appropriate mask (which may be slow).","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":9040,"byte_end":9124,"line_start":197,"line_end":197,"column_start":2,"column_end":86}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":9126,"byte_end":9130,"line_start":198,"line_end":198,"column_start":2,"column_end":6}},{"value":"/ This function allows the user to create a custom sequence of segments that switches","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":9132,"byte_end":9219,"line_start":199,"line_end":199,"column_start":2,"column_end":89}},{"value":"/ between modes (such as alphanumeric and byte) to encode text in less space.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":9221,"byte_end":9300,"line_start":200,"line_end":200,"column_start":2,"column_end":81}},{"value":"/ This is a mid-level API; the high-level API is `encode_text()` and `encode_binary()`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":9302,"byte_end":9391,"line_start":201,"line_end":201,"column_start":2,"column_end":91}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":9393,"byte_end":9397,"line_start":202,"line_end":202,"column_start":2,"column_end":6}},{"value":"/ Returns a wrapped `QrCode` if successful, or `Err` if the data is too","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":9399,"byte_end":9472,"line_start":203,"line_end":203,"column_start":2,"column_end":75}},{"value":"/ long to fit in any version in the given range at the given ECC level.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":9474,"byte_end":9547,"line_start":204,"line_end":204,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":10},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":12556,"byte_end":12572,"line_start":280,"line_end":280,"column_start":9,"column_end":25},"name":"encode_codewords","qualname":"<QrCode>::encode_codewords","value":"pub fn encode_codewords(Version, QrCodeEcc, &[u8], Option<Mask>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new QR Code with the given version number,\n error correction level, data codeword bytes, and mask number.\n \n This is a low-level API that most users should not use directly.\n A mid-level API is the `encode_segments()` function.\n","sig":null,"attributes":[{"value":"/ Creates a new QR Code with the given version number,","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":12290,"byte_end":12346,"line_start":275,"line_end":275,"column_start":2,"column_end":58}},{"value":"/ error correction level, data codeword bytes, and mask number.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":12348,"byte_end":12413,"line_start":276,"line_end":276,"column_start":2,"column_end":67}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":12415,"byte_end":12419,"line_start":277,"line_end":277,"column_start":2,"column_end":6}},{"value":"/ This is a low-level API that most users should not use directly.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":12421,"byte_end":12489,"line_start":278,"line_end":278,"column_start":2,"column_end":70}},{"value":"/ A mid-level API is the `encode_segments()` function.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":12491,"byte_end":12547,"line_start":279,"line_end":279,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":13983,"byte_end":13990,"line_start":326,"line_end":326,"column_start":9,"column_end":16},"name":"version","qualname":"<QrCode>::version","value":"pub fn version(&Self) -> Version","parent":null,"children":[],"decl_id":null,"docs":" Returns this QR Code's version, in the range [1, 40].\n","sig":null,"attributes":[{"value":"/ Returns this QR Code's version, in the range [1, 40].","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":13917,"byte_end":13974,"line_start":325,"line_end":325,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":14099,"byte_end":14103,"line_start":332,"line_end":332,"column_start":9,"column_end":13},"name":"size","qualname":"<QrCode>::size","value":"pub fn size(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns this QR Code's size, in the range [21, 177].\n","sig":null,"attributes":[{"value":"/ Returns this QR Code's size, in the range [21, 177].","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":14034,"byte_end":14090,"line_start":331,"line_end":331,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":14199,"byte_end":14221,"line_start":338,"line_end":338,"column_start":9,"column_end":31},"name":"error_correction_level","qualname":"<QrCode>::error_correction_level","value":"pub fn error_correction_level(&Self) -> QrCodeEcc","parent":null,"children":[],"decl_id":null,"docs":" Returns this QR Code's error correction level.\n","sig":null,"attributes":[{"value":"/ Returns this QR Code's error correction level.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":14140,"byte_end":14190,"line_start":337,"line_end":337,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":14342,"byte_end":14346,"line_start":344,"line_end":344,"column_start":9,"column_end":13},"name":"mask","qualname":"<QrCode>::mask","value":"pub fn mask(&Self) -> Mask","parent":null,"children":[],"decl_id":null,"docs":" Returns this QR Code's mask, in the range [0, 7].\n","sig":null,"attributes":[{"value":"/ Returns this QR Code's mask, in the range [0, 7].","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":14280,"byte_end":14333,"line_start":343,"line_end":343,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":14661,"byte_end":14671,"line_start":354,"line_end":354,"column_start":9,"column_end":19},"name":"get_module","qualname":"<QrCode>::get_module","value":"pub fn get_module(&Self, i32, i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the color of the module (pixel) at the given coordinates,\n which is `false` for white or `true` for black.\n \n The top left corner has the coordinates (x=0, y=0). If the given\n coordinates are out of bounds, then `false` (white) is returned.\n","sig":null,"attributes":[{"value":"/ Returns the color of the module (pixel) at the given coordinates,","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":14384,"byte_end":14453,"line_start":349,"line_end":349,"column_start":2,"column_end":71}},{"value":"/ which is `false` for white or `true` for black.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":14455,"byte_end":14506,"line_start":350,"line_end":350,"column_start":2,"column_end":53}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":14508,"byte_end":14512,"line_start":351,"line_end":351,"column_start":2,"column_end":6}},{"value":"/ The top left corner has the coordinates (x=0, y=0). If the given","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":14514,"byte_end":14582,"line_start":352,"line_end":352,"column_start":2,"column_end":70}},{"value":"/ coordinates are out of bounds, then `false` (white) is returned.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":14584,"byte_end":14652,"line_start":353,"line_end":353,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":15395,"byte_end":15408,"line_start":375,"line_end":375,"column_start":9,"column_end":22},"name":"to_svg_string","qualname":"<QrCode>::to_svg_string","value":"pub fn to_svg_string(&Self, i32) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns a string of SVG code for an image depicting\n this QR Code, with the given number of border modules.\n \n The string always uses Unix newlines (\\n), regardless of the platform.\n","sig":null,"attributes":[{"value":"/ Returns a string of SVG code for an image depicting","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":15189,"byte_end":15244,"line_start":371,"line_end":371,"column_start":2,"column_end":57}},{"value":"/ this QR Code, with the given number of border modules.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":15246,"byte_end":15304,"line_start":372,"line_end":372,"column_start":2,"column_end":60}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":15306,"byte_end":15310,"line_start":373,"line_end":373,"column_start":2,"column_end":6}},{"value":"/ The string always uses Unix newlines (\\n), regardless of the platform.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":15312,"byte_end":15386,"line_start":374,"line_end":374,"column_start":2,"column_end":76}}]},{"kind":"Const","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":32833,"byte_end":32851,"line_start":888,"line_end":888,"column_start":11,"column_end":29},"name":"QrCode_MIN_VERSION","qualname":"::QrCode_MIN_VERSION","value":"Version","parent":null,"children":[],"decl_id":null,"docs":" The minimum version number supported in the QR Code Model 2 standard.\n","sig":null,"attributes":[{"value":"/ The minimum version number supported in the QR Code Model 2 standard.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":32749,"byte_end":32822,"line_start":887,"line_end":887,"column_start":1,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":32961,"byte_end":32979,"line_start":891,"line_end":891,"column_start":11,"column_end":29},"name":"QrCode_MAX_VERSION","qualname":"::QrCode_MAX_VERSION","value":"Version","parent":null,"children":[],"decl_id":null,"docs":" The maximum version number supported in the QR Code Model 2 standard.\n","sig":null,"attributes":[{"value":"/ The maximum version number supported in the QR Code Model 2 standard.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":32877,"byte_end":32950,"line_start":890,"line_end":890,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":35451,"byte_end":35454,"line_start":927,"line_end":927,"column_start":2,"column_end":5},"name":"Low","qualname":"::QrCodeEcc::Low","value":"QrCodeEcc::Low","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" The QR Code can tolerate about  7% erroneous codewords.\n","sig":null,"attributes":[{"value":"/ The QR Code can tolerate about  7% erroneous codewords.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":35390,"byte_end":35449,"line_start":926,"line_end":926,"column_start":2,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":35523,"byte_end":35529,"line_start":929,"line_end":929,"column_start":2,"column_end":8},"name":"Medium","qualname":"::QrCodeEcc::Medium","value":"QrCodeEcc::Medium","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" The QR Code can tolerate about 15% erroneous codewords.\n","sig":null,"attributes":[{"value":"/ The QR Code can tolerate about 15% erroneous codewords.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":35462,"byte_end":35521,"line_start":928,"line_end":928,"column_start":2,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":35595,"byte_end":35603,"line_start":931,"line_end":931,"column_start":2,"column_end":10},"name":"Quartile","qualname":"::QrCodeEcc::Quartile","value":"QrCodeEcc::Quartile","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" The QR Code can tolerate about 25% erroneous codewords.\n","sig":null,"attributes":[{"value":"/ The QR Code can tolerate about 25% erroneous codewords.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":35534,"byte_end":35593,"line_start":930,"line_end":930,"column_start":2,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":35667,"byte_end":35671,"line_start":933,"line_end":933,"column_start":2,"column_end":6},"name":"High","qualname":"::QrCodeEcc::High","value":"QrCodeEcc::High","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" The QR Code can tolerate about 30% erroneous codewords.\n","sig":null,"attributes":[{"value":"/ The QR Code can tolerate about 30% erroneous codewords.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":35606,"byte_end":35665,"line_start":932,"line_end":932,"column_start":2,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":35377,"byte_end":35386,"line_start":925,"line_end":925,"column_start":10,"column_end":19},"name":"QrCodeEcc","qualname":"::QrCodeEcc","value":"pub enum QrCodeEcc {\n\n    /// The QR Code can tolerate about  7% erroneous codewords.\n    Low,\n\n    /// The QR Code can tolerate about 15% erroneous codewords.\n    Medium,\n\n    /// The QR Code can tolerate about 25% erroneous codewords.\n    Quartile,\n\n    /// The QR Code can tolerate about 30% erroneous codewords.\n    High,\n}","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":129}],"decl_id":null,"docs":" The error correction level in a QR Code symbol.\n","sig":null,"attributes":[{"value":"/ The error correction level in a QR Code symbol.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":35254,"byte_end":35305,"line_start":923,"line_end":923,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":36892,"byte_end":36901,"line_start":981,"line_end":981,"column_start":12,"column_end":21},"name":"QrSegment","qualname":"::QrSegment","value":"QrSegment {  }","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149}],"decl_id":null,"docs":" A segment of character/binary/control data in a QR Code symbol.\n \n Instances of this struct are immutable.\n \n The mid-level way to create a segment is to take the payload data\n and call a static factory function such as `QrSegment::make_numeric()`.\n The low-level way to create a segment is to custom-make the bit buffer\n and call the `QrSegment::new()` constructor with appropriate values.\n \n This segment struct imposes no length restrictions, but QR Codes have restrictions.\n Even in the most favorable conditions, a QR Code can only hold 7089 characters of data.\n Any segment longer than this is meaningless for the purpose of generating QR Codes.\n","sig":null,"attributes":[{"value":"/ A segment of character/binary/control data in a QR Code symbol.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":36160,"byte_end":36227,"line_start":968,"line_end":968,"column_start":1,"column_end":68}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":36228,"byte_end":36232,"line_start":969,"line_end":969,"column_start":1,"column_end":5}},{"value":"/ Instances of this struct are immutable.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":36233,"byte_end":36276,"line_start":970,"line_end":970,"column_start":1,"column_end":44}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":36277,"byte_end":36281,"line_start":971,"line_end":971,"column_start":1,"column_end":5}},{"value":"/ The mid-level way to create a segment is to take the payload data","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":36282,"byte_end":36351,"line_start":972,"line_end":972,"column_start":1,"column_end":70}},{"value":"/ and call a static factory function such as `QrSegment::make_numeric()`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":36352,"byte_end":36427,"line_start":973,"line_end":973,"column_start":1,"column_end":76}},{"value":"/ The low-level way to create a segment is to custom-make the bit buffer","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":36428,"byte_end":36502,"line_start":974,"line_end":974,"column_start":1,"column_end":75}},{"value":"/ and call the `QrSegment::new()` constructor with appropriate values.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":36503,"byte_end":36575,"line_start":975,"line_end":975,"column_start":1,"column_end":73}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":36576,"byte_end":36580,"line_start":976,"line_end":976,"column_start":1,"column_end":5}},{"value":"/ This segment struct imposes no length restrictions, but QR Codes have restrictions.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":36581,"byte_end":36668,"line_start":977,"line_end":977,"column_start":1,"column_end":88}},{"value":"/ Even in the most favorable conditions, a QR Code can only hold 7089 characters of data.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":36669,"byte_end":36760,"line_start":978,"line_end":978,"column_start":1,"column_end":92}},{"value":"/ Any segment longer than this is meaningless for the purpose of generating QR Codes.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":36761,"byte_end":36848,"line_start":979,"line_end":979,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":37631,"byte_end":37641,"line_start":1006,"line_end":1006,"column_start":9,"column_end":19},"name":"make_bytes","qualname":"<QrSegment>::make_bytes","value":"pub fn make_bytes(&[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a segment representing the given binary data encoded in byte mode.\n \n All input byte slices are acceptable.\n \n Any text string can be converted to UTF-8 bytes and encoded as a byte mode segment.\n","sig":null,"attributes":[{"value":"/ Returns a segment representing the given binary data encoded in byte mode.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":37400,"byte_end":37478,"line_start":1001,"line_end":1001,"column_start":2,"column_end":80}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":37480,"byte_end":37484,"line_start":1002,"line_end":1002,"column_start":2,"column_end":6}},{"value":"/ All input byte slices are acceptable.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":37486,"byte_end":37527,"line_start":1003,"line_end":1003,"column_start":2,"column_end":43}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":37529,"byte_end":37533,"line_start":1004,"line_end":1004,"column_start":2,"column_end":6}},{"value":"/ Any text string can be converted to UTF-8 bytes and encoded as a byte mode segment.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":37535,"byte_end":37622,"line_start":1005,"line_end":1005,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":38016,"byte_end":38028,"line_start":1018,"line_end":1018,"column_start":9,"column_end":21},"name":"make_numeric","qualname":"<QrSegment>::make_numeric","value":"pub fn make_numeric(&[char]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a segment representing the given string of decimal digits encoded in numeric mode.\n \n Panics if the string contains non-digit characters.\n","sig":null,"attributes":[{"value":"/ Returns a segment representing the given string of decimal digits encoded in numeric mode.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":37850,"byte_end":37944,"line_start":1015,"line_end":1015,"column_start":2,"column_end":96}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":37946,"byte_end":37950,"line_start":1016,"line_end":1016,"column_start":2,"column_end":6}},{"value":"/ Panics if the string contains non-digit characters.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":37952,"byte_end":38007,"line_start":1017,"line_end":1017,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":38966,"byte_end":38983,"line_start":1045,"line_end":1045,"column_start":9,"column_end":26},"name":"make_alphanumeric","qualname":"<QrSegment>::make_alphanumeric","value":"pub fn make_alphanumeric(&[char]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a segment representing the given text string encoded in alphanumeric mode.\n \n The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n \n Panics if the string contains non-encodable characters.\n","sig":null,"attributes":[{"value":"/ Returns a segment representing the given text string encoded in alphanumeric mode.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":38657,"byte_end":38743,"line_start":1039,"line_end":1039,"column_start":2,"column_end":88}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":38745,"byte_end":38749,"line_start":1040,"line_end":1040,"column_start":2,"column_end":6}},{"value":"/ The characters allowed are: 0 to 9, A to Z (uppercase only), space,","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":38751,"byte_end":38822,"line_start":1041,"line_end":1041,"column_start":2,"column_end":73}},{"value":"/ dollar, percent, asterisk, plus, hyphen, period, slash, colon.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":38824,"byte_end":38890,"line_start":1042,"line_end":1042,"column_start":2,"column_end":68}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":38892,"byte_end":38896,"line_start":1043,"line_end":1043,"column_start":2,"column_end":6}},{"value":"/ Panics if the string contains non-encodable characters.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":38898,"byte_end":38957,"line_start":1044,"line_end":1044,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":39851,"byte_end":39864,"line_start":1071,"line_end":1071,"column_start":9,"column_end":22},"name":"make_segments","qualname":"<QrSegment>::make_segments","value":"pub fn make_segments(&[char]) -> Vec<Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of zero or more segments to represent the given Unicode text string.\n \n The result may use various segment modes and switch\n modes to optimize the length of the bit stream.\n","sig":null,"attributes":[{"value":"/ Returns a list of zero or more segments to represent the given Unicode text string.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":39639,"byte_end":39726,"line_start":1067,"line_end":1067,"column_start":2,"column_end":89}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":39728,"byte_end":39732,"line_start":1068,"line_end":1068,"column_start":2,"column_end":6}},{"value":"/ The result may use various segment modes and switch","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":39734,"byte_end":39789,"line_start":1069,"line_end":1069,"column_start":2,"column_end":57}},{"value":"/ modes to optimize the length of the bit stream.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":39791,"byte_end":39842,"line_start":1070,"line_end":1070,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":40352,"byte_end":40360,"line_start":1087,"line_end":1087,"column_start":9,"column_end":17},"name":"make_eci","qualname":"<QrSegment>::make_eci","value":"pub fn make_eci(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a segment representing an Extended Channel Interpretation\n (ECI) designator with the given assignment value.\n","sig":null,"attributes":[{"value":"/ Returns a segment representing an Extended Channel Interpretation","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":40219,"byte_end":40288,"line_start":1085,"line_end":1085,"column_start":2,"column_end":71}},{"value":"/ (ECI) designator with the given assignment value.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":40290,"byte_end":40343,"line_start":1086,"line_end":1086,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":41057,"byte_end":41060,"line_start":1110,"line_end":1110,"column_start":9,"column_end":12},"name":"new","qualname":"<QrSegment>::new","value":"pub fn new(QrSegmentMode, usize, Vec<bool>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new QR Code segment with the given attributes and data.\n \n The character count (numchars) must agree with the mode and\n the bit buffer length, but the constraint isn't checked.\n","sig":null,"attributes":[{"value":"/ Creates a new QR Code segment with the given attributes and data.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":40846,"byte_end":40915,"line_start":1106,"line_end":1106,"column_start":2,"column_end":71}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":40917,"byte_end":40921,"line_start":1107,"line_end":1107,"column_start":2,"column_end":6}},{"value":"/ The character count (numchars) must agree with the mode and","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":40923,"byte_end":40986,"line_start":1108,"line_end":1108,"column_start":2,"column_end":65}},{"value":"/ the bit buffer length, but the constraint isn't checked.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":40988,"byte_end":41048,"line_start":1109,"line_end":1109,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":41262,"byte_end":41266,"line_start":1118,"line_end":1118,"column_start":9,"column_end":13},"name":"mode","qualname":"<QrSegment>::mode","value":"pub fn mode(&Self) -> QrSegmentMode","parent":null,"children":[],"decl_id":null,"docs":" Returns the mode indicator of this segment.\n","sig":null,"attributes":[{"value":"/ Returns the mode indicator of this segment.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":41206,"byte_end":41253,"line_start":1117,"line_end":1117,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":41376,"byte_end":41385,"line_start":1124,"line_end":1124,"column_start":9,"column_end":18},"name":"num_chars","qualname":"<QrSegment>::num_chars","value":"pub fn num_chars(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the character count field of this segment.\n","sig":null,"attributes":[{"value":"/ Returns the character count field of this segment.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":41313,"byte_end":41367,"line_start":1123,"line_end":1123,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":41479,"byte_end":41483,"line_start":1130,"line_end":1130,"column_start":9,"column_end":13},"name":"data","qualname":"<QrSegment>::data","value":"pub fn data(&Self) -> &Vec<bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns the data bits of this segment.\n","sig":null,"attributes":[{"value":"/ Returns the data bits of this segment.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":41428,"byte_end":41470,"line_start":1129,"line_end":1129,"column_start":2,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":43327,"byte_end":43334,"line_start":1183,"line_end":1183,"column_start":2,"column_end":9},"name":"Numeric","qualname":"::QrSegmentMode::Numeric","value":"QrSegmentMode::Numeric","parent":{"krate":0,"index":159},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":43337,"byte_end":43349,"line_start":1184,"line_end":1184,"column_start":2,"column_end":14},"name":"Alphanumeric","qualname":"::QrSegmentMode::Alphanumeric","value":"QrSegmentMode::Alphanumeric","parent":{"krate":0,"index":159},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":43352,"byte_end":43356,"line_start":1185,"line_end":1185,"column_start":2,"column_end":6},"name":"Byte","qualname":"::QrSegmentMode::Byte","value":"QrSegmentMode::Byte","parent":{"krate":0,"index":159},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":43359,"byte_end":43364,"line_start":1186,"line_end":1186,"column_start":2,"column_end":7},"name":"Kanji","qualname":"::QrSegmentMode::Kanji","value":"QrSegmentMode::Kanji","parent":{"krate":0,"index":159},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":43367,"byte_end":43370,"line_start":1187,"line_end":1187,"column_start":2,"column_end":5},"name":"Eci","qualname":"::QrSegmentMode::Eci","value":"QrSegmentMode::Eci","parent":{"krate":0,"index":159},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":43310,"byte_end":43323,"line_start":1182,"line_end":1182,"column_start":10,"column_end":23},"name":"QrSegmentMode","qualname":"::QrSegmentMode","value":"pub enum QrSegmentMode { Numeric, Alphanumeric, Byte, Kanji, Eci, }","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168}],"decl_id":null,"docs":" Describes how a segment's data bits are interpreted.\n","sig":null,"attributes":[{"value":"/ Describes how a segment's data bits are interpreted.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":43199,"byte_end":43255,"line_start":1180,"line_end":1180,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44328,"byte_end":44337,"line_start":1229,"line_end":1229,"column_start":12,"column_end":21},"name":"BitBuffer","qualname":"::BitBuffer","value":"","parent":null,"children":[],"decl_id":null,"docs":" An appendable sequence of bits (0s and 1s).\n \n Mainly used by QrSegment.\n","sig":null,"attributes":[{"value":"/ An appendable sequence of bits (0s and 1s).","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44234,"byte_end":44281,"line_start":1226,"line_end":1226,"column_start":1,"column_end":48}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44282,"byte_end":44286,"line_start":1227,"line_end":1227,"column_start":1,"column_end":5}},{"value":"/ Mainly used by QrSegment.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44287,"byte_end":44316,"line_start":1228,"line_end":1228,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44338,"byte_end":44351,"line_start":1229,"line_end":1229,"column_start":22,"column_end":35},"name":"0","qualname":"::BitBuffer::0","value":"std::vec::Vec<bool>","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44530,"byte_end":44541,"line_start":1236,"line_end":1236,"column_start":9,"column_end":20},"name":"append_bits","qualname":"<BitBuffer>::append_bits","value":"pub fn append_bits(&mut Self, u32, u8)","parent":null,"children":[],"decl_id":null,"docs":" Appends the given number of low-order bits of the given value to this buffer.\n \n Requires len &#x2264; 31 and val &lt; 2<sup>len</sup>.\n","sig":null,"attributes":[{"value":"/ Appends the given number of low-order bits of the given value to this buffer.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44374,"byte_end":44455,"line_start":1233,"line_end":1233,"column_start":2,"column_end":83}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44457,"byte_end":44461,"line_start":1234,"line_end":1234,"column_start":2,"column_end":6}},{"value":"/ Requires len &#x2264; 31 and val &lt; 2<sup>len</sup>.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44463,"byte_end":44521,"line_start":1235,"line_end":1235,"column_start":2,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":45606,"byte_end":45617,"line_start":1259,"line_end":1259,"column_start":12,"column_end":23},"name":"DataTooLong","qualname":"::DataTooLong","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type when the supplied data does not fit any QR Code version.","sig":null,"attributes":[{"value":"/ The error type when the supplied data does not fit any QR Code version.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44776,"byte_end":44851,"line_start":1246,"line_end":1246,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44852,"byte_end":44855,"line_start":1247,"line_end":1247,"column_start":1,"column_end":4}},{"value":"/ Ways to handle this exception include:","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44856,"byte_end":44898,"line_start":1248,"line_end":1248,"column_start":1,"column_end":43}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44899,"byte_end":44903,"line_start":1249,"line_end":1249,"column_start":1,"column_end":5}},{"value":"/ - Decrease the error correction level if it was greater than `QrCodeEcc::Low`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44904,"byte_end":44986,"line_start":1250,"line_end":1250,"column_start":1,"column_end":83}},{"value":"/ - If the `encode_segments_advanced()` function was called, then increase the maxversion","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44987,"byte_end":45078,"line_start":1251,"line_end":1251,"column_start":1,"column_end":92}},{"value":"/   argument if it was less than `QrCode_MAX_VERSION`. (This advice does not apply to the","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":45079,"byte_end":45170,"line_start":1252,"line_end":1252,"column_start":1,"column_end":92}},{"value":"/   other factory functions because they search all versions up to `QrCode_MAX_VERSION`.)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":45171,"byte_end":45262,"line_start":1253,"line_end":1253,"column_start":1,"column_end":92}},{"value":"/ - Split the text data into better or optimal segments in order to reduce the number of bits required.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":45263,"byte_end":45368,"line_start":1254,"line_end":1254,"column_start":1,"column_end":106}},{"value":"/ - Change the text or binary data to be shorter.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":45369,"byte_end":45420,"line_start":1255,"line_end":1255,"column_start":1,"column_end":52}},{"value":"/ - Change the text to fit the character set of a particular segment mode (e.g. alphanumeric).","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":45421,"byte_end":45517,"line_start":1256,"line_end":1256,"column_start":1,"column_end":97}},{"value":"/ - Propagate the error upward to the caller/user.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":45518,"byte_end":45570,"line_start":1257,"line_end":1257,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":45971,"byte_end":45978,"line_start":1276,"line_end":1276,"column_start":12,"column_end":19},"name":"Version","qualname":"::Version","value":"","parent":null,"children":[],"decl_id":null,"docs":" A number between 1 and 40 (inclusive).\n","sig":null,"attributes":[{"value":"/ A number between 1 and 40 (inclusive).","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":45855,"byte_end":45897,"line_start":1274,"line_end":1274,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":46123,"byte_end":46126,"line_start":1282,"line_end":1282,"column_start":9,"column_end":12},"name":"new","qualname":"<Version>::new","value":"pub fn new(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a version object from the given number.\n \n Panics if the number is outside the range [1, 40].\n","sig":null,"attributes":[{"value":"/ Creates a version object from the given number.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":46001,"byte_end":46052,"line_start":1279,"line_end":1279,"column_start":2,"column_end":53}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":46054,"byte_end":46058,"line_start":1280,"line_end":1280,"column_start":2,"column_end":6}},{"value":"/ Panics if the number is outside the range [1, 40].","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":46060,"byte_end":46114,"line_start":1281,"line_end":1281,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":46340,"byte_end":46345,"line_start":1288,"line_end":1288,"column_start":9,"column_end":14},"name":"value","qualname":"<Version>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the value, which is in the range [1, 40].\n","sig":null,"attributes":[{"value":"/ Returns the value, which is in the range [1, 40].","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":46278,"byte_end":46331,"line_start":1287,"line_end":1287,"column_start":2,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":46491,"byte_end":46495,"line_start":1296,"line_end":1296,"column_start":12,"column_end":16},"name":"Mask","qualname":"::Mask","value":"","parent":null,"children":[],"decl_id":null,"docs":" A number between 0 and 7 (inclusive).\n","sig":null,"attributes":[{"value":"/ A number between 0 and 7 (inclusive).","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":46376,"byte_end":46417,"line_start":1294,"line_end":1294,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":46633,"byte_end":46636,"line_start":1302,"line_end":1302,"column_start":9,"column_end":12},"name":"new","qualname":"<Mask>::new","value":"pub fn new(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a mask object from the given number.\n \n Panics if the number is outside the range [0, 7].\n","sig":null,"attributes":[{"value":"/ Creates a mask object from the given number.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":46515,"byte_end":46563,"line_start":1299,"line_end":1299,"column_start":2,"column_end":50}},{"value":"/ ","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":46565,"byte_end":46569,"line_start":1300,"line_end":1300,"column_start":2,"column_end":6}},{"value":"/ Panics if the number is outside the range [0, 7].","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":46571,"byte_end":46624,"line_start":1301,"line_end":1301,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":46786,"byte_end":46791,"line_start":1308,"line_end":1308,"column_start":9,"column_end":14},"name":"value","qualname":"<Mask>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the value, which is in the range [0, 7].\n","sig":null,"attributes":[{"value":"/ Returns the value, which is in the range [0, 7].","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":46725,"byte_end":46777,"line_start":1307,"line_end":1307,"column_start":2,"column_end":54}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":5955,"byte_end":5961,"line_start":139,"line_end":139,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":31403,"byte_end":31416,"line_start":837,"line_end":837,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":35686,"byte_end":35695,"line_start":937,"line_end":937,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":37331,"byte_end":37340,"line_start":997,"line_end":997,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":43381,"byte_end":43394,"line_start":1191,"line_end":1191,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44361,"byte_end":44370,"line_start":1232,"line_end":1232,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":45655,"byte_end":45666,"line_start":1261,"line_end":1261,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":45745,"byte_end":45756,"line_start":1267,"line_end":1267,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":45990,"byte_end":45997,"line_start":1278,"line_end":1278,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":46507,"byte_end":46511,"line_start":1298,"line_end":1298,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":5955,"byte_end":5961,"line_start":139,"line_end":139,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":106},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":31403,"byte_end":31416,"line_start":837,"line_end":837,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":39},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":35686,"byte_end":35695,"line_start":937,"line_end":937,"column_start":6,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":122},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":37331,"byte_end":37340,"line_start":997,"line_end":997,"column_start":6,"column_end":15},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":146},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":43381,"byte_end":43394,"line_start":1191,"line_end":1191,"column_start":6,"column_end":19},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":159},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":44361,"byte_end":44370,"line_start":1232,"line_end":1232,"column_start":6,"column_end":15},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":89},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":45655,"byte_end":45666,"line_start":1261,"line_end":1261,"column_start":28,"column_end":39},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":181},"to":{"krate":1,"index":1750}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":45745,"byte_end":45756,"line_start":1267,"line_end":1267,"column_start":28,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":181},"to":{"krate":2,"index":6965}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":45990,"byte_end":45997,"line_start":1278,"line_end":1278,"column_start":6,"column_end":13},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qrcodegen-1.6.0\\src\\lib.rs","byte_start":46507,"byte_end":46511,"line_start":1298,"line_end":1298,"column_start":6,"column_end":10},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":211},"to":{"krate":4294967295,"index":4294967295}}]}
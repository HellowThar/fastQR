{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4","program":"C:\\Users\\Jamison\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","weezl","--edition=2018","C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=18dd0569211857f0","-C","extra-filename=-18dd0569211857f0","--out-dir","c:\\Users\\Jamison\\Desktop\\Web-Dev\\svelte_wasm_qr_code_encoder\\qr_code_encoder\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Jamison\\Desktop\\Web-Dev\\svelte_wasm_qr_code_encoder\\qr_code_encoder\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Jamison\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Jamison\\Desktop\\Web-Dev\\svelte_wasm_qr_code_encoder\\qr_code_encoder\\target\\rls\\debug\\deps\\libweezl-18dd0569211857f0.rmeta"},"prelude":{"crate_id":{"name":"weezl","disambiguator":[11626711031811231585,2261120494736795986]},"crate_root":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src","external_crates":[{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[15394396593765937133,15104794829170053384]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","num":2,"id":{"name":"core","disambiguator":[14223085168939843507,9453778982390123811]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10495964697894269666,7444397110794681726]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5630579929119936438,10747952327389013202]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[755004289757070725,4528322009891643596]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12293211462733931105,3605749939090106910]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14880717690889174640,9014378682587101436]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[1733233879246965746,6308927592973156139]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2578852399168599952,875302055328020592]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15050766551219055192,6843698544963456792]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[14716868785672998615,14481457355720881040]}},{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[7183069464598737283,14932178614966804545]}}],"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":0,"byte_end":4257,"line_start":1,"line_end":128,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":3449,"byte_end":3461,"line_start":101,"line_end":101,"column_start":22,"column_end":34},"alias_span":null,"name":"StreamResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":3485,"byte_end":3497,"line_start":102,"line_end":102,"column_start":23,"column_end":35},"alias_span":null,"name":"BufferResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":420},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":3499,"byte_end":3507,"line_start":102,"line_end":102,"column_start":37,"column_end":45},"alias_span":null,"name":"LzwError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":3509,"byte_end":3518,"line_start":102,"line_end":102,"column_start":47,"column_end":56},"alias_span":null,"name":"LzwStatus","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":0,"byte_end":4257,"line_start":1,"line_end":128,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":337},{"krate":0,"index":345},{"krate":0,"index":344},{"krate":0,"index":342},{"krate":0,"index":8},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":170},{"krate":0,"index":320},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336}],"decl_id":null,"docs":" # LZW decoder and encoder","sig":null,"attributes":[{"value":"/ # LZW decoder and encoder","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":0,"byte_end":29,"line_start":1,"line_end":1,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":30,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crates provides an `Encoder` and a `Decoder` in their respective modules. The code words","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":34,"byte_end":131,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ are written from and to bit byte slices (or streams) where it is possible to write either the","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":132,"byte_end":229,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"/ most or least significant bits first. The maximum possible code size is 12 bits, the smallest","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":230,"byte_end":327,"line_start":5,"line_end":5,"column_start":1,"column_end":98}},{"value":"/ available code size is 2 bits.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":328,"byte_end":362,"line_start":6,"line_end":6,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":363,"byte_end":366,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The de- and encoder expect the LZW stream to start with a clear code and end with an","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":367,"byte_end":455,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"/ end code which are defined as follows:","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":456,"byte_end":498,"line_start":9,"line_end":9,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":499,"byte_end":502,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/  * `CLEAR_CODE == 1 << min_code_size`","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":503,"byte_end":544,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/  * `END_CODE   == CLEAR_CODE + 1`","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":545,"byte_end":582,"line_start":12,"line_end":12,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":583,"byte_end":586,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ For optimal performance, all buffers and input and output slices should be as large as possible","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":587,"byte_end":686,"line_start":14,"line_end":14,"column_start":1,"column_end":100}},{"value":"/ and at least 2048 bytes long. This extends to input streams which should have similarly sized","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":687,"byte_end":784,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ buffers. This library uses Rust's standard allocation interfaces (`Box` and `Vec` to be","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":785,"byte_end":876,"line_start":16,"line_end":16,"column_start":1,"column_end":92}},{"value":"/ precise). Since there are no ways to handle allocation errors it is not recommended to operate","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":877,"byte_end":975,"line_start":17,"line_end":17,"column_start":1,"column_end":99}},{"value":"/ it on 16-bit targets.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":976,"byte_end":1001,"line_start":18,"line_end":18,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1002,"byte_end":1005,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Exemplary use of the encoder:","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1006,"byte_end":1039,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1040,"byte_end":1043,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ use weezl::{BitOrder, encode::Encoder};","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1141,"byte_end":1184,"line_start":24,"line_end":24,"column_start":1,"column_end":44}},{"value":"/ let size = 8;","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1185,"byte_end":1202,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"/ let data = b\"TOBEORNOTTOBEORTOBEORNOT\";","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1203,"byte_end":1246,"line_start":26,"line_end":26,"column_start":1,"column_end":44}},{"value":"/ let mut compressed = vec![];","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1247,"byte_end":1279,"line_start":27,"line_end":27,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1280,"byte_end":1283,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let mut enc = Encoder::new(BitOrder::Msb, size);","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1284,"byte_end":1336,"line_start":29,"line_end":29,"column_start":1,"column_end":53}},{"value":"/ let result = enc.into_stream(&mut compressed).encode(&data[..]);","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1337,"byte_end":1405,"line_start":30,"line_end":30,"column_start":1,"column_end":69}},{"value":"/ result.status.unwrap();","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1406,"byte_end":1433,"line_start":31,"line_end":31,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1434,"byte_end":1441,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1442,"byte_end":1445,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ The main algorithm can be used in `no_std` as well, although it requires an allocator. This","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1446,"byte_end":1541,"line_start":34,"line_end":34,"column_start":1,"column_end":96}},{"value":"/ restriction might be lifted at a later stage. For this you should deactivate the `std` feature.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1542,"byte_end":1641,"line_start":35,"line_end":35,"column_start":1,"column_end":100}},{"value":"/ The main interfaces stay intact but the `into_stream` combinator is no available.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1642,"byte_end":1727,"line_start":36,"line_end":36,"column_start":1,"column_end":86}},{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1771,"byte_end":1794,"line_start":38,"line_end":38,"column_start":1,"column_end":24}},{"value":"forbid(missing_docs)","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":1795,"byte_end":1819,"line_start":39,"line_end":39,"column_start":1,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":2670,"byte_end":2673,"line_start":63,"line_end":63,"column_start":5,"column_end":8},"name":"Msb","qualname":"::BitOrder::Msb","value":"BitOrder::Msb","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":" The most significant bit is processed first.\n","sig":null,"attributes":[{"value":"/ The most significant bit is processed first.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":2617,"byte_end":2665,"line_start":62,"line_end":62,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":2733,"byte_end":2736,"line_start":65,"line_end":65,"column_start":5,"column_end":8},"name":"Lsb","qualname":"::BitOrder::Lsb","value":"BitOrder::Lsb","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":" The least significant bit is processed first.\n","sig":null,"attributes":[{"value":"/ The least significant bit is processed first.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":2679,"byte_end":2728,"line_start":64,"line_end":64,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":2602,"byte_end":2610,"line_start":61,"line_end":61,"column_start":10,"column_end":18},"name":"BitOrder","qualname":"::BitOrder","value":"pub enum BitOrder {\n\n    /// The most significant bit is processed first.\n    Msb,\n\n    /// The least significant bit is processed first.\n    Lsb,\n}","parent":null,"children":[{"krate":0,"index":338},{"krate":0,"index":340}],"decl_id":null,"docs":" The order of bits in bytes.\n","sig":null,"attributes":[{"value":"/ The order of bits in bytes.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":2531,"byte_end":2562,"line_start":59,"line_end":59,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"decode","qualname":"::decode","value":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":452},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":48},{"krate":0,"index":347},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":357},{"krate":0,"index":359},{"krate":0,"index":364},{"krate":0,"index":53},{"krate":0,"index":62},{"krate":0,"index":74},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":92},{"krate":0,"index":112},{"krate":0,"index":117},{"krate":0,"index":126},{"krate":0,"index":132},{"krate":0,"index":142},{"krate":0,"index":152},{"krate":0,"index":158},{"krate":0,"index":167}],"decl_id":null,"docs":" A module for all decoding needs.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":3308,"byte_end":3333,"line_start":94,"line_end":94,"column_start":1,"column_end":26}},{"value":"/ A module for all decoding needs.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":4259,"byte_end":4295,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":4905,"byte_end":4912,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::decode::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":40}],"decl_id":null,"docs":" The state for decoding data with an LZW algorithm.","sig":null,"attributes":[{"value":"/ The state for decoding data with an LZW algorithm.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":4601,"byte_end":4655,"line_start":11,"line_end":11,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":4656,"byte_end":4659,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The same structure can be utilized with streams as well as your own buffers and driver logic.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":4660,"byte_end":4757,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"/ It may even be possible to mix them if you are sufficiently careful not to lose or skip any","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":4758,"byte_end":4853,"line_start":14,"line_end":14,"column_start":1,"column_end":96}},{"value":"/ already decode data in the process.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":4854,"byte_end":4893,"line_start":15,"line_end":15,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":5303,"byte_end":5313,"line_start":30,"line_end":30,"column_start":12,"column_end":22},"name":"IntoStream","qualname":"::decode::IntoStream","value":"IntoStream {  }","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47}],"decl_id":null,"docs":" A decoding stream sink.","sig":null,"attributes":[{"value":"/ A decoding stream sink.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":4965,"byte_end":4992,"line_start":20,"line_end":20,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":4993,"byte_end":4996,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ See [`Decoder::into_stream`] on how to create this type.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":4997,"byte_end":5057,"line_start":22,"line_end":22,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":5058,"byte_end":5061,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`Decoder::into_stream`]: struct.Decoder.html#method.into_stream","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":5062,"byte_end":5130,"line_start":24,"line_end":24,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":8544,"byte_end":8547,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new(BitOrder, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a new decoder with the specified bit order and symbol size.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":8113,"byte_end":8183,"line_start":138,"line_end":138,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":8188,"byte_end":8191,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":8196,"byte_end":8289,"line_start":140,"line_end":140,"column_start":5,"column_end":98}},{"value":"/ original specification. In particular you will need to specify an `Lsb` bit oder to decode","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":8294,"byte_end":8388,"line_start":141,"line_end":141,"column_start":5,"column_end":99}},{"value":"/ the data portion of a compressed `gif` image.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":8393,"byte_end":8442,"line_start":142,"line_end":142,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":8447,"byte_end":8450,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":8455,"byte_end":8467,"line_start":144,"line_end":144,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":8472,"byte_end":8475,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ The `size` needs to be in the interval `0..=12`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":8480,"byte_end":8532,"line_start":146,"line_end":146,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":9378,"byte_end":9399,"line_start":167,"line_end":167,"column_start":12,"column_end":33},"name":"with_tiff_size_switch","qualname":"<Decoder>::with_tiff_size_switch","value":"pub fn with_tiff_size_switch(BitOrder, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a TIFF compatible decoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a TIFF compatible decoder with the specified bit order and symbol size.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":8936,"byte_end":9018,"line_start":158,"line_end":158,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":9023,"byte_end":9026,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":9031,"byte_end":9124,"line_start":160,"line_end":160,"column_start":5,"column_end":98}},{"value":"/ TIFF specification, which is a misinterpretation of the original algorithm for increasing","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":9129,"byte_end":9222,"line_start":161,"line_end":161,"column_start":5,"column_end":98}},{"value":"/ the code size. It switches one symbol sooner.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":9227,"byte_end":9276,"line_start":162,"line_end":162,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":9281,"byte_end":9284,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":9289,"byte_end":9301,"line_start":164,"line_end":164,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":9306,"byte_end":9309,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ The `size` needs to be in the interval `0..=12`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":9314,"byte_end":9366,"line_start":166,"line_end":166,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10779,"byte_end":10791,"line_start":200,"line_end":200,"column_start":12,"column_end":24},"name":"decode_bytes","qualname":"<Decoder>::decode_bytes","value":"pub fn decode_bytes(&mut Self, &[u8], &mut [u8]) -> BufferResult","parent":null,"children":[],"decl_id":null,"docs":" Decode some bytes from `inp` and write result to `out`.","sig":null,"attributes":[{"value":"/ Decode some bytes from `inp` and write result to `out`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10004,"byte_end":10063,"line_start":186,"line_end":186,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10068,"byte_end":10071,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ This will consume a prefix of the input buffer and write decoded output into a prefix of","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10076,"byte_end":10168,"line_start":188,"line_end":188,"column_start":5,"column_end":97}},{"value":"/ the output buffer. See the respective fields of the return value for the count of consumed","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10173,"byte_end":10267,"line_start":189,"line_end":189,"column_start":5,"column_end":99}},{"value":"/ and written bytes. For the next call You should have adjusted the inputs accordingly.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10272,"byte_end":10361,"line_start":190,"line_end":190,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10366,"byte_end":10369,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ The call will try to decode and write as many bytes of output as available. It will be","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10374,"byte_end":10464,"line_start":192,"line_end":192,"column_start":5,"column_end":95}},{"value":"/ much more optimized (and avoid intermediate buffering) if it is allowed to write a large","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10469,"byte_end":10561,"line_start":193,"line_end":193,"column_start":5,"column_end":97}},{"value":"/ contiguous chunk at once.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10566,"byte_end":10595,"line_start":194,"line_end":194,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10600,"byte_end":10603,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ See [`into_stream`] for high-level functions (that are only available with the `std`","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10608,"byte_end":10696,"line_start":196,"line_end":196,"column_start":5,"column_end":93}},{"value":"/ feature).","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10701,"byte_end":10714,"line_start":197,"line_end":197,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10719,"byte_end":10722,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ [`into_stream`]: #method.into_stream","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10727,"byte_end":10767,"line_start":199,"line_end":199,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10975,"byte_end":10986,"line_start":206,"line_end":206,"column_start":12,"column_end":23},"name":"into_stream","qualname":"<Decoder>::into_stream","value":"pub fn into_stream<W: Write>(&mut Self, W) -> IntoStream<, W>","parent":null,"children":[],"decl_id":null,"docs":" Construct a decoder into a writer.\n","sig":null,"attributes":[{"value":"/ Construct a decoder into a writer.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10897,"byte_end":10935,"line_start":204,"line_end":204,"column_start":5,"column_end":43}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":10940,"byte_end":10963,"line_start":205,"line_end":205,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":11820,"byte_end":11829,"line_start":231,"line_end":231,"column_start":12,"column_end":21},"name":"has_ended","qualname":"<Decoder>::has_ended","value":"pub fn has_ended(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the decoding has finished.","sig":null,"attributes":[{"value":"/ Check if the decoding has finished.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":11527,"byte_end":11566,"line_start":226,"line_end":226,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":11571,"byte_end":11574,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ No more output is produced beyond the end code that marked the finish of the stream. The","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":11579,"byte_end":11671,"line_start":228,"line_end":228,"column_start":5,"column_end":97}},{"value":"/ decoder may have read additional bytes, including padding bits beyond the last code word","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":11676,"byte_end":11768,"line_start":229,"line_end":229,"column_start":5,"column_end":97}},{"value":"/ but also excess bytes provided.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":11773,"byte_end":11808,"line_start":230,"line_end":230,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":12718,"byte_end":12723,"line_start":253,"line_end":253,"column_start":12,"column_end":17},"name":"reset","qualname":"<Decoder>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset all internal state.","sig":null,"attributes":[{"value":"/ Reset all internal state.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":12448,"byte_end":12477,"line_start":248,"line_end":248,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":12482,"byte_end":12485,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ This produce a decoder as if just constructed with `new` but taking slightly less work. In","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":12490,"byte_end":12584,"line_start":250,"line_end":250,"column_start":5,"column_end":99}},{"value":"/ particular it will not deallocate any internal allocations. It will also avoid some","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":12589,"byte_end":12676,"line_start":251,"line_end":251,"column_start":5,"column_end":92}},{"value":"/ duplicate setup work.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":12681,"byte_end":12706,"line_start":252,"line_end":252,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":12974,"byte_end":12980,"line_start":263,"line_end":263,"column_start":12,"column_end":18},"name":"decode","qualname":"<IntoStream>::decode","value":"pub fn decode<impl BufRead: BufRead>(&mut Self, impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Decode data from a reader.","sig":null,"attributes":[{"value":"/ Decode data from a reader.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":12841,"byte_end":12871,"line_start":260,"line_end":260,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":12876,"byte_end":12879,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ This will read data until the stream is empty or an end marker is reached.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":12884,"byte_end":12962,"line_start":262,"line_end":262,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":13146,"byte_end":13156,"line_start":268,"line_end":268,"column_start":12,"column_end":22},"name":"decode_all","qualname":"<IntoStream>::decode_all","value":"pub fn decode_all<impl BufRead: BufRead>(Self, impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Decode data from a reader, requiring an end marker.\n","sig":null,"attributes":[{"value":"/ Decode data from a reader, requiring an end marker.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":13079,"byte_end":13134,"line_start":267,"line_end":267,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":13633,"byte_end":13648,"line_start":280,"line_end":280,"column_start":12,"column_end":27},"name":"set_buffer_size","qualname":"<IntoStream>::set_buffer_size","value":"pub fn set_buffer_size(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of the intermediate decode buffer.","sig":null,"attributes":[{"value":"/ Set the size of the intermediate decode buffer.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":13253,"byte_end":13304,"line_start":272,"line_end":272,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":13309,"byte_end":13312,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ A buffer of this size is allocated to hold one part of the decoded stream when no buffer is","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":13317,"byte_end":13412,"line_start":274,"line_end":274,"column_start":5,"column_end":100}},{"value":"/ available and any decoding method is called. No buffer is allocated if `set_buffer` has","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":13417,"byte_end":13508,"line_start":275,"line_end":275,"column_start":5,"column_end":96}},{"value":"/ been called. The buffer is reused.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":13513,"byte_end":13551,"line_start":276,"line_end":276,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":13556,"byte_end":13559,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":13564,"byte_end":13576,"line_start":278,"line_end":278,"column_start":5,"column_end":17}},{"value":"/ This method panics if `size` is `0`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":13581,"byte_end":13621,"line_start":279,"line_end":279,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":14362,"byte_end":14372,"line_start":295,"line_end":295,"column_start":12,"column_end":22},"name":"set_buffer","qualname":"<IntoStream>::set_buffer","value":"pub fn set_buffer(&mut Self, &'d mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Use a particular buffer as an intermediate decode buffer.","sig":null,"attributes":[{"value":"/ Use a particular buffer as an intermediate decode buffer.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":13782,"byte_end":13843,"line_start":285,"line_end":285,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":13848,"byte_end":13851,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ Calling this sets or replaces the buffer. When a buffer has been set then it is used","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":13856,"byte_end":13944,"line_start":287,"line_end":287,"column_start":5,"column_end":93}},{"value":"/ instead of dynamically allocating a buffer. Note that the size of the buffer is critical","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":13949,"byte_end":14041,"line_start":288,"line_end":288,"column_start":5,"column_end":97}},{"value":"/ for efficient decoding. Some optimization techniques require the buffer to hold one or more","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":14046,"byte_end":14141,"line_start":289,"line_end":289,"column_start":5,"column_end":100}},{"value":"/ previous decoded words. There is also additional overhead from `write` calls each time the","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":14146,"byte_end":14240,"line_start":290,"line_end":290,"column_start":5,"column_end":99}},{"value":"/ buffer has been filled.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":14245,"byte_end":14272,"line_start":291,"line_end":291,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":14277,"byte_end":14280,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":14285,"byte_end":14297,"line_start":293,"line_end":293,"column_start":5,"column_end":17}},{"value":"/ This method panics if the `buffer` is empty.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":14302,"byte_end":14350,"line_start":294,"line_end":294,"column_start":5,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"encode","qualname":"::encode","value":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":199},{"krate":0,"index":204},{"krate":0,"index":213},{"krate":0,"index":217},{"krate":0,"index":221},{"krate":0,"index":366},{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":382},{"krate":0,"index":381},{"krate":0,"index":384},{"krate":0,"index":388},{"krate":0,"index":387},{"krate":0,"index":232},{"krate":0,"index":390},{"krate":0,"index":397},{"krate":0,"index":396},{"krate":0,"index":401},{"krate":0,"index":405},{"krate":0,"index":404},{"krate":0,"index":233},{"krate":0,"index":244},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":273},{"krate":0,"index":280},{"krate":0,"index":291},{"krate":0,"index":302},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":316},{"krate":0,"index":318}],"decl_id":null,"docs":" A module for all encoding needs.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":3350,"byte_end":3375,"line_start":96,"line_end":96,"column_start":1,"column_end":26}},{"value":"/ A module for all encoding needs.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":46216,"byte_end":46252,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":46842,"byte_end":46849,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::encode::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":191}],"decl_id":null,"docs":" The state for encoding data with an LZW algorithm.","sig":null,"attributes":[{"value":"/ The state for encoding data with an LZW algorithm.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":46553,"byte_end":46607,"line_start":11,"line_end":11,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":46608,"byte_end":46611,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The same structure can be utilized with streams as well as your own buffers and driver logic.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":46612,"byte_end":46709,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"/ It may even be possible to mix them if you are sufficiently careful not to lose any written","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":46710,"byte_end":46805,"line_start":14,"line_end":14,"column_start":1,"column_end":96}},{"value":"/ data in the process.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":46806,"byte_end":46830,"line_start":15,"line_end":15,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":47442,"byte_end":47452,"line_start":33,"line_end":33,"column_start":12,"column_end":22},"name":"IntoStream","qualname":"::encode::IntoStream","value":"IntoStream {  }","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198}],"decl_id":null,"docs":" A encoding stream sink.","sig":null,"attributes":[{"value":"/ A encoding stream sink.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":47104,"byte_end":47131,"line_start":23,"line_end":23,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":47132,"byte_end":47135,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ See [`Encoder::into_stream`] on how to create this type.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":47136,"byte_end":47196,"line_start":25,"line_end":25,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":47197,"byte_end":47200,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ [`Encoder::into_stream`]: struct.Encoder.html#method.into_stream","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":47201,"byte_end":47269,"line_start":27,"line_end":27,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":51050,"byte_end":51053,"line_start":163,"line_end":163,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(BitOrder, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a new encoder with the specified bit order and symbol size.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":50619,"byte_end":50689,"line_start":154,"line_end":154,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":50694,"byte_end":50697,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":50702,"byte_end":50795,"line_start":156,"line_end":156,"column_start":5,"column_end":98}},{"value":"/ original specification. In particular you will need to specify an `Lsb` bit oder to encode","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":50800,"byte_end":50894,"line_start":157,"line_end":157,"column_start":5,"column_end":99}},{"value":"/ the data portion of a compressed `gif` image.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":50899,"byte_end":50948,"line_start":158,"line_end":158,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":50953,"byte_end":50956,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":50961,"byte_end":50973,"line_start":160,"line_end":160,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":50978,"byte_end":50981,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ The `size` needs to be in the interval `2..=12`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":50986,"byte_end":51038,"line_start":162,"line_end":162,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":51884,"byte_end":51905,"line_start":183,"line_end":183,"column_start":12,"column_end":33},"name":"with_tiff_size_switch","qualname":"<Encoder>::with_tiff_size_switch","value":"pub fn with_tiff_size_switch(BitOrder, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a TIFF compatible encoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a TIFF compatible encoder with the specified bit order and symbol size.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":51442,"byte_end":51524,"line_start":174,"line_end":174,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":51529,"byte_end":51532,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":51537,"byte_end":51630,"line_start":176,"line_end":176,"column_start":5,"column_end":98}},{"value":"/ TIFF specification, which is a misinterpretation of the original algorithm for increasing","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":51635,"byte_end":51728,"line_start":177,"line_end":177,"column_start":5,"column_end":98}},{"value":"/ the code size. It switches one symbol sooner.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":51733,"byte_end":51782,"line_start":178,"line_end":178,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":51787,"byte_end":51790,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":51795,"byte_end":51807,"line_start":180,"line_end":180,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":51812,"byte_end":51815,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ The `size` needs to be in the interval `2..=12`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":51820,"byte_end":51872,"line_start":182,"line_end":182,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":53206,"byte_end":53218,"line_start":214,"line_end":214,"column_start":12,"column_end":24},"name":"encode_bytes","qualname":"<Encoder>::encode_bytes","value":"pub fn encode_bytes(&mut Self, &[u8], &mut [u8]) -> BufferResult","parent":null,"children":[],"decl_id":null,"docs":" Encode some bytes from `inp` into `out`.","sig":null,"attributes":[{"value":"/ Encode some bytes from `inp` into `out`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":52510,"byte_end":52554,"line_start":202,"line_end":202,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":52559,"byte_end":52562,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ See [`into_stream`] for high-level functions (this interface is only available with the","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":52567,"byte_end":52658,"line_start":204,"line_end":204,"column_start":5,"column_end":96}},{"value":"/ `std` feature) and [`finish`] for marking the input data as complete.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":52663,"byte_end":52736,"line_start":205,"line_end":205,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":52741,"byte_end":52744,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ When some input byte is invalid, i.e. is not smaller than `1 << size`, then that byte and","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":52749,"byte_end":52842,"line_start":207,"line_end":207,"column_start":5,"column_end":98}},{"value":"/ all following ones will _not_ be consumed and the `status` of the result will signal an","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":52847,"byte_end":52938,"line_start":208,"line_end":208,"column_start":5,"column_end":96}},{"value":"/ error. The result will also indicate that all bytes up to but not including the offending","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":52943,"byte_end":53036,"line_start":209,"line_end":209,"column_start":5,"column_end":98}},{"value":"/ byte have been consumed. You may try again with a fixed byte.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":53041,"byte_end":53106,"line_start":210,"line_end":210,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":53111,"byte_end":53114,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ [`into_stream`]: #method.into_stream","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":53119,"byte_end":53159,"line_start":212,"line_end":212,"column_start":5,"column_end":45}},{"value":"/ [`finish`]: #method.finish","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":53164,"byte_end":53194,"line_start":213,"line_end":213,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":53402,"byte_end":53413,"line_start":220,"line_end":220,"column_start":12,"column_end":23},"name":"into_stream","qualname":"<Encoder>::into_stream","value":"pub fn into_stream<W: Write>(&mut Self, W) -> IntoStream<, W>","parent":null,"children":[],"decl_id":null,"docs":" Construct a encoder into a writer.\n","sig":null,"attributes":[{"value":"/ Construct a encoder into a writer.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":53324,"byte_end":53362,"line_start":218,"line_end":218,"column_start":5,"column_end":43}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":53367,"byte_end":53390,"line_start":219,"line_end":219,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":54437,"byte_end":54443,"line_start":247,"line_end":247,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"pub fn finish(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Mark the encoding as in the process of finishing.","sig":null,"attributes":[{"value":"/ Mark the encoding as in the process of finishing.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":53954,"byte_end":54007,"line_start":240,"line_end":240,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":54012,"byte_end":54015,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ The next following call to `encode_bytes` which is able to consume the complete input will","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":54020,"byte_end":54114,"line_start":242,"line_end":242,"column_start":5,"column_end":99}},{"value":"/ also try to emit an end code. It's not recommended, but also not unsound, to use different","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":54119,"byte_end":54213,"line_start":243,"line_end":243,"column_start":5,"column_end":99}},{"value":"/ byte slices in different calls from this point forward and thus to 'delay' the actual end","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":54218,"byte_end":54311,"line_start":244,"line_end":244,"column_start":5,"column_end":98}},{"value":"/ of the data stream. The behaviour after the end marker has been written is unspecified but","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":54316,"byte_end":54410,"line_start":245,"line_end":245,"column_start":5,"column_end":99}},{"value":"/ sound.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":54415,"byte_end":54425,"line_start":246,"line_end":246,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55002,"byte_end":55007,"line_start":263,"line_end":263,"column_start":12,"column_end":17},"name":"reset","qualname":"<Encoder>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset all internal state.","sig":null,"attributes":[{"value":"/ Reset all internal state.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":54731,"byte_end":54760,"line_start":258,"line_end":258,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":54765,"byte_end":54768,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This produce an encoder as if just constructed with `new` but taking slightly less work. In","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":54773,"byte_end":54868,"line_start":260,"line_end":260,"column_start":5,"column_end":100}},{"value":"/ particular it will not deallocate any internal allocations. It will also avoid some","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":54873,"byte_end":54960,"line_start":261,"line_end":261,"column_start":5,"column_end":92}},{"value":"/ duplicate setup work.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":54965,"byte_end":54990,"line_start":262,"line_end":262,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55295,"byte_end":55301,"line_start":274,"line_end":274,"column_start":12,"column_end":18},"name":"encode","qualname":"<IntoStream>::encode","value":"pub fn encode<impl BufRead: BufRead>(&mut Self, impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Encode data from a reader.","sig":null,"attributes":[{"value":"/ Encode data from a reader.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55124,"byte_end":55154,"line_start":270,"line_end":270,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55159,"byte_end":55162,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ This will drain the supplied reader. It will not encode an end marker after all data has","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55167,"byte_end":55259,"line_start":272,"line_end":272,"column_start":5,"column_end":97}},{"value":"/ been processed.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55264,"byte_end":55283,"line_start":273,"line_end":273,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55460,"byte_end":55470,"line_start":279,"line_end":279,"column_start":12,"column_end":22},"name":"encode_all","qualname":"<IntoStream>::encode_all","value":"pub fn encode_all<impl BufRead: BufRead>(Self, impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Encode data from a reader and an end marker.\n","sig":null,"attributes":[{"value":"/ Encode data from a reader and an end marker.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55400,"byte_end":55448,"line_start":278,"line_end":278,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55947,"byte_end":55962,"line_start":291,"line_end":291,"column_start":12,"column_end":27},"name":"set_buffer_size","qualname":"<IntoStream>::set_buffer_size","value":"pub fn set_buffer_size(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of the intermediate encode buffer.","sig":null,"attributes":[{"value":"/ Set the size of the intermediate encode buffer.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55567,"byte_end":55618,"line_start":283,"line_end":283,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55623,"byte_end":55626,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ A buffer of this size is allocated to hold one part of the encoded stream when no buffer is","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55631,"byte_end":55726,"line_start":285,"line_end":285,"column_start":5,"column_end":100}},{"value":"/ available and any encoding method is called. No buffer is allocated if `set_buffer` has","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55731,"byte_end":55822,"line_start":286,"line_end":286,"column_start":5,"column_end":96}},{"value":"/ been called. The buffer is reused.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55827,"byte_end":55865,"line_start":287,"line_end":287,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55870,"byte_end":55873,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55878,"byte_end":55890,"line_start":289,"line_end":289,"column_start":5,"column_end":17}},{"value":"/ This method panics if `size` is `0`.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55895,"byte_end":55935,"line_start":290,"line_end":290,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":56575,"byte_end":56585,"line_start":305,"line_end":305,"column_start":12,"column_end":22},"name":"set_buffer","qualname":"<IntoStream>::set_buffer","value":"pub fn set_buffer(&mut Self, &'d mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Use a particular buffer as an intermediate encode buffer.","sig":null,"attributes":[{"value":"/ Use a particular buffer as an intermediate encode buffer.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":56096,"byte_end":56157,"line_start":296,"line_end":296,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":56162,"byte_end":56165,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ Calling this sets or replaces the buffer. When a buffer has been set then it is used","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":56170,"byte_end":56258,"line_start":298,"line_end":298,"column_start":5,"column_end":93}},{"value":"/ instead of a dynamically allocating a buffer. Note that the size of the buffer is relevant","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":56263,"byte_end":56357,"line_start":299,"line_end":299,"column_start":5,"column_end":99}},{"value":"/ for efficient encoding as there is additional overhead from `write` calls each time the","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":56362,"byte_end":56453,"line_start":300,"line_end":300,"column_start":5,"column_end":96}},{"value":"/ buffer has been filled.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":56458,"byte_end":56485,"line_start":301,"line_end":301,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":56490,"byte_end":56493,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":56498,"byte_end":56510,"line_start":303,"line_end":303,"column_start":5,"column_end":17}},{"value":"/ This method panics if the `buffer` is empty.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":56515,"byte_end":56563,"line_start":304,"line_end":304,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77220,"byte_end":77232,"line_start":3,"line_end":3,"column_start":12,"column_end":24},"name":"BufferResult","qualname":"::error::BufferResult","value":"BufferResult { consumed_in, consumed_out, status }","parent":null,"children":[{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324}],"decl_id":null,"docs":" The result of a coding operation on a pair of buffer.\n","sig":null,"attributes":[{"value":"/ The result of a coding operation on a pair of buffer.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77084,"byte_end":77141,"line_start":1,"line_end":1,"column_start":1,"column_end":58}},{"value":"must_use = \"Contains a status with potential error information\"","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77142,"byte_end":77208,"line_start":2,"line_end":2,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77303,"byte_end":77314,"line_start":5,"line_end":5,"column_start":9,"column_end":20},"name":"consumed_in","qualname":"::error::BufferResult::consumed_in","value":"usize","parent":{"krate":0,"index":321},"children":[],"decl_id":null,"docs":" The number of bytes consumed from the input buffer.\n","sig":null,"attributes":[{"value":"/ The number of bytes consumed from the input buffer.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77239,"byte_end":77294,"line_start":4,"line_end":4,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77391,"byte_end":77403,"line_start":7,"line_end":7,"column_start":9,"column_end":21},"name":"consumed_out","qualname":"::error::BufferResult::consumed_out","value":"usize","parent":{"krate":0,"index":321},"children":[],"decl_id":null,"docs":" The number of bytes written into the output buffer.\n","sig":null,"attributes":[{"value":"/ The number of bytes written into the output buffer.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77327,"byte_end":77382,"line_start":6,"line_end":6,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77476,"byte_end":77482,"line_start":9,"line_end":9,"column_start":9,"column_end":15},"name":"status","qualname":"::error::BufferResult::status","value":"std::result::Result<error::LzwStatus, error::LzwError>","parent":{"krate":0,"index":321},"children":[],"decl_id":null,"docs":" The status after returning from the write call.\n","sig":null,"attributes":[{"value":"/ The status after returning from the write call.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77416,"byte_end":77467,"line_start":8,"line_end":8,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77666,"byte_end":77678,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"StreamResult","qualname":"::error::StreamResult","value":"StreamResult { bytes_read, bytes_written, status }","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328}],"decl_id":null,"docs":" The result of coding into an output stream.\n","sig":null,"attributes":[{"value":"/ The result of coding into an output stream.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77516,"byte_end":77563,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77564,"byte_end":77587,"line_start":13,"line_end":13,"column_start":1,"column_end":24}},{"value":"must_use = \"Contains a status with potential error information\"","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77588,"byte_end":77654,"line_start":14,"line_end":14,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":326},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77749,"byte_end":77759,"line_start":17,"line_end":17,"column_start":9,"column_end":19},"name":"bytes_read","qualname":"::error::StreamResult::bytes_read","value":"usize","parent":{"krate":0,"index":325},"children":[],"decl_id":null,"docs":" The total number of bytes consumed from the reader.\n","sig":null,"attributes":[{"value":"/ The total number of bytes consumed from the reader.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77685,"byte_end":77740,"line_start":16,"line_end":16,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77835,"byte_end":77848,"line_start":19,"line_end":19,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::error::StreamResult::bytes_written","value":"usize","parent":{"krate":0,"index":325},"children":[],"decl_id":null,"docs":" The total number of bytes written into the writer.\n","sig":null,"attributes":[{"value":"/ The total number of bytes written into the writer.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77772,"byte_end":77826,"line_start":18,"line_end":18,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":328},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78015,"byte_end":78021,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"name":"status","qualname":"::error::StreamResult::status","value":"std::result::Result<(), std::io::Error>","parent":{"krate":0,"index":325},"children":[],"decl_id":null,"docs":" The possible error that occurred.","sig":null,"attributes":[{"value":"/ The possible error that occurred.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77861,"byte_end":77898,"line_start":20,"line_end":20,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77903,"byte_end":77906,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Note that when writing into streams it is not in general possible to recover from an error.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":77911,"byte_end":78006,"line_start":22,"line_end":22,"column_start":5,"column_end":100}}]},{"kind":"TupleVariant","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78189,"byte_end":78191,"line_start":30,"line_end":30,"column_start":5,"column_end":7},"name":"Ok","qualname":"::error::LzwStatus::Ok","value":"LzwStatus::Ok","parent":{"krate":0,"index":408},"children":[],"decl_id":null,"docs":" Everything went well.\n","sig":null,"attributes":[{"value":"/ Everything went well.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78159,"byte_end":78184,"line_start":29,"line_end":29,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78554,"byte_end":78564,"line_start":36,"line_end":36,"column_start":5,"column_end":15},"name":"NoProgress","qualname":"::error::LzwStatus::NoProgress","value":"LzwStatus::NoProgress","parent":{"krate":0,"index":408},"children":[],"decl_id":null,"docs":" No bytes were read or written and no internal state advanced.","sig":null,"attributes":[{"value":"/ No bytes were read or written and no internal state advanced.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78197,"byte_end":78262,"line_start":31,"line_end":31,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78267,"byte_end":78270,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ If this is returned but your application can not provide more input data then decoding is","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78275,"byte_end":78368,"line_start":33,"line_end":33,"column_start":5,"column_end":98}},{"value":"/ definitely stuck for good and it should stop trying and report some error of its own. In","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78373,"byte_end":78465,"line_start":34,"line_end":34,"column_start":5,"column_end":97}},{"value":"/ other situations this may be used as a signal to refill an internal buffer.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78470,"byte_end":78549,"line_start":35,"line_end":35,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78643,"byte_end":78647,"line_start":38,"line_end":38,"column_start":5,"column_end":9},"name":"Done","qualname":"::error::LzwStatus::Done","value":"LzwStatus::Done","parent":{"krate":0,"index":408},"children":[],"decl_id":null,"docs":" No more data will be produced because an end marker was reached.\n","sig":null,"attributes":[{"value":"/ No more data will be produced because an end marker was reached.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78570,"byte_end":78638,"line_start":37,"line_end":37,"column_start":5,"column_end":73}}]},{"kind":"Enum","id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78143,"byte_end":78152,"line_start":28,"line_end":28,"column_start":10,"column_end":19},"name":"LzwStatus","qualname":"::error::LzwStatus","value":"pub enum LzwStatus {\n\n    /// Everything went well.\n    Ok,\n\n    /// No bytes were read or written and no internal state advanced.\n    ///\n    /// If this is returned but your application can not provide more input data then decoding is\n    /// definitely stuck for good and it should stop trying and report some error of its own. In\n    /// other situations this may be used as a signal to refill an internal buffer.\n    NoProgress,\n\n    /// No more data will be produced because an end marker was reached.\n    Done,\n}","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":411},{"krate":0,"index":413}],"decl_id":null,"docs":" The status after successful coding of an LZW stream.\n","sig":null,"attributes":[{"value":"/ The status after successful coding of an LZW stream.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78047,"byte_end":78103,"line_start":26,"line_end":26,"column_start":1,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":79106,"byte_end":79117,"line_start":49,"line_end":49,"column_start":5,"column_end":16},"name":"InvalidCode","qualname":"::error::LzwError::InvalidCode","value":"LzwError::InvalidCode","parent":{"krate":0,"index":420},"children":[],"decl_id":null,"docs":" The input contained an invalid code.","sig":null,"attributes":[{"value":"/ The input contained an invalid code.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78769,"byte_end":78809,"line_start":44,"line_end":44,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78814,"byte_end":78817,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ For decompression this refers to a code larger than those currently known through the prior","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78822,"byte_end":78917,"line_start":46,"line_end":46,"column_start":5,"column_end":100}},{"value":"/ decoding stages. For compression this refers to a byte that has no code representation due","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78922,"byte_end":79016,"line_start":47,"line_end":47,"column_start":5,"column_end":99}},{"value":"/ to being larger than permitted by the `size` parameter given to the Encoder.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":79021,"byte_end":79101,"line_start":48,"line_end":48,"column_start":5,"column_end":85}}]},{"kind":"Enum","id":{"krate":0,"index":420},"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78754,"byte_end":78762,"line_start":43,"line_end":43,"column_start":10,"column_end":18},"name":"LzwError","qualname":"::error::LzwError","value":"pub enum LzwError {\n\n    /// The input contained an invalid code.\n    ///\n    /// For decompression this refers to a code larger than those currently known through the prior\n    /// decoding stages. For compression this refers to a byte that has no code representation due\n    /// to being larger than permitted by the `size` parameter given to the Encoder.\n    InvalidCode,\n}","parent":null,"children":[{"krate":0,"index":421}],"decl_id":null,"docs":" The error kind after unsuccessful coding of an LZW stream.\n","sig":null,"attributes":[{"value":"/ The error kind after unsuccessful coding of an LZW stream.","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":78652,"byte_end":78714,"line_start":41,"line_end":41,"column_start":1,"column_end":63}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":8099,"byte_end":8106,"line_start":137,"line_end":137,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":12817,"byte_end":12827,"line_start":259,"line_end":259,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":18045,"byte_end":18056,"line_start":399,"line_end":399,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":18887,"byte_end":18898,"line_start":428,"line_end":428,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":35342,"byte_end":35353,"line_start":786,"line_end":786,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":35765,"byte_end":35774,"line_start":804,"line_end":804,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":37657,"byte_end":37666,"line_start":873,"line_end":873,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":39508,"byte_end":39514,"line_start":942,"line_end":942,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":40861,"byte_end":40866,"line_start":986,"line_end":986,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":42835,"byte_end":42839,"line_start":1052,"line_end":1052,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":50605,"byte_end":50612,"line_start":153,"line_end":153,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55100,"byte_end":55110,"line_start":269,"line_end":269,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":249},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":59436,"byte_end":59447,"line_start":396,"line_end":396,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":59935,"byte_end":59946,"line_start":415,"line_end":415,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":63536,"byte_end":63547,"line_start":522,"line_end":522,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":64001,"byte_end":64010,"line_start":544,"line_end":544,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":65639,"byte_end":65648,"line_start":610,"line_end":610,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":67209,"byte_end":67213,"line_start":675,"line_end":675,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":71574,"byte_end":71581,"line_start":787,"line_end":787,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":71666,"byte_end":71672,"line_start":793,"line_end":793,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":71851,"byte_end":71858,"line_start":803,"line_end":803,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":72135,"byte_end":72148,"line_start":813,"line_end":813,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":79150,"byte_end":79158,"line_start":52,"line_end":52,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":79403,"byte_end":79411,"line_start":61,"line_end":61,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":3342,"byte_end":3348,"line_start":95,"line_end":95,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":18}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\lib.rs","byte_start":3384,"byte_end":3390,"line_start":97,"line_end":97,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":170}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":8099,"byte_end":8106,"line_start":137,"line_end":137,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":39},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":12817,"byte_end":12827,"line_start":259,"line_end":259,"column_start":20,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":41},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":18045,"byte_end":18056,"line_start":399,"line_end":399,"column_start":21,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":62},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":18887,"byte_end":18898,"line_start":428,"line_end":428,"column_start":34,"column_end":45},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":62},"to":{"krate":0,"index":48}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":35342,"byte_end":35353,"line_start":786,"line_end":786,"column_start":21,"column_end":32},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":62},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":35765,"byte_end":35774,"line_start":804,"line_end":804,"column_start":21,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":352},"to":{"krate":0,"index":53}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":37657,"byte_end":37666,"line_start":873,"line_end":873,"column_start":21,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":359},"to":{"krate":0,"index":53}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":39508,"byte_end":39514,"line_start":942,"line_end":942,"column_start":6,"column_end":12},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":74},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":40861,"byte_end":40866,"line_start":986,"line_end":986,"column_start":6,"column_end":11},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":78},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\decode.rs","byte_start":42835,"byte_end":42839,"line_start":1052,"line_end":1052,"column_start":6,"column_end":10},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":347},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":50605,"byte_end":50612,"line_start":153,"line_end":153,"column_start":6,"column_end":13},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":55100,"byte_end":55110,"line_start":269,"line_end":269,"column_start":20,"column_end":30},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":59436,"byte_end":59447,"line_start":396,"line_end":396,"column_start":17,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":204},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":59935,"byte_end":59946,"line_start":415,"line_end":415,"column_start":30,"column_end":41},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":204},"to":{"krate":0,"index":199}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":63536,"byte_end":63547,"line_start":522,"line_end":522,"column_start":17,"column_end":28},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":204},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":64001,"byte_end":64010,"line_start":544,"line_end":544,"column_start":17,"column_end":26},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":213},"to":{"krate":0,"index":221}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":65639,"byte_end":65648,"line_start":610,"line_end":610,"column_start":17,"column_end":26},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":217},"to":{"krate":0,"index":221}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":67209,"byte_end":67213,"line_start":675,"line_end":675,"column_start":6,"column_end":10},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":366},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":71574,"byte_end":71581,"line_start":787,"line_end":787,"column_start":18,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":372},"to":{"krate":2,"index":2069}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":71666,"byte_end":71672,"line_start":793,"line_end":793,"column_start":18,"column_end":24},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":390},"to":{"krate":2,"index":2069}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":71851,"byte_end":71858,"line_start":803,"line_end":803,"column_start":30,"column_end":37},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":372},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\encode.rs","byte_start":72135,"byte_end":72148,"line_start":813,"line_end":813,"column_start":24,"column_end":37},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":384},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":79150,"byte_end":79158,"line_start":52,"line_end":52,"column_start":29,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":420},"to":{"krate":2,"index":6965}},{"span":{"file_name":"C:\\Users\\Jamison\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.4\\src\\error.rs","byte_start":79403,"byte_end":79411,"line_start":61,"line_end":61,"column_start":28,"column_end":36},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":420},"to":{"krate":1,"index":1750}}]}